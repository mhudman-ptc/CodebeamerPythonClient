# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TrackerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_tracker(self, tracker_id, **kwargs):  # noqa: E501
        """Deletes a tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tracker(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tracker_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tracker_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def delete_tracker_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Deletes a tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tracker_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tracker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `delete_tracker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_choice_option(self, tracker_id, field_id, option_id, **kwargs):  # noqa: E501
        """Get option of a choice field of tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_choice_option(tracker_id, field_id, option_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int field_id: (required)
        :param int option_id: (required)
        :return: ChoiceOptionReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_choice_option_with_http_info(tracker_id, field_id, option_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_choice_option_with_http_info(tracker_id, field_id, option_id, **kwargs)  # noqa: E501
            return data

    def get_choice_option_with_http_info(self, tracker_id, field_id, option_id, **kwargs):  # noqa: E501
        """Get option of a choice field of tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_choice_option_with_http_info(tracker_id, field_id, option_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int field_id: (required)
        :param int option_id: (required)
        :return: ChoiceOptionReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'field_id', 'option_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_choice_option" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_choice_option`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `get_choice_option`")  # noqa: E501
        # verify the required parameter 'option_id' is set
        if ('option_id' not in params or
                params['option_id'] is None):
            raise ValueError("Missing the required parameter `option_id` when calling `get_choice_option`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'option_id' in params:
            path_params['optionId'] = params['option_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/fields/{fieldId}/options/{optionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChoiceOptionReference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_items_by_tracker(self, tracker_id, **kwargs):  # noqa: E501
        """Get items in a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_by_tracker(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_items_by_tracker_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_items_by_tracker_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_items_by_tracker_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get items in a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_by_tracker_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_items_by_tracker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_items_by_tracker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemReferenceSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker(self, tracker_id, **kwargs):  # noqa: E501
        """Get tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: Tracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: Tracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_baselines(self, tracker_id, **kwargs):  # noqa: E501
        """Get baselines of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_baselines(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: ReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_baselines_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_baselines_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_baselines_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get baselines of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_baselines_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: ReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_baselines" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_baselines`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/baselines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferenceSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_configuration(self, tracker_id, **kwargs):  # noqa: E501
        """Get tracker configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_configuration(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: TrackerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_configuration_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_configuration_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_configuration_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get tracker configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_configuration_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: TrackerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/tracker/{trackerId}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_field(self, tracker_id, field_id, **kwargs):  # noqa: E501
        """Get field of tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_field(tracker_id, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int field_id: (required)
        :return: AbstractField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_field_with_http_info(tracker_id, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_field_with_http_info(tracker_id, field_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_field_with_http_info(self, tracker_id, field_id, **kwargs):  # noqa: E501
        """Get field of tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_field_with_http_info(tracker_id, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int field_id: (required)
        :return: AbstractField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_field`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `get_tracker_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/fields/{fieldId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbstractField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_field_permissions(self, tracker_id, field_id, **kwargs):  # noqa: E501
        """Get permissions of tracker field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_field_permissions(tracker_id, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int field_id: (required)
        :param int status_id:
        :return: list[TrackerFieldStatusPermissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_field_permissions_with_http_info(tracker_id, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_field_permissions_with_http_info(tracker_id, field_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_field_permissions_with_http_info(self, tracker_id, field_id, **kwargs):  # noqa: E501
        """Get permissions of tracker field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_field_permissions_with_http_info(tracker_id, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int field_id: (required)
        :param int status_id:
        :return: list[TrackerFieldStatusPermissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'field_id', 'status_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_field_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_field_permissions`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `get_tracker_field_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []
        if 'status_id' in params:
            query_params.append(('statusId', params['status_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/fields/{fieldId}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrackerFieldStatusPermissions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_fields(self, tracker_id, **kwargs):  # noqa: E501
        """Get fields of tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_fields(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: list[FieldReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_fields_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_fields_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_fields_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get fields of tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_fields_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: list[FieldReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FieldReference]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_fields_permissions(self, tracker_id, **kwargs):  # noqa: E501
        """Get permissions of all fields of a tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_fields_permissions(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int status_id:
        :return: TrackerFieldsStatusPermissions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_fields_permissions_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_fields_permissions_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_fields_permissions_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get permissions of all fields of a tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_fields_permissions_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int status_id:
        :return: TrackerFieldsStatusPermissions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'status_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_fields_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_fields_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'status_id' in params:
            query_params.append(('statusId', params['status_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/fields/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerFieldsStatusPermissions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_outline(self, tracker_id, **kwargs):  # noqa: E501
        """Get outline of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_outline(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int parent_item_id: Show only the children of this item.
        :param int result_depth_filter: The depth level of the result outline.
        :return: OutlineItemSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_outline_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_outline_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_outline_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get outline of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_outline_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int parent_item_id: Show only the children of this item.
        :param int result_depth_filter: The depth level of the result outline.
        :return: OutlineItemSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'parent_item_id', 'result_depth_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_outline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_outline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'parent_item_id' in params:
            query_params.append(('parentItemId', params['parent_item_id']))  # noqa: E501
        if 'result_depth_filter' in params:
            query_params.append(('resultDepthFilter', params['result_depth_filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/outline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutlineItemSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_schema(self, tracker_id, **kwargs):  # noqa: E501
        """Get the schema of a tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_schema(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: list[AbstractField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_schema_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_schema_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_schema_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get the schema of a tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_schema_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: list[AbstractField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AbstractField]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_transitions(self, tracker_id, **kwargs):  # noqa: E501
        """Get all transitions of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_transitions(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int from_status_id: The from status id filter for transitions.
        :return: list[WorkflowTransition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_transitions_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_transitions_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_transitions_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get all transitions of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_transitions_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int from_status_id: The from status id filter for transitions.
        :return: list[WorkflowTransition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'from_status_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_transitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_transitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'from_status_id' in params:
            query_params.append(('fromStatusId', params['from_status_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/transitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkflowTransition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_type(self, tracker_type_id, **kwargs):  # noqa: E501
        """Get the immutable definition of a tracker type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_type(tracker_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_type_id: (required)
        :return: TrackerType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_type_with_http_info(tracker_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_type_with_http_info(tracker_type_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_type_with_http_info(self, tracker_type_id, **kwargs):  # noqa: E501
        """Get the immutable definition of a tracker type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_type_with_http_info(tracker_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_type_id: (required)
        :return: TrackerType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_type_id' is set
        if ('tracker_type_id' not in params or
                params['tracker_type_id'] is None):
            raise ValueError("Missing the required parameter `tracker_type_id` when calling `get_tracker_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_type_id' in params:
            path_params['trackerTypeId'] = params['tracker_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/types/{trackerTypeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_types(self, **kwargs):  # noqa: E501
        """Get the list of tracker types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str outline: Outline is enabled, disabled or any(no filtering will be applied).
        :return: list[TrackerTypeReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tracker_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of tracker types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str outline: Outline is enabled, disabled or any(no filtering will be applied).
        :return: list[TrackerTypeReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['outline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'outline' in params:
            query_params.append(('outline', params['outline']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrackerTypeReference]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tracker_configuration(self, body, **kwargs):  # noqa: E501
        """Create or update tracker configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tracker_configuration(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerConfiguration body: (required)
        :return: TrackerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tracker_configuration_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_tracker_configuration_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_tracker_configuration_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create or update tracker configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tracker_configuration_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerConfiguration body: (required)
        :return: TrackerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tracker_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_tracker_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/tracker/configuration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tracker(self, body, tracker_id, **kwargs):  # noqa: E501
        """Updates a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tracker(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Tracker body: (required)
        :param int tracker_id: (required)
        :return: Tracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tracker_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tracker_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
            return data

    def update_tracker_with_http_info(self, body, tracker_id, **kwargs):  # noqa: E501
        """Updates a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tracker_with_http_info(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Tracker body: (required)
        :param int tracker_id: (required)
        :return: Tracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tracker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_tracker`")  # noqa: E501
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `update_tracker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tracker_icon(self, tracker_id, **kwargs):  # noqa: E501
        """Upload a tracker icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tracker_icon(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: Id of the tracker (required)
        :param str icon:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tracker_icon_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tracker_icon_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def update_tracker_icon_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Upload a tracker icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tracker_icon_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: Id of the tracker (required)
        :param str icon:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'icon']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tracker_icon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `update_tracker_icon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'icon' in params:
            local_var_files['icon'] = params['icon']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/icon', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
