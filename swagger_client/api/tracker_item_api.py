# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TrackerItemApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_child_to_tracker(self, body, tracker_id, **kwargs):  # noqa: E501
        """Add a child item to a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_child_to_tracker(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemRevision body: (required)
        :param int tracker_id: (required)
        :return: TrackerItemChildReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_child_to_tracker_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_child_to_tracker_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
            return data

    def add_child_to_tracker_with_http_info(self, body, tracker_id, **kwargs):  # noqa: E501
        """Add a child item to a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_child_to_tracker_with_http_info(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemRevision body: (required)
        :param int tracker_id: (required)
        :return: TrackerItemChildReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_child_to_tracker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_child_to_tracker`")  # noqa: E501
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `add_child_to_tracker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/children', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemChildReference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_child_to_tracker_item(self, body, item_id, **kwargs):  # noqa: E501
        """Add a child item to a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_child_to_tracker_item(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemRevision body: (required)
        :param int item_id: (required)
        :return: TrackerItemChildReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_child_to_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_child_to_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
            return data

    def add_child_to_tracker_item_with_http_info(self, body, item_id, **kwargs):  # noqa: E501
        """Add a child item to a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_child_to_tracker_item_with_http_info(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemRevision body: (required)
        :param int item_id: (required)
        :return: TrackerItemChildReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_child_to_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_child_to_tracker_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `add_child_to_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/children', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemChildReference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_update_tracker_item_fields(self, body, **kwargs):  # noqa: E501
        """Bulk update fields of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_tracker_item_fields(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[UpdateTrackerItemFieldWithItemId] body: (required)
        :param bool atomic: If it's turned on the whole update will run in a single transaction.
        :return: BulkOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_update_tracker_item_fields_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_update_tracker_item_fields_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bulk_update_tracker_item_fields_with_http_info(self, body, **kwargs):  # noqa: E501
        """Bulk update fields of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_tracker_item_fields_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[UpdateTrackerItemFieldWithItemId] body: (required)
        :param bool atomic: If it's turned on the whole update will run in a single transaction.
        :return: BulkOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'atomic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_tracker_item_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_update_tracker_item_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'atomic' in params:
            query_params.append(('atomic', params['atomic']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/fields', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_tracker_item_lock(self, item_id, **kwargs):  # noqa: E501
        """Check whether a tracker item is locked, and if it is, retrieve the details of the lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_tracker_item_lock(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: Tracker item id (required)
        :return: LockInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_tracker_item_lock_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.check_tracker_item_lock_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def check_tracker_item_lock_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Check whether a tracker item is locked, and if it is, retrieve the details of the lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_tracker_item_lock_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: Tracker item id (required)
        :return: LockInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_tracker_item_lock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `check_tracker_item_lock`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/lock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LockInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_tracker_item(self, body, tracker_id, **kwargs):  # noqa: E501
        """Create a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tracker_item(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItem body: (required)
        :param int tracker_id: (required)
        :param int parent_item_id:
        :param int reference_item_id:
        :param str position:
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_tracker_item_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_tracker_item_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
            return data

    def create_tracker_item_with_http_info(self, body, tracker_id, **kwargs):  # noqa: E501
        """Create a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tracker_item_with_http_info(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItem body: (required)
        :param int tracker_id: (required)
        :param int parent_item_id:
        :param int reference_item_id:
        :param str position:
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tracker_id', 'parent_item_id', 'reference_item_id', 'position']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_tracker_item`")  # noqa: E501
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `create_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'parent_item_id' in params:
            query_params.append(('parentItemId', params['parent_item_id']))  # noqa: E501
        if 'reference_item_id' in params:
            query_params.append(('referenceItemId', params['reference_item_id']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tracker_item(self, item_id, **kwargs):  # noqa: E501
        """Move tracker item to trash  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tracker_item(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tracker_item_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tracker_item_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def delete_tracker_item_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Move tracker item to trash  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tracker_item_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_tracker_children(self, tracker_id, **kwargs):  # noqa: E501
        """Get child items of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_tracker_children(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_tracker_children_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_tracker_children_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def find_tracker_children_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get child items of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_tracker_children_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_tracker_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `find_tracker_children`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemReferenceSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_tracker_item_children(self, item_id, **kwargs):  # noqa: E501
        """Get child items of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_tracker_item_children(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_tracker_item_children_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_tracker_item_children_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def find_tracker_item_children_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get child items of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_tracker_item_children_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_tracker_item_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `find_tracker_item_children`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemReferenceSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_tracker_items(self, query_string, **kwargs):  # noqa: E501
        """Get tracker items by cbQL query string  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_tracker_items(query_string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_string: (required)
        :param int baseline_id: Baseline on which the queery is applied.
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: TrackerItemSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_tracker_items_with_http_info(query_string, **kwargs)  # noqa: E501
        else:
            (data) = self.find_tracker_items_with_http_info(query_string, **kwargs)  # noqa: E501
            return data

    def find_tracker_items_with_http_info(self, query_string, **kwargs):  # noqa: E501
        """Get tracker items by cbQL query string  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_tracker_items_with_http_info(query_string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_string: (required)
        :param int baseline_id: Baseline on which the queery is applied.
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: TrackerItemSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_string', 'baseline_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_tracker_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_string' is set
        if ('query_string' not in params or
                params['query_string'] is None):
            raise ValueError("Missing the required parameter `query_string` when calling `find_tracker_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'baseline_id' in params:
            query_params.append(('baselineId', params['baseline_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'query_string' in params:
            query_params.append(('queryString', params['query_string']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_tracker_items_by_cb_ql(self, body, **kwargs):  # noqa: E501
        """Get tracker items by cbQL query string  # noqa: E501

        API can be called with a complex cbQL string to find tracker items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_tracker_items_by_cb_ql(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemSearchRequest body: (required)
        :return: TrackerItemSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_tracker_items_by_cb_ql_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.find_tracker_items_by_cb_ql_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def find_tracker_items_by_cb_ql_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get tracker items by cbQL query string  # noqa: E501

        API can be called with a complex cbQL string to find tracker items  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_tracker_items_by_cb_ql_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemSearchRequest body: (required)
        :return: TrackerItemSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_tracker_items_by_cb_ql" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `find_tracker_items_by_cb_ql`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_baseline_tracker_item_relations(self, item_id, **kwargs):  # noqa: E501
        """Get tracker items related to a tracker item  # noqa: E501

        Use this endpoint to fetch tracker items related to a specified tracker item. The relations include downstream references, upstream references, incoming associations and outgoing associations of the given item. Relations with entities that are not tracker items (e.g., trackers, projects, URLs, etc.) will not be included in the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baseline_tracker_item_relations(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :param int baseline_id:
        :param int page: Index of page, starting from 1.
        :param int page_size: Number of items per page. Max value: 500
        :return: TrackerItemRelationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_baseline_tracker_item_relations_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_baseline_tracker_item_relations_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_baseline_tracker_item_relations_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get tracker items related to a tracker item  # noqa: E501

        Use this endpoint to fetch tracker items related to a specified tracker item. The relations include downstream references, upstream references, incoming associations and outgoing associations of the given item. Relations with entities that are not tracker items (e.g., trackers, projects, URLs, etc.) will not be included in the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baseline_tracker_item_relations_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :param int baseline_id:
        :param int page: Index of page, starting from 1.
        :param int page_size: Number of items per page. Max value: 500
        :return: TrackerItemRelationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'baseline_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_baseline_tracker_item_relations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_baseline_tracker_item_relations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'baseline_id' in params:
            query_params.append(('baselineId', params['baseline_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/relations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemRelationsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_baseline_tracker_items_relations(self, body, **kwargs):  # noqa: E501
        """Get tracker items related to some tracker items  # noqa: E501

        Use this endpoint to fetch tracker items related to some specified tracker items. The relations include downstream references, upstream references, incoming associations and outgoing associations of the given items. Relations with entities that are not tracker items (e.g., trackers, projects, URLs, etc.) will not be included in the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baseline_tracker_items_relations(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemsRequest body: (required)
        :param int baseline_id:
        :return: list[TrackerItemRelationsResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_baseline_tracker_items_relations_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_baseline_tracker_items_relations_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_baseline_tracker_items_relations_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get tracker items related to some tracker items  # noqa: E501

        Use this endpoint to fetch tracker items related to some specified tracker items. The relations include downstream references, upstream references, incoming associations and outgoing associations of the given items. Relations with entities that are not tracker items (e.g., trackers, projects, URLs, etc.) will not be included in the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baseline_tracker_items_relations_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemsRequest body: (required)
        :param int baseline_id:
        :return: list[TrackerItemRelationsResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'baseline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_baseline_tracker_items_relations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_baseline_tracker_items_relations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'baseline_id' in params:
            query_params.append(('baselineId', params['baseline_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/relations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrackerItemRelationsResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_choice_options(self, item_id, field_id, **kwargs):  # noqa: E501
        """Get the options of a choice field of tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_choice_options(item_id, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :param int field_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: ReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_choice_options_with_http_info(item_id, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_choice_options_with_http_info(item_id, field_id, **kwargs)  # noqa: E501
            return data

    def get_choice_options_with_http_info(self, item_id, field_id, **kwargs):  # noqa: E501
        """Get the options of a choice field of tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_choice_options_with_http_info(item_id, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :param int field_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: ReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'field_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_choice_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_choice_options`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `get_choice_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/fields/{fieldId}/options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferenceSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_accessibility(self, item_id, **kwargs):  # noqa: E501
        """Get a tracker item fields accessibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_accessibility(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: Tracker item id (required)
        :param int target_status_id:
        :return: TrackerItemFieldAccessibilityList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_accessibility_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_accessibility_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_item_accessibility_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get a tracker item fields accessibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_accessibility_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: Tracker item id (required)
        :param int target_status_id:
        :return: TrackerItemFieldAccessibilityList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'target_status_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_accessibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_item_accessibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'target_status_id' in params:
            query_params.append(('targetStatusId', params['target_status_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/fields/accessibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemFieldAccessibilityList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_item(self, item_id, **kwargs):  # noqa: E501
        """Get basic tracker item  # noqa: E501

        API can be used for fetching basic information of a tracker item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :param int version:
        :param int baseline_id:
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_item_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_item_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_item_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get basic tracker item  # noqa: E501

        API can be used for fetching basic information of a tracker item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :param int version:
        :param int baseline_id:
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'version', 'baseline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'baseline_id' in params:
            query_params.append(('baselineId', params['baseline_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_item_fields(self, item_id, **kwargs):  # noqa: E501
        """Get fields of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_fields(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: TrackerItemField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_item_fields_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_item_fields_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_item_fields_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get fields of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_fields_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: TrackerItemField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_item_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_tracker_item_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_item_history(self, item_id, **kwargs):  # noqa: E501
        """Get tracker item history  # noqa: E501

        API can be used for fetching basic information of a tracker item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_history(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: TrackerItemHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_item_history_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_item_history_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_item_history_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get tracker item history  # noqa: E501

        API can be used for fetching basic information of a tracker item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_history_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: TrackerItemHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_item_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_tracker_item_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_item_reviews(self, item_id, **kwargs):  # noqa: E501
        """Get all Tracker Item Reviews for a particular Tracker Item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_reviews(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: list[TrackerItemReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_item_reviews_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_item_reviews_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_item_reviews_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get all Tracker Item Reviews for a particular Tracker Item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_reviews_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: list[TrackerItemReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_item_reviews" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_tracker_item_reviews`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/reviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrackerItemReview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_item_transitions(self, item_id, **kwargs):  # noqa: E501
        """Get available transitions for a tracker item  # noqa: E501

        API can be used for getting available transitions for a tracker item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_transitions(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: list[WorkflowTransition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_item_transitions_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_item_transitions_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_item_transitions_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get available transitions for a tracker item  # noqa: E501

        API can be used for getting available transitions for a tracker item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_item_transitions_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: (required)
        :return: list[WorkflowTransition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_item_transitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_tracker_item_transitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/transitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkflowTransition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lock_tracker_item(self, body, item_id, **kwargs):  # noqa: E501
        """Put a soft lock on a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_tracker_item(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LockRequest body: (required)
        :param int item_id: Tracker item id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lock_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lock_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
            return data

    def lock_tracker_item_with_http_info(self, body, item_id, **kwargs):  # noqa: E501
        """Put a soft lock on a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_tracker_item_with_http_info(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LockRequest body: (required)
        :param int item_id: Tracker item id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lock_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lock_tracker_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `lock_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/lock', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_children_of_tracker(self, body, tracker_id, **kwargs):  # noqa: E501
        """Patch the child item list of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_children_of_tracker(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemChildReference body: (required)
        :param int tracker_id: (required)
        :param str mode:
        :return: TrackerItemChildReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_children_of_tracker_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_children_of_tracker_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
            return data

    def patch_children_of_tracker_with_http_info(self, body, tracker_id, **kwargs):  # noqa: E501
        """Patch the child item list of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_children_of_tracker_with_http_info(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemChildReference body: (required)
        :param int tracker_id: (required)
        :param str mode:
        :return: TrackerItemChildReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tracker_id', 'mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_children_of_tracker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_children_of_tracker`")  # noqa: E501
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `patch_children_of_tracker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/children', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemChildReference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_children_of_tracker_item(self, body, mode, item_id, **kwargs):  # noqa: E501
        """Patch the child item list of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_children_of_tracker_item(body, mode, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemChildReference body: (required)
        :param str mode: (required)
        :param int item_id: (required)
        :return: TrackerItemChildReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_children_of_tracker_item_with_http_info(body, mode, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_children_of_tracker_item_with_http_info(body, mode, item_id, **kwargs)  # noqa: E501
            return data

    def patch_children_of_tracker_item_with_http_info(self, body, mode, item_id, **kwargs):  # noqa: E501
        """Patch the child item list of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_children_of_tracker_item_with_http_info(body, mode, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemChildReference body: (required)
        :param str mode: (required)
        :param int item_id: (required)
        :return: TrackerItemChildReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'mode', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_children_of_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_children_of_tracker_item`")  # noqa: E501
        # verify the required parameter 'mode' is set
        if ('mode' not in params or
                params['mode'] is None):
            raise ValueError("Missing the required parameter `mode` when calling `patch_children_of_tracker_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `patch_children_of_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/children', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemChildReference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_children_of_tracker(self, body, tracker_id, **kwargs):  # noqa: E501
        """Reorder the child item list of a tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_children_of_tracker(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTrackerItemChildrenRequest body: (required)
        :param int tracker_id: (required)
        :param int result_page_size: Number of items in the result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_children_of_tracker_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_children_of_tracker_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
            return data

    def replace_children_of_tracker_with_http_info(self, body, tracker_id, **kwargs):  # noqa: E501
        """Reorder the child item list of a tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_children_of_tracker_with_http_info(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTrackerItemChildrenRequest body: (required)
        :param int tracker_id: (required)
        :param int result_page_size: Number of items in the result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tracker_id', 'result_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_children_of_tracker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_children_of_tracker`")  # noqa: E501
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `replace_children_of_tracker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'result_page_size' in params:
            query_params.append(('resultPageSize', params['result_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/children', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemReferenceSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_children_of_tracker_item(self, body, item_id, **kwargs):  # noqa: E501
        """Replace the child item list of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_children_of_tracker_item(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTrackerItemChildrenRequest body: (required)
        :param int item_id: (required)
        :param int result_page_size: Number of items in the result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_children_of_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_children_of_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
            return data

    def replace_children_of_tracker_item_with_http_info(self, body, item_id, **kwargs):  # noqa: E501
        """Replace the child item list of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_children_of_tracker_item_with_http_info(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTrackerItemChildrenRequest body: (required)
        :param int item_id: (required)
        :param int result_page_size: Number of items in the result page. Max value: 500
        :return: TrackerItemReferenceSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'item_id', 'result_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_children_of_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_children_of_tracker_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `replace_children_of_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'result_page_size' in params:
            query_params.append(('resultPageSize', params['result_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/children', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemReferenceSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlock_tracker_item(self, item_id, **kwargs):  # noqa: E501
        """Unlock a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlock_tracker_item(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: Tracker item id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlock_tracker_item_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlock_tracker_item_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def unlock_tracker_item_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Unlock a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlock_tracker_item_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: Tracker item id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlock_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `unlock_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/lock', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_custom_field_tracker_item(self, body, item_id, **kwargs):  # noqa: E501
        """Update fields of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_field_tracker_item(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTrackerItemField body: (required)
        :param int item_id: (required)
        :param bool quiet_mode: If it's turned on HTTP 200 with empty response indicates that the update was successful.
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_custom_field_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_custom_field_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
            return data

    def update_custom_field_tracker_item_with_http_info(self, body, item_id, **kwargs):  # noqa: E501
        """Update fields of a tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_field_tracker_item_with_http_info(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTrackerItemField body: (required)
        :param int item_id: (required)
        :param bool quiet_mode: If it's turned on HTTP 200 with empty response indicates that the update was successful.
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'item_id', 'quiet_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_custom_field_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_custom_field_tracker_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `update_custom_field_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'quiet_mode' in params:
            query_params.append(('quietMode', params['quiet_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/fields', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_table_field_tracker_item(self, body, item_id, table_field_id, **kwargs):  # noqa: E501
        """Update table field of tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_table_field_tracker_item(body, item_id, table_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTrackerItemTableField body: (required)
        :param int item_id: (required)
        :param int table_field_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_table_field_tracker_item_with_http_info(body, item_id, table_field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_table_field_tracker_item_with_http_info(body, item_id, table_field_id, **kwargs)  # noqa: E501
            return data

    def update_table_field_tracker_item_with_http_info(self, body, item_id, table_field_id, **kwargs):  # noqa: E501
        """Update table field of tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_table_field_tracker_item_with_http_info(body, item_id, table_field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTrackerItemTableField body: (required)
        :param int item_id: (required)
        :param int table_field_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'item_id', 'table_field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_table_field_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_table_field_tracker_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `update_table_field_tracker_item`")  # noqa: E501
        # verify the required parameter 'table_field_id' is set
        if ('table_field_id' not in params or
                params['table_field_id'] is None):
            raise ValueError("Missing the required parameter `table_field_id` when calling `update_table_field_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501
        if 'table_field_id' in params:
            path_params['tableFieldId'] = params['table_field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}/fields/tables/{tableFieldId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tracker_item(self, body, item_id, **kwargs):  # noqa: E501
        """Update tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tracker_item(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItem body: (required)
        :param int item_id: (required)
        :param int reference_item_id:
        :param str position:
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tracker_item_with_http_info(body, item_id, **kwargs)  # noqa: E501
            return data

    def update_tracker_item_with_http_info(self, body, item_id, **kwargs):  # noqa: E501
        """Update tracker item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tracker_item_with_http_info(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItem body: (required)
        :param int item_id: (required)
        :param int reference_item_id:
        :param str position:
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'item_id', 'reference_item_id', 'position']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tracker_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_tracker_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `update_tracker_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'reference_item_id' in params:
            query_params.append(('referenceItemId', params['reference_item_id']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/{itemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
