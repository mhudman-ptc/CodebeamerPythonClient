# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TestRunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_test_run_for_test_case(self, body, test_run_tracker_id, **kwargs):  # noqa: E501
        """Create a new test run for test cases or test sets  # noqa: E501

        For multiple test sets please use trackers/{testRunTrackerId}/testruns/generatefromtestset endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_run_for_test_case(body, test_run_tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTestRunRequest body: (required)
        :param int test_run_tracker_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_test_run_for_test_case_with_http_info(body, test_run_tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_test_run_for_test_case_with_http_info(body, test_run_tracker_id, **kwargs)  # noqa: E501
            return data

    def create_test_run_for_test_case_with_http_info(self, body, test_run_tracker_id, **kwargs):  # noqa: E501
        """Create a new test run for test cases or test sets  # noqa: E501

        For multiple test sets please use trackers/{testRunTrackerId}/testruns/generatefromtestset endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_run_for_test_case_with_http_info(body, test_run_tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTestRunRequest body: (required)
        :param int test_run_tracker_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_run_tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_test_run_for_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_test_run_for_test_case`")  # noqa: E501
        # verify the required parameter 'test_run_tracker_id' is set
        if ('test_run_tracker_id' not in params or
                params['test_run_tracker_id'] is None):
            raise ValueError("Missing the required parameter `test_run_tracker_id` when calling `create_test_run_for_test_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_tracker_id' in params:
            path_params['testRunTrackerId'] = params['test_run_tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{testRunTrackerId}/testruns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_test_run_for_test_sets(self, body, test_run_tracker_id, **kwargs):  # noqa: E501
        """Create a new test run for test cases or test sets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_run_for_test_sets(body, test_run_tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTestRunFromTestSetsRequest body: (required)
        :param int test_run_tracker_id: (required)
        :return: TestRunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_test_run_for_test_sets_with_http_info(body, test_run_tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_test_run_for_test_sets_with_http_info(body, test_run_tracker_id, **kwargs)  # noqa: E501
            return data

    def create_test_run_for_test_sets_with_http_info(self, body, test_run_tracker_id, **kwargs):  # noqa: E501
        """Create a new test run for test cases or test sets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_run_for_test_sets_with_http_info(body, test_run_tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTestRunFromTestSetsRequest body: (required)
        :param int test_run_tracker_id: (required)
        :return: TestRunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_run_tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_test_run_for_test_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_test_run_for_test_sets`")  # noqa: E501
        # verify the required parameter 'test_run_tracker_id' is set
        if ('test_run_tracker_id' not in params or
                params['test_run_tracker_id'] is None):
            raise ValueError("Missing the required parameter `test_run_tracker_id` when calling `create_test_run_for_test_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_tracker_id' in params:
            path_params['testRunTrackerId'] = params['test_run_tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{testRunTrackerId}/testruns/generatefromtestset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestRunResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_test_run_result(self, body, test_run_id, **kwargs):  # noqa: E501
        """Update result of a Test Run.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_run_result(body, test_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTestRunRequest body: (required)
        :param int test_run_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_test_run_result_with_http_info(body, test_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_test_run_result_with_http_info(body, test_run_id, **kwargs)  # noqa: E501
            return data

    def update_test_run_result_with_http_info(self, body, test_run_id, **kwargs):  # noqa: E501
        """Update result of a Test Run.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_run_result_with_http_info(body, test_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTestRunRequest body: (required)
        :param int test_run_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test_run_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_test_run_result`")  # noqa: E501
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `update_test_run_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/testruns/{testRunId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_automated_test_results(self, body, test_run_tracker_id, **kwargs):  # noqa: E501
        """Create a new test run for large number of automated test cases  # noqa: E501

        Upload large amount of automated test case run results into a single test run. This process may take a while, please check your proxy settings to prevent timeout.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_automated_test_results(body, test_run_tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutomatedTestRunRequest body: (required)
        :param int test_run_tracker_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_automated_test_results_with_http_info(body, test_run_tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_automated_test_results_with_http_info(body, test_run_tracker_id, **kwargs)  # noqa: E501
            return data

    def upload_automated_test_results_with_http_info(self, body, test_run_tracker_id, **kwargs):  # noqa: E501
        """Create a new test run for large number of automated test cases  # noqa: E501

        Upload large amount of automated test case run results into a single test run. This process may take a while, please check your proxy settings to prevent timeout.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_automated_test_results_with_http_info(body, test_run_tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutomatedTestRunRequest body: (required)
        :param int test_run_tracker_id: (required)
        :return: TrackerItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_run_tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_automated_test_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_automated_test_results`")  # noqa: E501
        # verify the required parameter 'test_run_tracker_id' is set
        if ('test_run_tracker_id' not in params or
                params['test_run_tracker_id'] is None):
            raise ValueError("Missing the required parameter `test_run_tracker_id` when calling `upload_automated_test_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_tracker_id' in params:
            path_params['testRunTrackerId'] = params['test_run_tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{testRunTrackerId}/automatedtestruns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
