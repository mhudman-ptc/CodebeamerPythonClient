# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkingSetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_items_mapping_in_working_set(self, body, **kwargs):  # noqa: E501
        """Maps Tracker Items in Working-Set  # noqa: E501

        Maps Tracker Items to the corresponding Tracker Items in target Working-Set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_mapping_in_working_set(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkingSetItemsMappingRequest body: (required)
        :return: list[WorkingSetItemMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_items_mapping_in_working_set_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_items_mapping_in_working_set_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_items_mapping_in_working_set_with_http_info(self, body, **kwargs):  # noqa: E501
        """Maps Tracker Items in Working-Set  # noqa: E501

        Maps Tracker Items to the corresponding Tracker Items in target Working-Set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_mapping_in_working_set_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkingSetItemsMappingRequest body: (required)
        :return: list[WorkingSetItemMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_items_mapping_in_working_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_items_mapping_in_working_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/working-sets/items-mapping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkingSetItemMapping]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_working_sets(self, tracker_id, **kwargs):  # noqa: E501
        """Lists Working-Sets  # noqa: E501

        Lists Working-Sets that contain the given Tracker or Branch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_working_sets(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: Tracker or Branch id (required)
        :param bool include_deleted: Find Tracker or Branch if deleted and the result contains the deleted Working-Sets
        :return: list[TrackerWorkingSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_working_sets_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_working_sets_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_working_sets_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Lists Working-Sets  # noqa: E501

        Lists Working-Sets that contain the given Tracker or Branch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_working_sets_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: Tracker or Branch id (required)
        :param bool include_deleted: Find Tracker or Branch if deleted and the result contains the deleted Working-Sets
        :return: list[TrackerWorkingSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'include_deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_working_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_working_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []
        if 'include_deleted' in params:
            query_params.append(('includeDeleted', params['include_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/working-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrackerWorkingSet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_working_set_information(self, working_set_id, **kwargs):  # noqa: E501
        """Working-Set information  # noqa: E501

        Gets the Working-Set information for the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_working_set_information(working_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int working_set_id: Id of the Working-Set (required)
        :param bool include_deleted: The result contains the deleted Working-Sets
        :return: WorkingSetInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_working_set_information_with_http_info(working_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_working_set_information_with_http_info(working_set_id, **kwargs)  # noqa: E501
            return data

    def get_working_set_information_with_http_info(self, working_set_id, **kwargs):  # noqa: E501
        """Working-Set information  # noqa: E501

        Gets the Working-Set information for the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_working_set_information_with_http_info(working_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int working_set_id: Id of the Working-Set (required)
        :param bool include_deleted: The result contains the deleted Working-Sets
        :return: WorkingSetInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['working_set_id', 'include_deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_working_set_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'working_set_id' is set
        if ('working_set_id' not in params or
                params['working_set_id'] is None):
            raise ValueError("Missing the required parameter `working_set_id` when calling `get_working_set_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'working_set_id' in params:
            path_params['workingSetId'] = params['working_set_id']  # noqa: E501

        query_params = []
        if 'include_deleted' in params:
            query_params.append(('includeDeleted', params['include_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/working-sets/{workingSetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkingSetInformation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_working_set_trackers(self, working_set_id, **kwargs):  # noqa: E501
        """ Lists the trackers in a Working-Set  # noqa: E501

        Lists the trackers (shared and included) in the given Working-Set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_working_set_trackers(working_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int working_set_id: Working-Set id (required)
        :param bool include_deleted: The result contains the deleted Trackers
        :return: list[WorkingSetTracker]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_working_set_trackers_with_http_info(working_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_working_set_trackers_with_http_info(working_set_id, **kwargs)  # noqa: E501
            return data

    def get_working_set_trackers_with_http_info(self, working_set_id, **kwargs):  # noqa: E501
        """ Lists the trackers in a Working-Set  # noqa: E501

        Lists the trackers (shared and included) in the given Working-Set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_working_set_trackers_with_http_info(working_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int working_set_id: Working-Set id (required)
        :param bool include_deleted: The result contains the deleted Trackers
        :return: list[WorkingSetTracker]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['working_set_id', 'include_deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_working_set_trackers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'working_set_id' is set
        if ('working_set_id' not in params or
                params['working_set_id'] is None):
            raise ValueError("Missing the required parameter `working_set_id` when calling `get_working_set_trackers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'working_set_id' in params:
            path_params['workingSetId'] = params['working_set_id']  # noqa: E501

        query_params = []
        if 'include_deleted' in params:
            query_params.append(('includeDeleted', params['include_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/working-sets/{workingSetId}/trackers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkingSetTracker]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_working_sets_of_project(self, project_id, **kwargs):  # noqa: E501
        """Project level Working-Sets information  # noqa: E501

        Lists top-level Working-Sets minimal information for the given project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_working_sets_of_project(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The id of the project (required)
        :param bool include_deleted: The result lists the deleted Working-Sets
        :return: list[WorkingSetMinimal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_working_sets_of_project_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_working_sets_of_project_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def list_working_sets_of_project_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Project level Working-Sets information  # noqa: E501

        Lists top-level Working-Sets minimal information for the given project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_working_sets_of_project_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The id of the project (required)
        :param bool include_deleted: The result lists the deleted Working-Sets
        :return: list[WorkingSetMinimal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'include_deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_working_sets_of_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `list_working_sets_of_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'include_deleted' in params:
            query_params.append(('includeDeleted', params['include_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/projects/{projectId}/working-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkingSetMinimal]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
