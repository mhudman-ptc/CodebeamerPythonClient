# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TrackerItemMoveApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_item_move_field_mapping(self, source_tracker_id, target_tracker_id, **kwargs):  # noqa: E501
        """Gets the default field mapping between two trackers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_move_field_mapping(source_tracker_id, target_tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int source_tracker_id: The id of the source Tracker (required)
        :param int target_tracker_id: The id of the target Tracker (required)
        :return: TrackerItemFieldMappingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_move_field_mapping_with_http_info(source_tracker_id, target_tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_move_field_mapping_with_http_info(source_tracker_id, target_tracker_id, **kwargs)  # noqa: E501
            return data

    def get_item_move_field_mapping_with_http_info(self, source_tracker_id, target_tracker_id, **kwargs):  # noqa: E501
        """Gets the default field mapping between two trackers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_move_field_mapping_with_http_info(source_tracker_id, target_tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int source_tracker_id: The id of the source Tracker (required)
        :param int target_tracker_id: The id of the target Tracker (required)
        :return: TrackerItemFieldMappingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_tracker_id', 'target_tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_move_field_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_tracker_id' is set
        if ('source_tracker_id' not in params or
                params['source_tracker_id'] is None):
            raise ValueError("Missing the required parameter `source_tracker_id` when calling `get_item_move_field_mapping`")  # noqa: E501
        # verify the required parameter 'target_tracker_id' is set
        if ('target_tracker_id' not in params or
                params['target_tracker_id'] is None):
            raise ValueError("Missing the required parameter `target_tracker_id` when calling `get_item_move_field_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source_tracker_id' in params:
            query_params.append(('sourceTrackerId', params['source_tracker_id']))  # noqa: E501
        if 'target_tracker_id' in params:
            query_params.append(('targetTrackerId', params['target_tracker_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/move/field-mapping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerItemFieldMappingInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_tracker_items(self, body, **kwargs):  # noqa: E501
        """Move Tracker Items from the Source Tracker to the Target Tracker  # noqa: E501

        Move Tracker Items from the Source Tracker to the Target Tracker. The items are optional, if it is not provided all the Tracker Items will be moved from the Source Tracker. All the fields from the Source Tracker must be in the mapping. If you want to ignore one you set the targetField to null in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_tracker_items(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemMoveRequest body: (required)
        :return: JobReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_tracker_items_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.move_tracker_items_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def move_tracker_items_with_http_info(self, body, **kwargs):  # noqa: E501
        """Move Tracker Items from the Source Tracker to the Target Tracker  # noqa: E501

        Move Tracker Items from the Source Tracker to the Target Tracker. The items are optional, if it is not provided all the Tracker Items will be moved from the Source Tracker. All the fields from the Source Tracker must be in the mapping. If you want to ignore one you set the targetField to null in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_tracker_items_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerItemMoveRequest body: (required)
        :return: JobReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_tracker_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `move_tracker_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/items/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobReference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
