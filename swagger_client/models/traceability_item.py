# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TraceabilityItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[TraceabilityItem]',
        'incoming_association': 'list[TrackerItemRevision]',
        'incoming_reference': 'list[TrackerItemRevision]',
        'incoming_associations': 'list[TrackerItemRevision]',
        'incoming_references': 'list[TrackerItemRevision]',
        'item_revision': 'TrackerItemRevision',
        'outgoing_association': 'list[TrackerItemRevision]',
        'outgoing_reference': 'list[TrackerItemRevision]',
        'outgoing_associations': 'list[TrackerItemRevision]',
        'outgoing_references': 'list[TrackerItemRevision]'
    }

    attribute_map = {
        'children': 'children',
        'incoming_association': 'incoming association',
        'incoming_reference': 'incoming reference',
        'incoming_associations': 'incomingAssociations',
        'incoming_references': 'incomingReferences',
        'item_revision': 'itemRevision',
        'outgoing_association': 'outgoing association',
        'outgoing_reference': 'outgoing reference',
        'outgoing_associations': 'outgoingAssociations',
        'outgoing_references': 'outgoingReferences'
    }

    def __init__(self, children=None, incoming_association=None, incoming_reference=None, incoming_associations=None, incoming_references=None, item_revision=None, outgoing_association=None, outgoing_reference=None, outgoing_associations=None, outgoing_references=None):  # noqa: E501
        """TraceabilityItem - a model defined in Swagger"""  # noqa: E501
        self._children = None
        self._incoming_association = None
        self._incoming_reference = None
        self._incoming_associations = None
        self._incoming_references = None
        self._item_revision = None
        self._outgoing_association = None
        self._outgoing_reference = None
        self._outgoing_associations = None
        self._outgoing_references = None
        self.discriminator = None
        if children is not None:
            self.children = children
        if incoming_association is not None:
            self.incoming_association = incoming_association
        if incoming_reference is not None:
            self.incoming_reference = incoming_reference
        if incoming_associations is not None:
            self.incoming_associations = incoming_associations
        if incoming_references is not None:
            self.incoming_references = incoming_references
        if item_revision is not None:
            self.item_revision = item_revision
        if outgoing_association is not None:
            self.outgoing_association = outgoing_association
        if outgoing_reference is not None:
            self.outgoing_reference = outgoing_reference
        if outgoing_associations is not None:
            self.outgoing_associations = outgoing_associations
        if outgoing_references is not None:
            self.outgoing_references = outgoing_references

    @property
    def children(self):
        """Gets the children of this TraceabilityItem.  # noqa: E501

        children  # noqa: E501

        :return: The children of this TraceabilityItem.  # noqa: E501
        :rtype: list[TraceabilityItem]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TraceabilityItem.

        children  # noqa: E501

        :param children: The children of this TraceabilityItem.  # noqa: E501
        :type: list[TraceabilityItem]
        """

        self._children = children

    @property
    def incoming_association(self):
        """Gets the incoming_association of this TraceabilityItem.  # noqa: E501


        :return: The incoming_association of this TraceabilityItem.  # noqa: E501
        :rtype: list[TrackerItemRevision]
        """
        return self._incoming_association

    @incoming_association.setter
    def incoming_association(self, incoming_association):
        """Sets the incoming_association of this TraceabilityItem.


        :param incoming_association: The incoming_association of this TraceabilityItem.  # noqa: E501
        :type: list[TrackerItemRevision]
        """

        self._incoming_association = incoming_association

    @property
    def incoming_reference(self):
        """Gets the incoming_reference of this TraceabilityItem.  # noqa: E501


        :return: The incoming_reference of this TraceabilityItem.  # noqa: E501
        :rtype: list[TrackerItemRevision]
        """
        return self._incoming_reference

    @incoming_reference.setter
    def incoming_reference(self, incoming_reference):
        """Sets the incoming_reference of this TraceabilityItem.


        :param incoming_reference: The incoming_reference of this TraceabilityItem.  # noqa: E501
        :type: list[TrackerItemRevision]
        """

        self._incoming_reference = incoming_reference

    @property
    def incoming_associations(self):
        """Gets the incoming_associations of this TraceabilityItem.  # noqa: E501

        incoming associations  # noqa: E501

        :return: The incoming_associations of this TraceabilityItem.  # noqa: E501
        :rtype: list[TrackerItemRevision]
        """
        return self._incoming_associations

    @incoming_associations.setter
    def incoming_associations(self, incoming_associations):
        """Sets the incoming_associations of this TraceabilityItem.

        incoming associations  # noqa: E501

        :param incoming_associations: The incoming_associations of this TraceabilityItem.  # noqa: E501
        :type: list[TrackerItemRevision]
        """

        self._incoming_associations = incoming_associations

    @property
    def incoming_references(self):
        """Gets the incoming_references of this TraceabilityItem.  # noqa: E501

        incoming references  # noqa: E501

        :return: The incoming_references of this TraceabilityItem.  # noqa: E501
        :rtype: list[TrackerItemRevision]
        """
        return self._incoming_references

    @incoming_references.setter
    def incoming_references(self, incoming_references):
        """Sets the incoming_references of this TraceabilityItem.

        incoming references  # noqa: E501

        :param incoming_references: The incoming_references of this TraceabilityItem.  # noqa: E501
        :type: list[TrackerItemRevision]
        """

        self._incoming_references = incoming_references

    @property
    def item_revision(self):
        """Gets the item_revision of this TraceabilityItem.  # noqa: E501


        :return: The item_revision of this TraceabilityItem.  # noqa: E501
        :rtype: TrackerItemRevision
        """
        return self._item_revision

    @item_revision.setter
    def item_revision(self, item_revision):
        """Sets the item_revision of this TraceabilityItem.


        :param item_revision: The item_revision of this TraceabilityItem.  # noqa: E501
        :type: TrackerItemRevision
        """

        self._item_revision = item_revision

    @property
    def outgoing_association(self):
        """Gets the outgoing_association of this TraceabilityItem.  # noqa: E501


        :return: The outgoing_association of this TraceabilityItem.  # noqa: E501
        :rtype: list[TrackerItemRevision]
        """
        return self._outgoing_association

    @outgoing_association.setter
    def outgoing_association(self, outgoing_association):
        """Sets the outgoing_association of this TraceabilityItem.


        :param outgoing_association: The outgoing_association of this TraceabilityItem.  # noqa: E501
        :type: list[TrackerItemRevision]
        """

        self._outgoing_association = outgoing_association

    @property
    def outgoing_reference(self):
        """Gets the outgoing_reference of this TraceabilityItem.  # noqa: E501


        :return: The outgoing_reference of this TraceabilityItem.  # noqa: E501
        :rtype: list[TrackerItemRevision]
        """
        return self._outgoing_reference

    @outgoing_reference.setter
    def outgoing_reference(self, outgoing_reference):
        """Sets the outgoing_reference of this TraceabilityItem.


        :param outgoing_reference: The outgoing_reference of this TraceabilityItem.  # noqa: E501
        :type: list[TrackerItemRevision]
        """

        self._outgoing_reference = outgoing_reference

    @property
    def outgoing_associations(self):
        """Gets the outgoing_associations of this TraceabilityItem.  # noqa: E501

        outgoing association  # noqa: E501

        :return: The outgoing_associations of this TraceabilityItem.  # noqa: E501
        :rtype: list[TrackerItemRevision]
        """
        return self._outgoing_associations

    @outgoing_associations.setter
    def outgoing_associations(self, outgoing_associations):
        """Sets the outgoing_associations of this TraceabilityItem.

        outgoing association  # noqa: E501

        :param outgoing_associations: The outgoing_associations of this TraceabilityItem.  # noqa: E501
        :type: list[TrackerItemRevision]
        """

        self._outgoing_associations = outgoing_associations

    @property
    def outgoing_references(self):
        """Gets the outgoing_references of this TraceabilityItem.  # noqa: E501

        outgoing reference  # noqa: E501

        :return: The outgoing_references of this TraceabilityItem.  # noqa: E501
        :rtype: list[TrackerItemRevision]
        """
        return self._outgoing_references

    @outgoing_references.setter
    def outgoing_references(self, outgoing_references):
        """Sets the outgoing_references of this TraceabilityItem.

        outgoing reference  # noqa: E501

        :param outgoing_references: The outgoing_references of this TraceabilityItem.  # noqa: E501
        :type: list[TrackerItemRevision]
        """

        self._outgoing_references = outgoing_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceabilityItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceabilityItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
