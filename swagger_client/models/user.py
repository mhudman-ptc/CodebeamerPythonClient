# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'city': 'str',
        'company': 'str',
        'country': 'str',
        'date_format': 'str',
        'email': 'str',
        'first_name': 'str',
        'id': 'int',
        'language': 'str',
        'last_login_date': 'datetime',
        'last_name': 'str',
        'mobile': 'str',
        'name': 'str',
        'phone': 'str',
        'registry_date': 'datetime',
        'skills': 'str',
        'state': 'str',
        'status': 'str',
        'time_zone': 'str',
        'title': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'address': 'address',
        'city': 'city',
        'company': 'company',
        'country': 'country',
        'date_format': 'dateFormat',
        'email': 'email',
        'first_name': 'firstName',
        'id': 'id',
        'language': 'language',
        'last_login_date': 'lastLoginDate',
        'last_name': 'lastName',
        'mobile': 'mobile',
        'name': 'name',
        'phone': 'phone',
        'registry_date': 'registryDate',
        'skills': 'skills',
        'state': 'state',
        'status': 'status',
        'time_zone': 'timeZone',
        'title': 'title',
        'zip': 'zip'
    }

    def __init__(self, address=None, city=None, company=None, country=None, date_format=None, email=None, first_name=None, id=None, language=None, last_login_date=None, last_name=None, mobile=None, name=None, phone=None, registry_date=None, skills=None, state=None, status=None, time_zone=None, title=None, zip=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._city = None
        self._company = None
        self._country = None
        self._date_format = None
        self._email = None
        self._first_name = None
        self._id = None
        self._language = None
        self._last_login_date = None
        self._last_name = None
        self._mobile = None
        self._name = None
        self._phone = None
        self._registry_date = None
        self._skills = None
        self._state = None
        self._status = None
        self._time_zone = None
        self._title = None
        self._zip = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if company is not None:
            self.company = company
        if country is not None:
            self.country = country
        if date_format is not None:
            self.date_format = date_format
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if language is not None:
            self.language = language
        if last_login_date is not None:
            self.last_login_date = last_login_date
        if last_name is not None:
            self.last_name = last_name
        if mobile is not None:
            self.mobile = mobile
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if registry_date is not None:
            self.registry_date = registry_date
        if skills is not None:
            self.skills = skills
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if time_zone is not None:
            self.time_zone = time_zone
        if title is not None:
            self.title = title
        if zip is not None:
            self.zip = zip

    @property
    def address(self):
        """Gets the address of this User.  # noqa: E501

        Address of a user  # noqa: E501

        :return: The address of this User.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this User.

        Address of a user  # noqa: E501

        :param address: The address of this User.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this User.  # noqa: E501

        City of a user  # noqa: E501

        :return: The city of this User.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this User.

        City of a user  # noqa: E501

        :param city: The city of this User.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company(self):
        """Gets the company of this User.  # noqa: E501

        Company of a user  # noqa: E501

        :return: The company of this User.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this User.

        Company of a user  # noqa: E501

        :param company: The company of this User.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def country(self):
        """Gets the country of this User.  # noqa: E501

        Country of a user in ISO 3166-1 alpha-2 format  # noqa: E501

        :return: The country of this User.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this User.

        Country of a user in ISO 3166-1 alpha-2 format  # noqa: E501

        :param country: The country of this User.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def date_format(self):
        """Gets the date_format of this User.  # noqa: E501

        Date format of a user  # noqa: E501

        :return: The date_format of this User.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this User.

        Date format of a user  # noqa: E501

        :param date_format: The date_format of this User.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        Email of a user  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Email of a user  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        First name of a user  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        First name of a user  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        Id of the entity  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Id of the entity  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this User.  # noqa: E501

        Language of a user in ISO 639-1 format  # noqa: E501

        :return: The language of this User.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this User.

        Language of a user in ISO 639-1 format  # noqa: E501

        :param language: The language of this User.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def last_login_date(self):
        """Gets the last_login_date of this User.  # noqa: E501

        Last login date of a user  # noqa: E501

        :return: The last_login_date of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_date

    @last_login_date.setter
    def last_login_date(self, last_login_date):
        """Sets the last_login_date of this User.

        Last login date of a user  # noqa: E501

        :param last_login_date: The last_login_date of this User.  # noqa: E501
        :type: datetime
        """

        self._last_login_date = last_login_date

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        Last name of a user  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Last name of a user  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def mobile(self):
        """Gets the mobile of this User.  # noqa: E501

        Mobile number of a user  # noqa: E501

        :return: The mobile of this User.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this User.

        Mobile number of a user  # noqa: E501

        :param mobile: The mobile of this User.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        Name of the entity  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Name of the entity  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501

        Phone number of a user  # noqa: E501

        :return: The phone of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.

        Phone number of a user  # noqa: E501

        :param phone: The phone of this User.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def registry_date(self):
        """Gets the registry_date of this User.  # noqa: E501

        Registration date of a user  # noqa: E501

        :return: The registry_date of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._registry_date

    @registry_date.setter
    def registry_date(self, registry_date):
        """Sets the registry_date of this User.

        Registration date of a user  # noqa: E501

        :param registry_date: The registry_date of this User.  # noqa: E501
        :type: datetime
        """

        self._registry_date = registry_date

    @property
    def skills(self):
        """Gets the skills of this User.  # noqa: E501

        Skills of a user  # noqa: E501

        :return: The skills of this User.  # noqa: E501
        :rtype: str
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this User.

        Skills of a user  # noqa: E501

        :param skills: The skills of this User.  # noqa: E501
        :type: str
        """

        self._skills = skills

    @property
    def state(self):
        """Gets the state of this User.  # noqa: E501

        State / providence of a user  # noqa: E501

        :return: The state of this User.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this User.

        State / providence of a user  # noqa: E501

        :param state: The state of this User.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501

        Status of a user  # noqa: E501

        :return: The status of this User.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        Status of a user  # noqa: E501

        :param status: The status of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVATED", "DISABLED", "INACTIVATION"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this User.  # noqa: E501

        Time zone of a user  # noqa: E501

        :return: The time_zone of this User.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this User.

        Time zone of a user  # noqa: E501

        :param time_zone: The time_zone of this User.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def title(self):
        """Gets the title of this User.  # noqa: E501

        Title of a user  # noqa: E501

        :return: The title of this User.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this User.

        Title of a user  # noqa: E501

        :param title: The title of this User.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def zip(self):
        """Gets the zip of this User.  # noqa: E501

        Zip of a user  # noqa: E501

        :return: The zip of this User.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this User.

        Zip of a user  # noqa: E501

        :param zip: The zip of this User.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
