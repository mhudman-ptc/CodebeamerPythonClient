# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItemReviewVoteExport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decision': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'reviewed_at': 'datetime',
        'role_name': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'decision': 'decision',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'reviewed_at': 'reviewedAt',
        'role_name': 'roleName',
        'user_name': 'userName'
    }

    def __init__(self, decision=None, first_name=None, last_name=None, reviewed_at=None, role_name=None, user_name=None):  # noqa: E501
        """TrackerItemReviewVoteExport - a model defined in Swagger"""  # noqa: E501
        self._decision = None
        self._first_name = None
        self._last_name = None
        self._reviewed_at = None
        self._role_name = None
        self._user_name = None
        self.discriminator = None
        if decision is not None:
            self.decision = decision
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if reviewed_at is not None:
            self.reviewed_at = reviewed_at
        if role_name is not None:
            self.role_name = role_name
        if user_name is not None:
            self.user_name = user_name

    @property
    def decision(self):
        """Gets the decision of this TrackerItemReviewVoteExport.  # noqa: E501

        What the reviewer voted for  # noqa: E501

        :return: The decision of this TrackerItemReviewVoteExport.  # noqa: E501
        :rtype: str
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this TrackerItemReviewVoteExport.

        What the reviewer voted for  # noqa: E501

        :param decision: The decision of this TrackerItemReviewVoteExport.  # noqa: E501
        :type: str
        """

        self._decision = decision

    @property
    def first_name(self):
        """Gets the first_name of this TrackerItemReviewVoteExport.  # noqa: E501

        First name of the reviewer  # noqa: E501

        :return: The first_name of this TrackerItemReviewVoteExport.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this TrackerItemReviewVoteExport.

        First name of the reviewer  # noqa: E501

        :param first_name: The first_name of this TrackerItemReviewVoteExport.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this TrackerItemReviewVoteExport.  # noqa: E501

        Last name of the reviewer  # noqa: E501

        :return: The last_name of this TrackerItemReviewVoteExport.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this TrackerItemReviewVoteExport.

        Last name of the reviewer  # noqa: E501

        :param last_name: The last_name of this TrackerItemReviewVoteExport.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def reviewed_at(self):
        """Gets the reviewed_at of this TrackerItemReviewVoteExport.  # noqa: E501

        Time at when the review was performed  # noqa: E501

        :return: The reviewed_at of this TrackerItemReviewVoteExport.  # noqa: E501
        :rtype: datetime
        """
        return self._reviewed_at

    @reviewed_at.setter
    def reviewed_at(self, reviewed_at):
        """Sets the reviewed_at of this TrackerItemReviewVoteExport.

        Time at when the review was performed  # noqa: E501

        :param reviewed_at: The reviewed_at of this TrackerItemReviewVoteExport.  # noqa: E501
        :type: datetime
        """

        self._reviewed_at = reviewed_at

    @property
    def role_name(self):
        """Gets the role_name of this TrackerItemReviewVoteExport.  # noqa: E501

        Name of the role which the reviewer chose to use to vote  # noqa: E501

        :return: The role_name of this TrackerItemReviewVoteExport.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this TrackerItemReviewVoteExport.

        Name of the role which the reviewer chose to use to vote  # noqa: E501

        :param role_name: The role_name of this TrackerItemReviewVoteExport.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def user_name(self):
        """Gets the user_name of this TrackerItemReviewVoteExport.  # noqa: E501

        Username of the user who voted  # noqa: E501

        :return: The user_name of this TrackerItemReviewVoteExport.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this TrackerItemReviewVoteExport.

        Username of the user who voted  # noqa: E501

        :param user_name: The user_name of this TrackerItemReviewVoteExport.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemReviewVoteExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemReviewVoteExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
