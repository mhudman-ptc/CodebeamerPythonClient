# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeploymentTrackerExportSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'items_included': 'bool',
        'tracker_id': 'int'
    }

    attribute_map = {
        'items_included': 'itemsIncluded',
        'tracker_id': 'trackerId'
    }

    def __init__(self, items_included=None, tracker_id=None):  # noqa: E501
        """DeploymentTrackerExportSettings - a model defined in Swagger"""  # noqa: E501
        self._items_included = None
        self._tracker_id = None
        self.discriminator = None
        if items_included is not None:
            self.items_included = items_included
        self.tracker_id = tracker_id

    @property
    def items_included(self):
        """Gets the items_included of this DeploymentTrackerExportSettings.  # noqa: E501

        Flag if tracker items are included.  # noqa: E501

        :return: The items_included of this DeploymentTrackerExportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._items_included

    @items_included.setter
    def items_included(self, items_included):
        """Sets the items_included of this DeploymentTrackerExportSettings.

        Flag if tracker items are included.  # noqa: E501

        :param items_included: The items_included of this DeploymentTrackerExportSettings.  # noqa: E501
        :type: bool
        """

        self._items_included = items_included

    @property
    def tracker_id(self):
        """Gets the tracker_id of this DeploymentTrackerExportSettings.  # noqa: E501

        Project id  # noqa: E501

        :return: The tracker_id of this DeploymentTrackerExportSettings.  # noqa: E501
        :rtype: int
        """
        return self._tracker_id

    @tracker_id.setter
    def tracker_id(self, tracker_id):
        """Sets the tracker_id of this DeploymentTrackerExportSettings.

        Project id  # noqa: E501

        :param tracker_id: The tracker_id of this DeploymentTrackerExportSettings.  # noqa: E501
        :type: int
        """
        if tracker_id is None:
            raise ValueError("Invalid value for `tracker_id`, must not be `None`")  # noqa: E501

        self._tracker_id = tracker_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentTrackerExportSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentTrackerExportSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
