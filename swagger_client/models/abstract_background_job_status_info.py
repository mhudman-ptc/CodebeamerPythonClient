# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbstractBackgroundJobStatusInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'progress_percentage': 'int',
        'step_in_progress': 'str',
        'type': 'str'
    }

    attribute_map = {
        'progress_percentage': 'progressPercentage',
        'step_in_progress': 'stepInProgress',
        'type': 'type'
    }

    discriminator_value_class_map = {
          'DefaultBackgroundJobStatusInfo': 'DefaultBackgroundJobStatusInfo',
'DependencyFinderJobStatusInfo': 'DependencyFinderJobStatusInfo'    }

    def __init__(self, progress_percentage=None, step_in_progress=None, type=None):  # noqa: E501
        """AbstractBackgroundJobStatusInfo - a model defined in Swagger"""  # noqa: E501
        self._progress_percentage = None
        self._step_in_progress = None
        self._type = None
        self.discriminator = 'type'
        if progress_percentage is not None:
            self.progress_percentage = progress_percentage
        if step_in_progress is not None:
            self.step_in_progress = step_in_progress
        if type is not None:
            self.type = type

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this AbstractBackgroundJobStatusInfo.  # noqa: E501

        Progress in percentage (calculated based on pre-set weights)  # noqa: E501

        :return: The progress_percentage of this AbstractBackgroundJobStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this AbstractBackgroundJobStatusInfo.

        Progress in percentage (calculated based on pre-set weights)  # noqa: E501

        :param progress_percentage: The progress_percentage of this AbstractBackgroundJobStatusInfo.  # noqa: E501
        :type: int
        """

        self._progress_percentage = progress_percentage

    @property
    def step_in_progress(self):
        """Gets the step_in_progress of this AbstractBackgroundJobStatusInfo.  # noqa: E501

        Step currently in progress  # noqa: E501

        :return: The step_in_progress of this AbstractBackgroundJobStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._step_in_progress

    @step_in_progress.setter
    def step_in_progress(self, step_in_progress):
        """Sets the step_in_progress of this AbstractBackgroundJobStatusInfo.

        Step currently in progress  # noqa: E501

        :param step_in_progress: The step_in_progress of this AbstractBackgroundJobStatusInfo.  # noqa: E501
        :type: str
        """

        self._step_in_progress = step_in_progress

    @property
    def type(self):
        """Gets the type of this AbstractBackgroundJobStatusInfo.  # noqa: E501

        Type of status info object  # noqa: E501

        :return: The type of this AbstractBackgroundJobStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbstractBackgroundJobStatusInfo.

        Type of status info object  # noqa: E501

        :param type: The type of this AbstractBackgroundJobStatusInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbstractBackgroundJobStatusInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractBackgroundJobStatusInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
