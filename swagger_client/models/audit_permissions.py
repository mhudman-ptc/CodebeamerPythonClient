# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifact': 'str',
        'created_at': 'datetime',
        'event_type': 'str',
        'message': 'AuditPermissionMessage',
        'project': 'str',
        'tracker': 'str',
        'user': 'str',
        'user_status': 'str'
    }

    attribute_map = {
        'artifact': 'artifact',
        'created_at': 'createdAt',
        'event_type': 'eventType',
        'message': 'message',
        'project': 'project',
        'tracker': 'tracker',
        'user': 'user',
        'user_status': 'userStatus'
    }

    def __init__(self, artifact=None, created_at=None, event_type=None, message=None, project=None, tracker=None, user=None, user_status=None):  # noqa: E501
        """AuditPermissions - a model defined in Swagger"""  # noqa: E501
        self._artifact = None
        self._created_at = None
        self._event_type = None
        self._message = None
        self._project = None
        self._tracker = None
        self._user = None
        self._user_status = None
        self.discriminator = None
        if artifact is not None:
            self.artifact = artifact
        if created_at is not None:
            self.created_at = created_at
        if event_type is not None:
            self.event_type = event_type
        if message is not None:
            self.message = message
        if project is not None:
            self.project = project
        if tracker is not None:
            self.tracker = tracker
        if user is not None:
            self.user = user
        if user_status is not None:
            self.user_status = user_status

    @property
    def artifact(self):
        """Gets the artifact of this AuditPermissions.  # noqa: E501

        Artifact or target user name  # noqa: E501

        :return: The artifact of this AuditPermissions.  # noqa: E501
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this AuditPermissions.

        Artifact or target user name  # noqa: E501

        :param artifact: The artifact of this AuditPermissions.  # noqa: E501
        :type: str
        """

        self._artifact = artifact

    @property
    def created_at(self):
        """Gets the created_at of this AuditPermissions.  # noqa: E501

        Created at date  # noqa: E501

        :return: The created_at of this AuditPermissions.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuditPermissions.

        Created at date  # noqa: E501

        :param created_at: The created_at of this AuditPermissions.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def event_type(self):
        """Gets the event_type of this AuditPermissions.  # noqa: E501

        Event type  # noqa: E501

        :return: The event_type of this AuditPermissions.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AuditPermissions.

        Event type  # noqa: E501

        :param event_type: The event_type of this AuditPermissions.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def message(self):
        """Gets the message of this AuditPermissions.  # noqa: E501


        :return: The message of this AuditPermissions.  # noqa: E501
        :rtype: AuditPermissionMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditPermissions.


        :param message: The message of this AuditPermissions.  # noqa: E501
        :type: AuditPermissionMessage
        """

        self._message = message

    @property
    def project(self):
        """Gets the project of this AuditPermissions.  # noqa: E501

        Project name  # noqa: E501

        :return: The project of this AuditPermissions.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AuditPermissions.

        Project name  # noqa: E501

        :param project: The project of this AuditPermissions.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def tracker(self):
        """Gets the tracker of this AuditPermissions.  # noqa: E501

        Tracker name  # noqa: E501

        :return: The tracker of this AuditPermissions.  # noqa: E501
        :rtype: str
        """
        return self._tracker

    @tracker.setter
    def tracker(self, tracker):
        """Sets the tracker of this AuditPermissions.

        Tracker name  # noqa: E501

        :param tracker: The tracker of this AuditPermissions.  # noqa: E501
        :type: str
        """

        self._tracker = tracker

    @property
    def user(self):
        """Gets the user of this AuditPermissions.  # noqa: E501

        User name  # noqa: E501

        :return: The user of this AuditPermissions.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuditPermissions.

        User name  # noqa: E501

        :param user: The user of this AuditPermissions.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def user_status(self):
        """Gets the user_status of this AuditPermissions.  # noqa: E501

        User activation status  # noqa: E501

        :return: The user_status of this AuditPermissions.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this AuditPermissions.

        User activation status  # noqa: E501

        :param user_status: The user_status of this AuditPermissions.  # noqa: E501
        :type: str
        """

        self._user_status = user_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditPermissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
