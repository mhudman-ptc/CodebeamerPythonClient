# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItemHistoryRevision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'changes': 'list[AbstractTrackerItemChange]',
        'item_revision': 'TrackerItemRevision',
        'modified_at': 'datetime',
        'modified_by': 'UserReference'
    }

    attribute_map = {
        'changes': 'changes',
        'item_revision': 'itemRevision',
        'modified_at': 'modifiedAt',
        'modified_by': 'modifiedBy'
    }

    def __init__(self, changes=None, item_revision=None, modified_at=None, modified_by=None):  # noqa: E501
        """TrackerItemHistoryRevision - a model defined in Swagger"""  # noqa: E501
        self._changes = None
        self._item_revision = None
        self._modified_at = None
        self._modified_by = None
        self.discriminator = None
        if changes is not None:
            self.changes = changes
        if item_revision is not None:
            self.item_revision = item_revision
        if modified_at is not None:
            self.modified_at = modified_at
        if modified_by is not None:
            self.modified_by = modified_by

    @property
    def changes(self):
        """Gets the changes of this TrackerItemHistoryRevision.  # noqa: E501

        Changes happened between the previous and current revision.  # noqa: E501

        :return: The changes of this TrackerItemHistoryRevision.  # noqa: E501
        :rtype: list[AbstractTrackerItemChange]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this TrackerItemHistoryRevision.

        Changes happened between the previous and current revision.  # noqa: E501

        :param changes: The changes of this TrackerItemHistoryRevision.  # noqa: E501
        :type: list[AbstractTrackerItemChange]
        """

        self._changes = changes

    @property
    def item_revision(self):
        """Gets the item_revision of this TrackerItemHistoryRevision.  # noqa: E501


        :return: The item_revision of this TrackerItemHistoryRevision.  # noqa: E501
        :rtype: TrackerItemRevision
        """
        return self._item_revision

    @item_revision.setter
    def item_revision(self, item_revision):
        """Sets the item_revision of this TrackerItemHistoryRevision.


        :param item_revision: The item_revision of this TrackerItemHistoryRevision.  # noqa: E501
        :type: TrackerItemRevision
        """

        self._item_revision = item_revision

    @property
    def modified_at(self):
        """Gets the modified_at of this TrackerItemHistoryRevision.  # noqa: E501

        The date when the entity was modified  # noqa: E501

        :return: The modified_at of this TrackerItemHistoryRevision.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this TrackerItemHistoryRevision.

        The date when the entity was modified  # noqa: E501

        :param modified_at: The modified_at of this TrackerItemHistoryRevision.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this TrackerItemHistoryRevision.  # noqa: E501


        :return: The modified_by of this TrackerItemHistoryRevision.  # noqa: E501
        :rtype: UserReference
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this TrackerItemHistoryRevision.


        :param modified_by: The modified_by of this TrackerItemHistoryRevision.  # noqa: E501
        :type: UserReference
        """

        self._modified_by = modified_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemHistoryRevision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemHistoryRevision):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
