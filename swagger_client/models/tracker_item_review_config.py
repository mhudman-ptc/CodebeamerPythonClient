# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItemReviewConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'required_approvals': 'int',
        'required_rejections': 'int',
        'required_signature': 'str',
        'role_required': 'bool'
    }

    attribute_map = {
        'required_approvals': 'requiredApprovals',
        'required_rejections': 'requiredRejections',
        'required_signature': 'requiredSignature',
        'role_required': 'roleRequired'
    }

    def __init__(self, required_approvals=None, required_rejections=None, required_signature=None, role_required=None):  # noqa: E501
        """TrackerItemReviewConfig - a model defined in Swagger"""  # noqa: E501
        self._required_approvals = None
        self._required_rejections = None
        self._required_signature = None
        self._role_required = None
        self.discriminator = None
        if required_approvals is not None:
            self.required_approvals = required_approvals
        if required_rejections is not None:
            self.required_rejections = required_rejections
        if required_signature is not None:
            self.required_signature = required_signature
        if role_required is not None:
            self.role_required = role_required

    @property
    def required_approvals(self):
        """Gets the required_approvals of this TrackerItemReviewConfig.  # noqa: E501

        Number of approvals after which the review is considered approved  # noqa: E501

        :return: The required_approvals of this TrackerItemReviewConfig.  # noqa: E501
        :rtype: int
        """
        return self._required_approvals

    @required_approvals.setter
    def required_approvals(self, required_approvals):
        """Sets the required_approvals of this TrackerItemReviewConfig.

        Number of approvals after which the review is considered approved  # noqa: E501

        :param required_approvals: The required_approvals of this TrackerItemReviewConfig.  # noqa: E501
        :type: int
        """

        self._required_approvals = required_approvals

    @property
    def required_rejections(self):
        """Gets the required_rejections of this TrackerItemReviewConfig.  # noqa: E501

        Number of rejections after which the review is considered rejected  # noqa: E501

        :return: The required_rejections of this TrackerItemReviewConfig.  # noqa: E501
        :rtype: int
        """
        return self._required_rejections

    @required_rejections.setter
    def required_rejections(self, required_rejections):
        """Sets the required_rejections of this TrackerItemReviewConfig.

        Number of rejections after which the review is considered rejected  # noqa: E501

        :param required_rejections: The required_rejections of this TrackerItemReviewConfig.  # noqa: E501
        :type: int
        """

        self._required_rejections = required_rejections

    @property
    def required_signature(self):
        """Gets the required_signature of this TrackerItemReviewConfig.  # noqa: E501

        Whether the user has to provide its credentials to vote  # noqa: E501

        :return: The required_signature of this TrackerItemReviewConfig.  # noqa: E501
        :rtype: str
        """
        return self._required_signature

    @required_signature.setter
    def required_signature(self, required_signature):
        """Sets the required_signature of this TrackerItemReviewConfig.

        Whether the user has to provide its credentials to vote  # noqa: E501

        :param required_signature: The required_signature of this TrackerItemReviewConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "PASSWORD", "USERNAME_AND_PASSWORD"]  # noqa: E501
        if required_signature not in allowed_values:
            raise ValueError(
                "Invalid value for `required_signature` ({0}), must be one of {1}"  # noqa: E501
                .format(required_signature, allowed_values)
            )

        self._required_signature = required_signature

    @property
    def role_required(self):
        """Gets the role_required of this TrackerItemReviewConfig.  # noqa: E501

        Whether the reviewers have to chose in which of their roles do they want to vote  # noqa: E501

        :return: The role_required of this TrackerItemReviewConfig.  # noqa: E501
        :rtype: bool
        """
        return self._role_required

    @role_required.setter
    def role_required(self, role_required):
        """Sets the role_required of this TrackerItemReviewConfig.

        Whether the reviewers have to chose in which of their roles do they want to vote  # noqa: E501

        :param role_required: The role_required of this TrackerItemReviewConfig.  # noqa: E501
        :type: bool
        """

        self._role_required = role_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemReviewConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemReviewConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
