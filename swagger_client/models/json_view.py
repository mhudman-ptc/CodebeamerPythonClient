# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JsonView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_type': 'str',
        'json': 'str',
        'json_object': 'JsonView'
    }

    attribute_map = {
        'content_type': 'contentType',
        'json': 'json',
        'json_object': 'jsonObject'
    }

    def __init__(self, content_type=None, json=None, json_object=None):  # noqa: E501
        """JsonView - a model defined in Swagger"""  # noqa: E501
        self._content_type = None
        self._json = None
        self._json_object = None
        self.discriminator = None
        if content_type is not None:
            self.content_type = content_type
        if json is not None:
            self.json = json
        if json_object is not None:
            self.json_object = json_object

    @property
    def content_type(self):
        """Gets the content_type of this JsonView.  # noqa: E501


        :return: The content_type of this JsonView.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this JsonView.


        :param content_type: The content_type of this JsonView.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def json(self):
        """Gets the json of this JsonView.  # noqa: E501


        :return: The json of this JsonView.  # noqa: E501
        :rtype: str
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this JsonView.


        :param json: The json of this JsonView.  # noqa: E501
        :type: str
        """

        self._json = json

    @property
    def json_object(self):
        """Gets the json_object of this JsonView.  # noqa: E501


        :return: The json_object of this JsonView.  # noqa: E501
        :rtype: JsonView
        """
        return self._json_object

    @json_object.setter
    def json_object(self, json_object):
        """Sets the json_object of this JsonView.


        :param json_object: The json_object of this JsonView.  # noqa: E501
        :type: JsonView
        """

        self._json_object = json_object

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JsonView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
