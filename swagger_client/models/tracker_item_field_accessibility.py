# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItemFieldAccessibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'editable': 'bool',
        'field': 'FieldReference',
        'mandatory': 'bool',
        'visible': 'bool'
    }

    attribute_map = {
        'editable': 'editable',
        'field': 'field',
        'mandatory': 'mandatory',
        'visible': 'visible'
    }

    def __init__(self, editable=None, field=None, mandatory=None, visible=None):  # noqa: E501
        """TrackerItemFieldAccessibility - a model defined in Swagger"""  # noqa: E501
        self._editable = None
        self._field = None
        self._mandatory = None
        self._visible = None
        self.discriminator = None
        if editable is not None:
            self.editable = editable
        if field is not None:
            self.field = field
        if mandatory is not None:
            self.mandatory = mandatory
        if visible is not None:
            self.visible = visible

    @property
    def editable(self):
        """Gets the editable of this TrackerItemFieldAccessibility.  # noqa: E501

        Field is editable  # noqa: E501

        :return: The editable of this TrackerItemFieldAccessibility.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this TrackerItemFieldAccessibility.

        Field is editable  # noqa: E501

        :param editable: The editable of this TrackerItemFieldAccessibility.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def field(self):
        """Gets the field of this TrackerItemFieldAccessibility.  # noqa: E501


        :return: The field of this TrackerItemFieldAccessibility.  # noqa: E501
        :rtype: FieldReference
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this TrackerItemFieldAccessibility.


        :param field: The field of this TrackerItemFieldAccessibility.  # noqa: E501
        :type: FieldReference
        """

        self._field = field

    @property
    def mandatory(self):
        """Gets the mandatory of this TrackerItemFieldAccessibility.  # noqa: E501

        Field is mandatory  # noqa: E501

        :return: The mandatory of this TrackerItemFieldAccessibility.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this TrackerItemFieldAccessibility.

        Field is mandatory  # noqa: E501

        :param mandatory: The mandatory of this TrackerItemFieldAccessibility.  # noqa: E501
        :type: bool
        """

        self._mandatory = mandatory

    @property
    def visible(self):
        """Gets the visible of this TrackerItemFieldAccessibility.  # noqa: E501

        Field is visible  # noqa: E501

        :return: The visible of this TrackerItemFieldAccessibility.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this TrackerItemFieldAccessibility.

        Field is visible  # noqa: E501

        :param visible: The visible of this TrackerItemFieldAccessibility.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemFieldAccessibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemFieldAccessibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
