# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalScmRepositoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token_id': 'int',
        'access_token_name': 'str',
        'access_token_value': 'str',
        'enable_patch_synchronization': 'bool',
        'name': 'str',
        'owner_name': 'str',
        'project_name': 'str',
        'remote_api_url': 'str',
        'repository_name': 'str',
        'scm_type': 'str',
        'secret_id': 'int'
    }

    attribute_map = {
        'access_token_id': 'accessTokenId',
        'access_token_name': 'accessTokenName',
        'access_token_value': 'accessTokenValue',
        'enable_patch_synchronization': 'enablePatchSynchronization',
        'name': 'name',
        'owner_name': 'ownerName',
        'project_name': 'projectName',
        'remote_api_url': 'remoteApiUrl',
        'repository_name': 'repositoryName',
        'scm_type': 'scmType',
        'secret_id': 'secretId'
    }

    def __init__(self, access_token_id=None, access_token_name=None, access_token_value=None, enable_patch_synchronization=None, name=None, owner_name=None, project_name=None, remote_api_url=None, repository_name=None, scm_type=None, secret_id=None):  # noqa: E501
        """ExternalScmRepositoryRequest - a model defined in Swagger"""  # noqa: E501
        self._access_token_id = None
        self._access_token_name = None
        self._access_token_value = None
        self._enable_patch_synchronization = None
        self._name = None
        self._owner_name = None
        self._project_name = None
        self._remote_api_url = None
        self._repository_name = None
        self._scm_type = None
        self._secret_id = None
        self.discriminator = None
        if access_token_id is not None:
            self.access_token_id = access_token_id
        if access_token_name is not None:
            self.access_token_name = access_token_name
        if access_token_value is not None:
            self.access_token_value = access_token_value
        self.enable_patch_synchronization = enable_patch_synchronization
        self.name = name
        self.owner_name = owner_name
        if project_name is not None:
            self.project_name = project_name
        self.remote_api_url = remote_api_url
        self.repository_name = repository_name
        self.scm_type = scm_type
        if secret_id is not None:
            self.secret_id = secret_id

    @property
    def access_token_id(self):
        """Gets the access_token_id of this ExternalScmRepositoryRequest.  # noqa: E501

        Id of already created token for external SCM provider API. Required in case when old access token should be used  # noqa: E501

        :return: The access_token_id of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._access_token_id

    @access_token_id.setter
    def access_token_id(self, access_token_id):
        """Sets the access_token_id of this ExternalScmRepositoryRequest.

        Id of already created token for external SCM provider API. Required in case when old access token should be used  # noqa: E501

        :param access_token_id: The access_token_id of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: int
        """

        self._access_token_id = access_token_id

    @property
    def access_token_name(self):
        """Gets the access_token_name of this ExternalScmRepositoryRequest.  # noqa: E501

        Name of new access token for external SCM provider API. Required in case when new access token item should be created  # noqa: E501

        :return: The access_token_name of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._access_token_name

    @access_token_name.setter
    def access_token_name(self, access_token_name):
        """Sets the access_token_name of this ExternalScmRepositoryRequest.

        Name of new access token for external SCM provider API. Required in case when new access token item should be created  # noqa: E501

        :param access_token_name: The access_token_name of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: str
        """

        self._access_token_name = access_token_name

    @property
    def access_token_value(self):
        """Gets the access_token_value of this ExternalScmRepositoryRequest.  # noqa: E501

        Value of new access token for external SCM provider API. Required in case when new access token item should be created  # noqa: E501

        :return: The access_token_value of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._access_token_value

    @access_token_value.setter
    def access_token_value(self, access_token_value):
        """Sets the access_token_value of this ExternalScmRepositoryRequest.

        Value of new access token for external SCM provider API. Required in case when new access token item should be created  # noqa: E501

        :param access_token_value: The access_token_value of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: str
        """

        self._access_token_value = access_token_value

    @property
    def enable_patch_synchronization(self):
        """Gets the enable_patch_synchronization of this ExternalScmRepositoryRequest.  # noqa: E501

        Enable or disable patch synchronization  # noqa: E501

        :return: The enable_patch_synchronization of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_patch_synchronization

    @enable_patch_synchronization.setter
    def enable_patch_synchronization(self, enable_patch_synchronization):
        """Sets the enable_patch_synchronization of this ExternalScmRepositoryRequest.

        Enable or disable patch synchronization  # noqa: E501

        :param enable_patch_synchronization: The enable_patch_synchronization of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: bool
        """
        if enable_patch_synchronization is None:
            raise ValueError("Invalid value for `enable_patch_synchronization`, must not be `None`")  # noqa: E501

        self._enable_patch_synchronization = enable_patch_synchronization

    @property
    def name(self):
        """Gets the name of this ExternalScmRepositoryRequest.  # noqa: E501

        Name of new CB external SCM repository  # noqa: E501

        :return: The name of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExternalScmRepositoryRequest.

        Name of new CB external SCM repository  # noqa: E501

        :param name: The name of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner_name(self):
        """Gets the owner_name of this ExternalScmRepositoryRequest.  # noqa: E501

        Owner name or organization name of external SCM provider repository  # noqa: E501

        :return: The owner_name of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this ExternalScmRepositoryRequest.

        Owner name or organization name of external SCM provider repository  # noqa: E501

        :param owner_name: The owner_name of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: str
        """
        if owner_name is None:
            raise ValueError("Invalid value for `owner_name`, must not be `None`")  # noqa: E501

        self._owner_name = owner_name

    @property
    def project_name(self):
        """Gets the project_name of this ExternalScmRepositoryRequest.  # noqa: E501

        Project name of external SCM provider repository  # noqa: E501

        :return: The project_name of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ExternalScmRepositoryRequest.

        Project name of external SCM provider repository  # noqa: E501

        :param project_name: The project_name of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def remote_api_url(self):
        """Gets the remote_api_url of this ExternalScmRepositoryRequest.  # noqa: E501

        Base API URL of external SCM provider  # noqa: E501

        :return: The remote_api_url of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._remote_api_url

    @remote_api_url.setter
    def remote_api_url(self, remote_api_url):
        """Sets the remote_api_url of this ExternalScmRepositoryRequest.

        Base API URL of external SCM provider  # noqa: E501

        :param remote_api_url: The remote_api_url of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: str
        """
        if remote_api_url is None:
            raise ValueError("Invalid value for `remote_api_url`, must not be `None`")  # noqa: E501

        self._remote_api_url = remote_api_url

    @property
    def repository_name(self):
        """Gets the repository_name of this ExternalScmRepositoryRequest.  # noqa: E501

        Repository name on external SCM provider's side  # noqa: E501

        :return: The repository_name of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this ExternalScmRepositoryRequest.

        Repository name on external SCM provider's side  # noqa: E501

        :param repository_name: The repository_name of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")  # noqa: E501

        self._repository_name = repository_name

    @property
    def scm_type(self):
        """Gets the scm_type of this ExternalScmRepositoryRequest.  # noqa: E501

        External SCM provider  # noqa: E501

        :return: The scm_type of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._scm_type

    @scm_type.setter
    def scm_type(self, scm_type):
        """Sets the scm_type of this ExternalScmRepositoryRequest.

        External SCM provider  # noqa: E501

        :param scm_type: The scm_type of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: str
        """
        if scm_type is None:
            raise ValueError("Invalid value for `scm_type`, must not be `None`")  # noqa: E501

        self._scm_type = scm_type

    @property
    def secret_id(self):
        """Gets the secret_id of this ExternalScmRepositoryRequest.  # noqa: E501

        Id of already created Secret for external SCM provider API  # noqa: E501

        :return: The secret_id of this ExternalScmRepositoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this ExternalScmRepositoryRequest.

        Id of already created Secret for external SCM provider API  # noqa: E501

        :param secret_id: The secret_id of this ExternalScmRepositoryRequest.  # noqa: E501
        :type: int
        """

        self._secret_id = secret_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalScmRepositoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalScmRepositoryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
