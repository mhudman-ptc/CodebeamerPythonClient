# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TraceabilityInitialLevelFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cb_ql': 'str',
        'history_baseline_id': 'int',
        'history_date': 'datetime',
        'show_ancestor_items': 'bool',
        'show_descendant_items': 'bool'
    }

    attribute_map = {
        'cb_ql': 'cbQL',
        'history_baseline_id': 'historyBaselineId',
        'history_date': 'historyDate',
        'show_ancestor_items': 'showAncestorItems',
        'show_descendant_items': 'showDescendantItems'
    }

    def __init__(self, cb_ql=None, history_baseline_id=None, history_date=None, show_ancestor_items=False, show_descendant_items=False):  # noqa: E501
        """TraceabilityInitialLevelFilter - a model defined in Swagger"""  # noqa: E501
        self._cb_ql = None
        self._history_baseline_id = None
        self._history_date = None
        self._show_ancestor_items = None
        self._show_descendant_items = None
        self.discriminator = None
        self.cb_ql = cb_ql
        if history_baseline_id is not None:
            self.history_baseline_id = history_baseline_id
        if history_date is not None:
            self.history_date = history_date
        if show_ancestor_items is not None:
            self.show_ancestor_items = show_ancestor_items
        if show_descendant_items is not None:
            self.show_descendant_items = show_descendant_items

    @property
    def cb_ql(self):
        """Gets the cb_ql of this TraceabilityInitialLevelFilter.  # noqa: E501

        cbQL  # noqa: E501

        :return: The cb_ql of this TraceabilityInitialLevelFilter.  # noqa: E501
        :rtype: str
        """
        return self._cb_ql

    @cb_ql.setter
    def cb_ql(self, cb_ql):
        """Sets the cb_ql of this TraceabilityInitialLevelFilter.

        cbQL  # noqa: E501

        :param cb_ql: The cb_ql of this TraceabilityInitialLevelFilter.  # noqa: E501
        :type: str
        """
        if cb_ql is None:
            raise ValueError("Invalid value for `cb_ql`, must not be `None`")  # noqa: E501

        self._cb_ql = cb_ql

    @property
    def history_baseline_id(self):
        """Gets the history_baseline_id of this TraceabilityInitialLevelFilter.  # noqa: E501

        Snapshot view of given baseline  # noqa: E501

        :return: The history_baseline_id of this TraceabilityInitialLevelFilter.  # noqa: E501
        :rtype: int
        """
        return self._history_baseline_id

    @history_baseline_id.setter
    def history_baseline_id(self, history_baseline_id):
        """Sets the history_baseline_id of this TraceabilityInitialLevelFilter.

        Snapshot view of given baseline  # noqa: E501

        :param history_baseline_id: The history_baseline_id of this TraceabilityInitialLevelFilter.  # noqa: E501
        :type: int
        """

        self._history_baseline_id = history_baseline_id

    @property
    def history_date(self):
        """Gets the history_date of this TraceabilityInitialLevelFilter.  # noqa: E501

        Snapshot view of given date  # noqa: E501

        :return: The history_date of this TraceabilityInitialLevelFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._history_date

    @history_date.setter
    def history_date(self, history_date):
        """Sets the history_date of this TraceabilityInitialLevelFilter.

        Snapshot view of given date  # noqa: E501

        :param history_date: The history_date of this TraceabilityInitialLevelFilter.  # noqa: E501
        :type: datetime
        """

        self._history_date = history_date

    @property
    def show_ancestor_items(self):
        """Gets the show_ancestor_items of this TraceabilityInitialLevelFilter.  # noqa: E501

        Show ancestor items  # noqa: E501

        :return: The show_ancestor_items of this TraceabilityInitialLevelFilter.  # noqa: E501
        :rtype: bool
        """
        return self._show_ancestor_items

    @show_ancestor_items.setter
    def show_ancestor_items(self, show_ancestor_items):
        """Sets the show_ancestor_items of this TraceabilityInitialLevelFilter.

        Show ancestor items  # noqa: E501

        :param show_ancestor_items: The show_ancestor_items of this TraceabilityInitialLevelFilter.  # noqa: E501
        :type: bool
        """

        self._show_ancestor_items = show_ancestor_items

    @property
    def show_descendant_items(self):
        """Gets the show_descendant_items of this TraceabilityInitialLevelFilter.  # noqa: E501

        Show descendant items  # noqa: E501

        :return: The show_descendant_items of this TraceabilityInitialLevelFilter.  # noqa: E501
        :rtype: bool
        """
        return self._show_descendant_items

    @show_descendant_items.setter
    def show_descendant_items(self, show_descendant_items):
        """Sets the show_descendant_items of this TraceabilityInitialLevelFilter.

        Show descendant items  # noqa: E501

        :param show_descendant_items: The show_descendant_items of this TraceabilityInitialLevelFilter.  # noqa: E501
        :type: bool
        """

        self._show_descendant_items = show_descendant_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceabilityInitialLevelFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceabilityInitialLevelFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
