# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.report_row import ReportRow  # noqa: F401,E501

class ReportReferencedRow(ReportRow):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cells': 'list[ReportCell]',
        'is_real_result': 'bool',
        'item_ref': 'ReportItemReference',
        'outline_level': 'int',
        'references': 'ReportReferenceLevel'
    }
    if hasattr(ReportRow, "swagger_types"):
        swagger_types.update(ReportRow.swagger_types)

    attribute_map = {
        'cells': 'cells',
        'is_real_result': 'isRealResult',
        'item_ref': 'itemRef',
        'outline_level': 'outlineLevel',
        'references': 'references'
    }
    if hasattr(ReportRow, "attribute_map"):
        attribute_map.update(ReportRow.attribute_map)

    def __init__(self, cells=None, is_real_result=None, item_ref=None, outline_level=None, references=None, *args, **kwargs):  # noqa: E501
        """ReportReferencedRow - a model defined in Swagger"""  # noqa: E501
        self._cells = None
        self._is_real_result = None
        self._item_ref = None
        self._outline_level = None
        self._references = None
        self.discriminator = None
        if cells is not None:
            self.cells = cells
        if is_real_result is not None:
            self.is_real_result = is_real_result
        if item_ref is not None:
            self.item_ref = item_ref
        if outline_level is not None:
            self.outline_level = outline_level
        if references is not None:
            self.references = references
        ReportRow.__init__(self, *args, **kwargs)

    @property
    def cells(self):
        """Gets the cells of this ReportReferencedRow.  # noqa: E501

        Cells in a row.  # noqa: E501

        :return: The cells of this ReportReferencedRow.  # noqa: E501
        :rtype: list[ReportCell]
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this ReportReferencedRow.

        Cells in a row.  # noqa: E501

        :param cells: The cells of this ReportReferencedRow.  # noqa: E501
        :type: list[ReportCell]
        """

        self._cells = cells

    @property
    def is_real_result(self):
        """Gets the is_real_result of this ReportReferencedRow.  # noqa: E501

        Indicator if the item is a real query result (e.g. not an ancestor item).  # noqa: E501

        :return: The is_real_result of this ReportReferencedRow.  # noqa: E501
        :rtype: bool
        """
        return self._is_real_result

    @is_real_result.setter
    def is_real_result(self, is_real_result):
        """Sets the is_real_result of this ReportReferencedRow.

        Indicator if the item is a real query result (e.g. not an ancestor item).  # noqa: E501

        :param is_real_result: The is_real_result of this ReportReferencedRow.  # noqa: E501
        :type: bool
        """

        self._is_real_result = is_real_result

    @property
    def item_ref(self):
        """Gets the item_ref of this ReportReferencedRow.  # noqa: E501


        :return: The item_ref of this ReportReferencedRow.  # noqa: E501
        :rtype: ReportItemReference
        """
        return self._item_ref

    @item_ref.setter
    def item_ref(self, item_ref):
        """Sets the item_ref of this ReportReferencedRow.


        :param item_ref: The item_ref of this ReportReferencedRow.  # noqa: E501
        :type: ReportItemReference
        """

        self._item_ref = item_ref

    @property
    def outline_level(self):
        """Gets the outline_level of this ReportReferencedRow.  # noqa: E501

        Item's level in the tracker outline.  # noqa: E501

        :return: The outline_level of this ReportReferencedRow.  # noqa: E501
        :rtype: int
        """
        return self._outline_level

    @outline_level.setter
    def outline_level(self, outline_level):
        """Sets the outline_level of this ReportReferencedRow.

        Item's level in the tracker outline.  # noqa: E501

        :param outline_level: The outline_level of this ReportReferencedRow.  # noqa: E501
        :type: int
        """

        self._outline_level = outline_level

    @property
    def references(self):
        """Gets the references of this ReportReferencedRow.  # noqa: E501


        :return: The references of this ReportReferencedRow.  # noqa: E501
        :rtype: ReportReferenceLevel
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this ReportReferencedRow.


        :param references: The references of this ReportReferencedRow.  # noqa: E501
        :type: ReportReferenceLevel
        """

        self._references = references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportReferencedRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportReferencedRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
