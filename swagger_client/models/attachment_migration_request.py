# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentMigrationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'created_by': 'UserReference',
        'description': 'str',
        'description_format': 'str',
        'files': 'list[RemoteMigrationFile]',
        'migration_action': 'str',
        'modified_at': 'datetime',
        'modified_by': 'UserReference',
        'target_item': 'TrackerItemReference'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'description': 'description',
        'description_format': 'descriptionFormat',
        'files': 'files',
        'migration_action': 'migrationAction',
        'modified_at': 'modifiedAt',
        'modified_by': 'modifiedBy',
        'target_item': 'targetItem'
    }

    def __init__(self, created_at=None, created_by=None, description=None, description_format=None, files=None, migration_action=None, modified_at=None, modified_by=None, target_item=None):  # noqa: E501
        """AttachmentMigrationRequest - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._created_by = None
        self._description = None
        self._description_format = None
        self._files = None
        self._migration_action = None
        self._modified_at = None
        self._modified_by = None
        self._target_item = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if description_format is not None:
            self.description_format = description_format
        if files is not None:
            self.files = files
        if migration_action is not None:
            self.migration_action = migration_action
        if modified_at is not None:
            self.modified_at = modified_at
        if modified_by is not None:
            self.modified_by = modified_by
        if target_item is not None:
            self.target_item = target_item

    @property
    def created_at(self):
        """Gets the created_at of this AttachmentMigrationRequest.  # noqa: E501

        The date when the entity was created  # noqa: E501

        :return: The created_at of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AttachmentMigrationRequest.

        The date when the entity was created  # noqa: E501

        :param created_at: The created_at of this AttachmentMigrationRequest.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this AttachmentMigrationRequest.  # noqa: E501


        :return: The created_by of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AttachmentMigrationRequest.


        :param created_by: The created_by of this AttachmentMigrationRequest.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this AttachmentMigrationRequest.  # noqa: E501

        Description of the entity  # noqa: E501

        :return: The description of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttachmentMigrationRequest.

        Description of the entity  # noqa: E501

        :param description: The description of this AttachmentMigrationRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_format(self):
        """Gets the description_format of this AttachmentMigrationRequest.  # noqa: E501

        Description format of the entity  # noqa: E501

        :return: The description_format of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description_format

    @description_format.setter
    def description_format(self, description_format):
        """Sets the description_format of this AttachmentMigrationRequest.

        Description format of the entity  # noqa: E501

        :param description_format: The description_format of this AttachmentMigrationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PlainText", "Html", "Wiki"]  # noqa: E501
        if description_format not in allowed_values:
            raise ValueError(
                "Invalid value for `description_format` ({0}), must be one of {1}"  # noqa: E501
                .format(description_format, allowed_values)
            )

        self._description_format = description_format

    @property
    def files(self):
        """Gets the files of this AttachmentMigrationRequest.  # noqa: E501

        List of files to migrate  # noqa: E501

        :return: The files of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: list[RemoteMigrationFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this AttachmentMigrationRequest.

        List of files to migrate  # noqa: E501

        :param files: The files of this AttachmentMigrationRequest.  # noqa: E501
        :type: list[RemoteMigrationFile]
        """

        self._files = files

    @property
    def migration_action(self):
        """Gets the migration_action of this AttachmentMigrationRequest.  # noqa: E501

        Type of action made on the source files.  # noqa: E501

        :return: The migration_action of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._migration_action

    @migration_action.setter
    def migration_action(self, migration_action):
        """Sets the migration_action of this AttachmentMigrationRequest.

        Type of action made on the source files.  # noqa: E501

        :param migration_action: The migration_action of this AttachmentMigrationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["MOVE", "COPY"]  # noqa: E501
        if migration_action not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_action` ({0}), must be one of {1}"  # noqa: E501
                .format(migration_action, allowed_values)
            )

        self._migration_action = migration_action

    @property
    def modified_at(self):
        """Gets the modified_at of this AttachmentMigrationRequest.  # noqa: E501

        The date when the entity was modified  # noqa: E501

        :return: The modified_at of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this AttachmentMigrationRequest.

        The date when the entity was modified  # noqa: E501

        :param modified_at: The modified_at of this AttachmentMigrationRequest.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this AttachmentMigrationRequest.  # noqa: E501


        :return: The modified_by of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: UserReference
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this AttachmentMigrationRequest.


        :param modified_by: The modified_by of this AttachmentMigrationRequest.  # noqa: E501
        :type: UserReference
        """

        self._modified_by = modified_by

    @property
    def target_item(self):
        """Gets the target_item of this AttachmentMigrationRequest.  # noqa: E501


        :return: The target_item of this AttachmentMigrationRequest.  # noqa: E501
        :rtype: TrackerItemReference
        """
        return self._target_item

    @target_item.setter
    def target_item(self, target_item):
        """Sets the target_item of this AttachmentMigrationRequest.


        :param target_item: The target_item of this AttachmentMigrationRequest.  # noqa: E501
        :type: TrackerItemReference
        """

        self._target_item = target_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentMigrationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentMigrationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
