# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItemFieldMappingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lost_mapping': 'list[TrackerItemFieldMapping]',
        'mapping': 'list[TrackerItemFieldMappingPair]',
        'possible_mapping': 'list[TrackerItemFieldMappingPossiblePair]'
    }

    attribute_map = {
        'lost_mapping': 'lostMapping',
        'mapping': 'mapping',
        'possible_mapping': 'possibleMapping'
    }

    def __init__(self, lost_mapping=None, mapping=None, possible_mapping=None):  # noqa: E501
        """TrackerItemFieldMappingInfo - a model defined in Swagger"""  # noqa: E501
        self._lost_mapping = None
        self._mapping = None
        self._possible_mapping = None
        self.discriminator = None
        if lost_mapping is not None:
            self.lost_mapping = lost_mapping
        if mapping is not None:
            self.mapping = mapping
        if possible_mapping is not None:
            self.possible_mapping = possible_mapping

    @property
    def lost_mapping(self):
        """Gets the lost_mapping of this TrackerItemFieldMappingInfo.  # noqa: E501

        No mappable field exists, these fields will be lost  # noqa: E501

        :return: The lost_mapping of this TrackerItemFieldMappingInfo.  # noqa: E501
        :rtype: list[TrackerItemFieldMapping]
        """
        return self._lost_mapping

    @lost_mapping.setter
    def lost_mapping(self, lost_mapping):
        """Sets the lost_mapping of this TrackerItemFieldMappingInfo.

        No mappable field exists, these fields will be lost  # noqa: E501

        :param lost_mapping: The lost_mapping of this TrackerItemFieldMappingInfo.  # noqa: E501
        :type: list[TrackerItemFieldMapping]
        """

        self._lost_mapping = lost_mapping

    @property
    def mapping(self):
        """Gets the mapping of this TrackerItemFieldMappingInfo.  # noqa: E501

        Direct mappable fields  # noqa: E501

        :return: The mapping of this TrackerItemFieldMappingInfo.  # noqa: E501
        :rtype: list[TrackerItemFieldMappingPair]
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this TrackerItemFieldMappingInfo.

        Direct mappable fields  # noqa: E501

        :param mapping: The mapping of this TrackerItemFieldMappingInfo.  # noqa: E501
        :type: list[TrackerItemFieldMappingPair]
        """

        self._mapping = mapping

    @property
    def possible_mapping(self):
        """Gets the possible_mapping of this TrackerItemFieldMappingInfo.  # noqa: E501

        Not direct mappable fields, but possible mapping exist  # noqa: E501

        :return: The possible_mapping of this TrackerItemFieldMappingInfo.  # noqa: E501
        :rtype: list[TrackerItemFieldMappingPossiblePair]
        """
        return self._possible_mapping

    @possible_mapping.setter
    def possible_mapping(self, possible_mapping):
        """Sets the possible_mapping of this TrackerItemFieldMappingInfo.

        Not direct mappable fields, but possible mapping exist  # noqa: E501

        :param possible_mapping: The possible_mapping of this TrackerItemFieldMappingInfo.  # noqa: E501
        :type: list[TrackerItemFieldMappingPossiblePair]
        """

        self._possible_mapping = possible_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemFieldMappingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemFieldMappingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
