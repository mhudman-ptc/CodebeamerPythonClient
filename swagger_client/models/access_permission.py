# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessPermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_level': 'str',
        'field': 'FieldReference',
        'project': 'ProjectReference',
        'role': 'RoleReference'
    }

    attribute_map = {
        'access_level': 'accessLevel',
        'field': 'field',
        'project': 'project',
        'role': 'role'
    }

    def __init__(self, access_level=None, field=None, project=None, role=None):  # noqa: E501
        """AccessPermission - a model defined in Swagger"""  # noqa: E501
        self._access_level = None
        self._field = None
        self._project = None
        self._role = None
        self.discriminator = None
        if access_level is not None:
            self.access_level = access_level
        if field is not None:
            self.field = field
        if project is not None:
            self.project = project
        if role is not None:
            self.role = role

    @property
    def access_level(self):
        """Gets the access_level of this AccessPermission.  # noqa: E501

        Access level  # noqa: E501

        :return: The access_level of this AccessPermission.  # noqa: E501
        :rtype: str
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this AccessPermission.

        Access level  # noqa: E501

        :param access_level: The access_level of this AccessPermission.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "READ", "WRITE", "READ_WRITE"]  # noqa: E501
        if access_level not in allowed_values:
            raise ValueError(
                "Invalid value for `access_level` ({0}), must be one of {1}"  # noqa: E501
                .format(access_level, allowed_values)
            )

        self._access_level = access_level

    @property
    def field(self):
        """Gets the field of this AccessPermission.  # noqa: E501


        :return: The field of this AccessPermission.  # noqa: E501
        :rtype: FieldReference
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this AccessPermission.


        :param field: The field of this AccessPermission.  # noqa: E501
        :type: FieldReference
        """

        self._field = field

    @property
    def project(self):
        """Gets the project of this AccessPermission.  # noqa: E501


        :return: The project of this AccessPermission.  # noqa: E501
        :rtype: ProjectReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AccessPermission.


        :param project: The project of this AccessPermission.  # noqa: E501
        :type: ProjectReference
        """

        self._project = project

    @property
    def role(self):
        """Gets the role of this AccessPermission.  # noqa: E501


        :return: The role of this AccessPermission.  # noqa: E501
        :rtype: RoleReference
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AccessPermission.


        :param role: The role of this AccessPermission.  # noqa: E501
        :type: RoleReference
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessPermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
