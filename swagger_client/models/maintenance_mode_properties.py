# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaintenanceModeProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login_error_text': 'str',
        'login_text': 'str',
        'notification_text': 'str',
        'slogan': 'str',
        'welcome_text': 'str'
    }

    attribute_map = {
        'login_error_text': 'loginErrorText',
        'login_text': 'loginText',
        'notification_text': 'notificationText',
        'slogan': 'slogan',
        'welcome_text': 'welcomeText'
    }

    def __init__(self, login_error_text=None, login_text=None, notification_text=None, slogan=None, welcome_text=None):  # noqa: E501
        """MaintenanceModeProperties - a model defined in Swagger"""  # noqa: E501
        self._login_error_text = None
        self._login_text = None
        self._notification_text = None
        self._slogan = None
        self._welcome_text = None
        self.discriminator = None
        self.login_error_text = login_error_text
        self.login_text = login_text
        self.notification_text = notification_text
        self.slogan = slogan
        self.welcome_text = welcome_text

    @property
    def login_error_text(self):
        """Gets the login_error_text of this MaintenanceModeProperties.  # noqa: E501

        Error text shown during login  # noqa: E501

        :return: The login_error_text of this MaintenanceModeProperties.  # noqa: E501
        :rtype: str
        """
        return self._login_error_text

    @login_error_text.setter
    def login_error_text(self, login_error_text):
        """Sets the login_error_text of this MaintenanceModeProperties.

        Error text shown during login  # noqa: E501

        :param login_error_text: The login_error_text of this MaintenanceModeProperties.  # noqa: E501
        :type: str
        """
        if login_error_text is None:
            raise ValueError("Invalid value for `login_error_text`, must not be `None`")  # noqa: E501

        self._login_error_text = login_error_text

    @property
    def login_text(self):
        """Gets the login_text of this MaintenanceModeProperties.  # noqa: E501

        Text shown on login screen  # noqa: E501

        :return: The login_text of this MaintenanceModeProperties.  # noqa: E501
        :rtype: str
        """
        return self._login_text

    @login_text.setter
    def login_text(self, login_text):
        """Sets the login_text of this MaintenanceModeProperties.

        Text shown on login screen  # noqa: E501

        :param login_text: The login_text of this MaintenanceModeProperties.  # noqa: E501
        :type: str
        """
        if login_text is None:
            raise ValueError("Invalid value for `login_text`, must not be `None`")  # noqa: E501

        self._login_text = login_text

    @property
    def notification_text(self):
        """Gets the notification_text of this MaintenanceModeProperties.  # noqa: E501

        Notification text  # noqa: E501

        :return: The notification_text of this MaintenanceModeProperties.  # noqa: E501
        :rtype: str
        """
        return self._notification_text

    @notification_text.setter
    def notification_text(self, notification_text):
        """Sets the notification_text of this MaintenanceModeProperties.

        Notification text  # noqa: E501

        :param notification_text: The notification_text of this MaintenanceModeProperties.  # noqa: E501
        :type: str
        """
        if notification_text is None:
            raise ValueError("Invalid value for `notification_text`, must not be `None`")  # noqa: E501

        self._notification_text = notification_text

    @property
    def slogan(self):
        """Gets the slogan of this MaintenanceModeProperties.  # noqa: E501

        Slogan text  # noqa: E501

        :return: The slogan of this MaintenanceModeProperties.  # noqa: E501
        :rtype: str
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this MaintenanceModeProperties.

        Slogan text  # noqa: E501

        :param slogan: The slogan of this MaintenanceModeProperties.  # noqa: E501
        :type: str
        """
        if slogan is None:
            raise ValueError("Invalid value for `slogan`, must not be `None`")  # noqa: E501

        self._slogan = slogan

    @property
    def welcome_text(self):
        """Gets the welcome_text of this MaintenanceModeProperties.  # noqa: E501

        Welcome text  # noqa: E501

        :return: The welcome_text of this MaintenanceModeProperties.  # noqa: E501
        :rtype: str
        """
        return self._welcome_text

    @welcome_text.setter
    def welcome_text(self, welcome_text):
        """Sets the welcome_text of this MaintenanceModeProperties.

        Welcome text  # noqa: E501

        :param welcome_text: The welcome_text of this MaintenanceModeProperties.  # noqa: E501
        :type: str
        """
        if welcome_text is None:
            raise ValueError("Invalid value for `welcome_text`, must not be `None`")  # noqa: E501

        self._welcome_text = welcome_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceModeProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceModeProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
