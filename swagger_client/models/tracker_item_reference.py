# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.abstract_reference import AbstractReference  # noqa: F401,E501

class TrackerItemReference(AbstractReference):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'angular_icon': 'str',
        'icon_color': 'str',
        'propagate_suspects': 'bool',
        'reference_data': 'TrackerItemReferenceData',
        'test_step_reuse': 'bool',
        'tracker_key': 'str',
        'tracker_type_id': 'int',
        'uri': 'str'
    }
    if hasattr(AbstractReference, "swagger_types"):
        swagger_types.update(AbstractReference.swagger_types)

    attribute_map = {
        'angular_icon': 'angularIcon',
        'icon_color': 'iconColor',
        'propagate_suspects': 'propagateSuspects',
        'reference_data': 'referenceData',
        'test_step_reuse': 'testStepReuse',
        'tracker_key': 'trackerKey',
        'tracker_type_id': 'trackerTypeId',
        'uri': 'uri'
    }
    if hasattr(AbstractReference, "attribute_map"):
        attribute_map.update(AbstractReference.attribute_map)

    def __init__(self, angular_icon=None, icon_color=None, propagate_suspects=None, reference_data=None, test_step_reuse=None, tracker_key=None, tracker_type_id=None, uri=None, *args, **kwargs):  # noqa: E501
        """TrackerItemReference - a model defined in Swagger"""  # noqa: E501
        self._angular_icon = None
        self._icon_color = None
        self._propagate_suspects = None
        self._reference_data = None
        self._test_step_reuse = None
        self._tracker_key = None
        self._tracker_type_id = None
        self._uri = None
        self.discriminator = None
        if angular_icon is not None:
            self.angular_icon = angular_icon
        if icon_color is not None:
            self.icon_color = icon_color
        if propagate_suspects is not None:
            self.propagate_suspects = propagate_suspects
        if reference_data is not None:
            self.reference_data = reference_data
        if test_step_reuse is not None:
            self.test_step_reuse = test_step_reuse
        if tracker_key is not None:
            self.tracker_key = tracker_key
        if tracker_type_id is not None:
            self.tracker_type_id = tracker_type_id
        if uri is not None:
            self.uri = uri
        AbstractReference.__init__(self, *args, **kwargs)

    @property
    def angular_icon(self):
        """Gets the angular_icon of this TrackerItemReference.  # noqa: E501


        :return: The angular_icon of this TrackerItemReference.  # noqa: E501
        :rtype: str
        """
        return self._angular_icon

    @angular_icon.setter
    def angular_icon(self, angular_icon):
        """Sets the angular_icon of this TrackerItemReference.


        :param angular_icon: The angular_icon of this TrackerItemReference.  # noqa: E501
        :type: str
        """

        self._angular_icon = angular_icon

    @property
    def icon_color(self):
        """Gets the icon_color of this TrackerItemReference.  # noqa: E501


        :return: The icon_color of this TrackerItemReference.  # noqa: E501
        :rtype: str
        """
        return self._icon_color

    @icon_color.setter
    def icon_color(self, icon_color):
        """Sets the icon_color of this TrackerItemReference.


        :param icon_color: The icon_color of this TrackerItemReference.  # noqa: E501
        :type: str
        """

        self._icon_color = icon_color

    @property
    def propagate_suspects(self):
        """Gets the propagate_suspects of this TrackerItemReference.  # noqa: E501


        :return: The propagate_suspects of this TrackerItemReference.  # noqa: E501
        :rtype: bool
        """
        return self._propagate_suspects

    @propagate_suspects.setter
    def propagate_suspects(self, propagate_suspects):
        """Sets the propagate_suspects of this TrackerItemReference.


        :param propagate_suspects: The propagate_suspects of this TrackerItemReference.  # noqa: E501
        :type: bool
        """

        self._propagate_suspects = propagate_suspects

    @property
    def reference_data(self):
        """Gets the reference_data of this TrackerItemReference.  # noqa: E501


        :return: The reference_data of this TrackerItemReference.  # noqa: E501
        :rtype: TrackerItemReferenceData
        """
        return self._reference_data

    @reference_data.setter
    def reference_data(self, reference_data):
        """Sets the reference_data of this TrackerItemReference.


        :param reference_data: The reference_data of this TrackerItemReference.  # noqa: E501
        :type: TrackerItemReferenceData
        """

        self._reference_data = reference_data

    @property
    def test_step_reuse(self):
        """Gets the test_step_reuse of this TrackerItemReference.  # noqa: E501


        :return: The test_step_reuse of this TrackerItemReference.  # noqa: E501
        :rtype: bool
        """
        return self._test_step_reuse

    @test_step_reuse.setter
    def test_step_reuse(self, test_step_reuse):
        """Sets the test_step_reuse of this TrackerItemReference.


        :param test_step_reuse: The test_step_reuse of this TrackerItemReference.  # noqa: E501
        :type: bool
        """

        self._test_step_reuse = test_step_reuse

    @property
    def tracker_key(self):
        """Gets the tracker_key of this TrackerItemReference.  # noqa: E501


        :return: The tracker_key of this TrackerItemReference.  # noqa: E501
        :rtype: str
        """
        return self._tracker_key

    @tracker_key.setter
    def tracker_key(self, tracker_key):
        """Sets the tracker_key of this TrackerItemReference.


        :param tracker_key: The tracker_key of this TrackerItemReference.  # noqa: E501
        :type: str
        """

        self._tracker_key = tracker_key

    @property
    def tracker_type_id(self):
        """Gets the tracker_type_id of this TrackerItemReference.  # noqa: E501


        :return: The tracker_type_id of this TrackerItemReference.  # noqa: E501
        :rtype: int
        """
        return self._tracker_type_id

    @tracker_type_id.setter
    def tracker_type_id(self, tracker_type_id):
        """Sets the tracker_type_id of this TrackerItemReference.


        :param tracker_type_id: The tracker_type_id of this TrackerItemReference.  # noqa: E501
        :type: int
        """

        self._tracker_type_id = tracker_type_id

    @property
    def uri(self):
        """Gets the uri of this TrackerItemReference.  # noqa: E501


        :return: The uri of this TrackerItemReference.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this TrackerItemReference.


        :param uri: The uri of this TrackerItemReference.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
