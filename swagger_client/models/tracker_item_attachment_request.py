# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.tracker_items_request import TrackerItemsRequest  # noqa: F401,E501

class TrackerItemAttachmentRequest(TrackerItemsRequest):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baseline_id': 'int',
        'exclude_filter': 'bool',
        'extensions': 'list[str]',
        'mime_types': 'list[str]'
    }
    if hasattr(TrackerItemsRequest, "swagger_types"):
        swagger_types.update(TrackerItemsRequest.swagger_types)

    attribute_map = {
        'baseline_id': 'baselineId',
        'exclude_filter': 'excludeFilter',
        'extensions': 'extensions',
        'mime_types': 'mimeTypes'
    }
    if hasattr(TrackerItemsRequest, "attribute_map"):
        attribute_map.update(TrackerItemsRequest.attribute_map)

    def __init__(self, baseline_id=None, exclude_filter=None, extensions=None, mime_types=None, *args, **kwargs):  # noqa: E501
        """TrackerItemAttachmentRequest - a model defined in Swagger"""  # noqa: E501
        self._baseline_id = None
        self._exclude_filter = None
        self._extensions = None
        self._mime_types = None
        self.discriminator = None
        if baseline_id is not None:
            self.baseline_id = baseline_id
        if exclude_filter is not None:
            self.exclude_filter = exclude_filter
        if extensions is not None:
            self.extensions = extensions
        if mime_types is not None:
            self.mime_types = mime_types
        TrackerItemsRequest.__init__(self, *args, **kwargs)

    @property
    def baseline_id(self):
        """Gets the baseline_id of this TrackerItemAttachmentRequest.  # noqa: E501

        Baseline id to specify the versions of the tracker items.  # noqa: E501

        :return: The baseline_id of this TrackerItemAttachmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._baseline_id

    @baseline_id.setter
    def baseline_id(self, baseline_id):
        """Sets the baseline_id of this TrackerItemAttachmentRequest.

        Baseline id to specify the versions of the tracker items.  # noqa: E501

        :param baseline_id: The baseline_id of this TrackerItemAttachmentRequest.  # noqa: E501
        :type: int
        """

        self._baseline_id = baseline_id

    @property
    def exclude_filter(self):
        """Gets the exclude_filter of this TrackerItemAttachmentRequest.  # noqa: E501

        Indicator if the attachments matching the filters need to be excluded or not  # noqa: E501

        :return: The exclude_filter of this TrackerItemAttachmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_filter

    @exclude_filter.setter
    def exclude_filter(self, exclude_filter):
        """Sets the exclude_filter of this TrackerItemAttachmentRequest.

        Indicator if the attachments matching the filters need to be excluded or not  # noqa: E501

        :param exclude_filter: The exclude_filter of this TrackerItemAttachmentRequest.  # noqa: E501
        :type: bool
        """

        self._exclude_filter = exclude_filter

    @property
    def extensions(self):
        """Gets the extensions of this TrackerItemAttachmentRequest.  # noqa: E501

        File extension filters.  # noqa: E501

        :return: The extensions of this TrackerItemAttachmentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this TrackerItemAttachmentRequest.

        File extension filters.  # noqa: E501

        :param extensions: The extensions of this TrackerItemAttachmentRequest.  # noqa: E501
        :type: list[str]
        """

        self._extensions = extensions

    @property
    def mime_types(self):
        """Gets the mime_types of this TrackerItemAttachmentRequest.  # noqa: E501

        File mime type filters.  # noqa: E501

        :return: The mime_types of this TrackerItemAttachmentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._mime_types

    @mime_types.setter
    def mime_types(self, mime_types):
        """Sets the mime_types of this TrackerItemAttachmentRequest.

        File mime type filters.  # noqa: E501

        :param mime_types: The mime_types of this TrackerItemAttachmentRequest.  # noqa: E501
        :type: list[str]
        """

        self._mime_types = mime_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemAttachmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemAttachmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
