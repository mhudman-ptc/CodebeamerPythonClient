# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerTree(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[TrackerTree]',
        'is_folder': 'bool',
        'text': 'str',
        'tracker_id': 'int'
    }

    attribute_map = {
        'children': 'children',
        'is_folder': 'isFolder',
        'text': 'text',
        'tracker_id': 'trackerId'
    }

    def __init__(self, children=None, is_folder=None, text=None, tracker_id=None):  # noqa: E501
        """TrackerTree - a model defined in Swagger"""  # noqa: E501
        self._children = None
        self._is_folder = None
        self._text = None
        self._tracker_id = None
        self.discriminator = None
        if children is not None:
            self.children = children
        if is_folder is not None:
            self.is_folder = is_folder
        if text is not None:
            self.text = text
        if tracker_id is not None:
            self.tracker_id = tracker_id

    @property
    def children(self):
        """Gets the children of this TrackerTree.  # noqa: E501


        :return: The children of this TrackerTree.  # noqa: E501
        :rtype: list[TrackerTree]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TrackerTree.


        :param children: The children of this TrackerTree.  # noqa: E501
        :type: list[TrackerTree]
        """

        self._children = children

    @property
    def is_folder(self):
        """Gets the is_folder of this TrackerTree.  # noqa: E501

        Folder or tracker  # noqa: E501

        :return: The is_folder of this TrackerTree.  # noqa: E501
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder):
        """Sets the is_folder of this TrackerTree.

        Folder or tracker  # noqa: E501

        :param is_folder: The is_folder of this TrackerTree.  # noqa: E501
        :type: bool
        """

        self._is_folder = is_folder

    @property
    def text(self):
        """Gets the text of this TrackerTree.  # noqa: E501

        Name of a folder  # noqa: E501

        :return: The text of this TrackerTree.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TrackerTree.

        Name of a folder  # noqa: E501

        :param text: The text of this TrackerTree.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def tracker_id(self):
        """Gets the tracker_id of this TrackerTree.  # noqa: E501

        Id of the tracker  # noqa: E501

        :return: The tracker_id of this TrackerTree.  # noqa: E501
        :rtype: int
        """
        return self._tracker_id

    @tracker_id.setter
    def tracker_id(self, tracker_id):
        """Sets the tracker_id of this TrackerTree.

        Id of the tracker  # noqa: E501

        :param tracker_id: The tracker_id of this TrackerTree.  # noqa: E501
        :type: int
        """

        self._tracker_id = tracker_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerTree, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerTree):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
