# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WikiRenderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_id': 'int',
        'context_version': 'int',
        'markup': 'str',
        'rendering_context_type': 'str'
    }

    attribute_map = {
        'context_id': 'contextId',
        'context_version': 'contextVersion',
        'markup': 'markup',
        'rendering_context_type': 'renderingContextType'
    }

    def __init__(self, context_id=None, context_version=None, markup=None, rendering_context_type=None):  # noqa: E501
        """WikiRenderRequest - a model defined in Swagger"""  # noqa: E501
        self._context_id = None
        self._context_version = None
        self._markup = None
        self._rendering_context_type = None
        self.discriminator = None
        if context_id is not None:
            self.context_id = context_id
        if context_version is not None:
            self.context_version = context_version
        self.markup = markup
        if rendering_context_type is not None:
            self.rendering_context_type = rendering_context_type

    @property
    def context_id(self):
        """Gets the context_id of this WikiRenderRequest.  # noqa: E501

        Id of the entity used as rendering context  # noqa: E501

        :return: The context_id of this WikiRenderRequest.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this WikiRenderRequest.

        Id of the entity used as rendering context  # noqa: E501

        :param context_id: The context_id of this WikiRenderRequest.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def context_version(self):
        """Gets the context_version of this WikiRenderRequest.  # noqa: E501

        Version of the entity used as rendering context  # noqa: E501

        :return: The context_version of this WikiRenderRequest.  # noqa: E501
        :rtype: int
        """
        return self._context_version

    @context_version.setter
    def context_version(self, context_version):
        """Sets the context_version of this WikiRenderRequest.

        Version of the entity used as rendering context  # noqa: E501

        :param context_version: The context_version of this WikiRenderRequest.  # noqa: E501
        :type: int
        """

        self._context_version = context_version

    @property
    def markup(self):
        """Gets the markup of this WikiRenderRequest.  # noqa: E501

        Wiki markup to render as HTML  # noqa: E501

        :return: The markup of this WikiRenderRequest.  # noqa: E501
        :rtype: str
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this WikiRenderRequest.

        Wiki markup to render as HTML  # noqa: E501

        :param markup: The markup of this WikiRenderRequest.  # noqa: E501
        :type: str
        """
        if markup is None:
            raise ValueError("Invalid value for `markup`, must not be `None`")  # noqa: E501

        self._markup = markup

    @property
    def rendering_context_type(self):
        """Gets the rendering_context_type of this WikiRenderRequest.  # noqa: E501

        Type of the entity used as rendering context  # noqa: E501

        :return: The rendering_context_type of this WikiRenderRequest.  # noqa: E501
        :rtype: str
        """
        return self._rendering_context_type

    @rendering_context_type.setter
    def rendering_context_type(self, rendering_context_type):
        """Sets the rendering_context_type of this WikiRenderRequest.

        Type of the entity used as rendering context  # noqa: E501

        :param rendering_context_type: The rendering_context_type of this WikiRenderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRACKER_ITEM", "WIKI"]  # noqa: E501
        if rendering_context_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rendering_context_type` ({0}), must be one of {1}"  # noqa: E501
                .format(rendering_context_type, allowed_values)
            )

        self._rendering_context_type = rendering_context_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WikiRenderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WikiRenderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
