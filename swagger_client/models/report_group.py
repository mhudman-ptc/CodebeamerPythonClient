# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregates': 'list[ReportAggregate]',
        'count': 'float',
        'grouping_value': 'str',
        'grouping_value_id': 'int',
        'header': 'str',
        'type': 'str'
    }

    attribute_map = {
        'aggregates': 'aggregates',
        'count': 'count',
        'grouping_value': 'groupingValue',
        'grouping_value_id': 'groupingValueId',
        'header': 'header',
        'type': 'type'
    }

    discriminator_value_class_map = {
          'ReportGroupWithReferencedRows': 'ReportGroupWithReferencedRows',
'ReportGroupWithRows': 'ReportGroupWithRows',
'ReportGroupWithGroups': 'ReportGroupWithGroups'    }

    def __init__(self, aggregates=None, count=None, grouping_value=None, grouping_value_id=None, header=None, type=None):  # noqa: E501
        """ReportGroup - a model defined in Swagger"""  # noqa: E501
        self._aggregates = None
        self._count = None
        self._grouping_value = None
        self._grouping_value_id = None
        self._header = None
        self._type = None
        self.discriminator = 'type'
        if aggregates is not None:
            self.aggregates = aggregates
        if count is not None:
            self.count = count
        if grouping_value is not None:
            self.grouping_value = grouping_value
        if grouping_value_id is not None:
            self.grouping_value_id = grouping_value_id
        if header is not None:
            self.header = header
        if type is not None:
            self.type = type

    @property
    def aggregates(self):
        """Gets the aggregates of this ReportGroup.  # noqa: E501

        List of the aggregate values with column id.  # noqa: E501

        :return: The aggregates of this ReportGroup.  # noqa: E501
        :rtype: list[ReportAggregate]
        """
        return self._aggregates

    @aggregates.setter
    def aggregates(self, aggregates):
        """Sets the aggregates of this ReportGroup.

        List of the aggregate values with column id.  # noqa: E501

        :param aggregates: The aggregates of this ReportGroup.  # noqa: E501
        :type: list[ReportAggregate]
        """

        self._aggregates = aggregates

    @property
    def count(self):
        """Gets the count of this ReportGroup.  # noqa: E501

        Number of items in the group, if it has subgroups then the aggregated number of items.  # noqa: E501

        :return: The count of this ReportGroup.  # noqa: E501
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ReportGroup.

        Number of items in the group, if it has subgroups then the aggregated number of items.  # noqa: E501

        :param count: The count of this ReportGroup.  # noqa: E501
        :type: float
        """

        self._count = count

    @property
    def grouping_value(self):
        """Gets the grouping_value of this ReportGroup.  # noqa: E501

        The common value in the group, , if it's available  # noqa: E501

        :return: The grouping_value of this ReportGroup.  # noqa: E501
        :rtype: str
        """
        return self._grouping_value

    @grouping_value.setter
    def grouping_value(self, grouping_value):
        """Sets the grouping_value of this ReportGroup.

        The common value in the group, , if it's available  # noqa: E501

        :param grouping_value: The grouping_value of this ReportGroup.  # noqa: E501
        :type: str
        """

        self._grouping_value = grouping_value

    @property
    def grouping_value_id(self):
        """Gets the grouping_value_id of this ReportGroup.  # noqa: E501

        The id of the common value in the group, if it's available  # noqa: E501

        :return: The grouping_value_id of this ReportGroup.  # noqa: E501
        :rtype: int
        """
        return self._grouping_value_id

    @grouping_value_id.setter
    def grouping_value_id(self, grouping_value_id):
        """Sets the grouping_value_id of this ReportGroup.

        The id of the common value in the group, if it's available  # noqa: E501

        :param grouping_value_id: The grouping_value_id of this ReportGroup.  # noqa: E501
        :type: int
        """

        self._grouping_value_id = grouping_value_id

    @property
    def header(self):
        """Gets the header of this ReportGroup.  # noqa: E501

        Grouping header  # noqa: E501

        :return: The header of this ReportGroup.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this ReportGroup.

        Grouping header  # noqa: E501

        :param header: The header of this ReportGroup.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def type(self):
        """Gets the type of this ReportGroup.  # noqa: E501

        Type of the group.  # noqa: E501

        :return: The type of this ReportGroup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportGroup.

        Type of the group.  # noqa: E501

        :param type: The type of this ReportGroup.  # noqa: E501
        :type: str
        """

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
