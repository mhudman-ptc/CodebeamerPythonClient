# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItemRelationsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'downstream_references': 'list[DownstreamTrackerItemReference]',
        'incoming_associations': 'list[IncomingTrackerItemAssociation]',
        'is_last_page': 'bool',
        'item_count': 'int',
        'item_id': 'TrackerItemRevision',
        'outgoing_associations': 'list[OutgoingTrackerItemAssociation]',
        'page': 'int',
        'page_size': 'int',
        'upstream_references': 'list[UpstreamTrackerItemReference]'
    }

    attribute_map = {
        'downstream_references': 'downstreamReferences',
        'incoming_associations': 'incomingAssociations',
        'is_last_page': 'isLastPage',
        'item_count': 'itemCount',
        'item_id': 'itemId',
        'outgoing_associations': 'outgoingAssociations',
        'page': 'page',
        'page_size': 'pageSize',
        'upstream_references': 'upstreamReferences'
    }

    def __init__(self, downstream_references=None, incoming_associations=None, is_last_page=None, item_count=None, item_id=None, outgoing_associations=None, page=None, page_size=None, upstream_references=None):  # noqa: E501
        """TrackerItemRelationsResult - a model defined in Swagger"""  # noqa: E501
        self._downstream_references = None
        self._incoming_associations = None
        self._is_last_page = None
        self._item_count = None
        self._item_id = None
        self._outgoing_associations = None
        self._page = None
        self._page_size = None
        self._upstream_references = None
        self.discriminator = None
        if downstream_references is not None:
            self.downstream_references = downstream_references
        if incoming_associations is not None:
            self.incoming_associations = incoming_associations
        if is_last_page is not None:
            self.is_last_page = is_last_page
        if item_count is not None:
            self.item_count = item_count
        if item_id is not None:
            self.item_id = item_id
        if outgoing_associations is not None:
            self.outgoing_associations = outgoing_associations
        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size
        if upstream_references is not None:
            self.upstream_references = upstream_references

    @property
    def downstream_references(self):
        """Gets the downstream_references of this TrackerItemRelationsResult.  # noqa: E501

        References and associations to the item  # noqa: E501

        :return: The downstream_references of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: list[DownstreamTrackerItemReference]
        """
        return self._downstream_references

    @downstream_references.setter
    def downstream_references(self, downstream_references):
        """Sets the downstream_references of this TrackerItemRelationsResult.

        References and associations to the item  # noqa: E501

        :param downstream_references: The downstream_references of this TrackerItemRelationsResult.  # noqa: E501
        :type: list[DownstreamTrackerItemReference]
        """

        self._downstream_references = downstream_references

    @property
    def incoming_associations(self):
        """Gets the incoming_associations of this TrackerItemRelationsResult.  # noqa: E501

        References and associations to the item  # noqa: E501

        :return: The incoming_associations of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: list[IncomingTrackerItemAssociation]
        """
        return self._incoming_associations

    @incoming_associations.setter
    def incoming_associations(self, incoming_associations):
        """Sets the incoming_associations of this TrackerItemRelationsResult.

        References and associations to the item  # noqa: E501

        :param incoming_associations: The incoming_associations of this TrackerItemRelationsResult.  # noqa: E501
        :type: list[IncomingTrackerItemAssociation]
        """

        self._incoming_associations = incoming_associations

    @property
    def is_last_page(self):
        """Gets the is_last_page of this TrackerItemRelationsResult.  # noqa: E501

        Set to true if it is the last page  # noqa: E501

        :return: The is_last_page of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_last_page

    @is_last_page.setter
    def is_last_page(self, is_last_page):
        """Sets the is_last_page of this TrackerItemRelationsResult.

        Set to true if it is the last page  # noqa: E501

        :param is_last_page: The is_last_page of this TrackerItemRelationsResult.  # noqa: E501
        :type: bool
        """

        self._is_last_page = is_last_page

    @property
    def item_count(self):
        """Gets the item_count of this TrackerItemRelationsResult.  # noqa: E501

        Number of items on page  # noqa: E501

        :return: The item_count of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this TrackerItemRelationsResult.

        Number of items on page  # noqa: E501

        :param item_count: The item_count of this TrackerItemRelationsResult.  # noqa: E501
        :type: int
        """

        self._item_count = item_count

    @property
    def item_id(self):
        """Gets the item_id of this TrackerItemRelationsResult.  # noqa: E501


        :return: The item_id of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: TrackerItemRevision
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this TrackerItemRelationsResult.


        :param item_id: The item_id of this TrackerItemRelationsResult.  # noqa: E501
        :type: TrackerItemRevision
        """

        self._item_id = item_id

    @property
    def outgoing_associations(self):
        """Gets the outgoing_associations of this TrackerItemRelationsResult.  # noqa: E501

        References and associations to the item  # noqa: E501

        :return: The outgoing_associations of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: list[OutgoingTrackerItemAssociation]
        """
        return self._outgoing_associations

    @outgoing_associations.setter
    def outgoing_associations(self, outgoing_associations):
        """Sets the outgoing_associations of this TrackerItemRelationsResult.

        References and associations to the item  # noqa: E501

        :param outgoing_associations: The outgoing_associations of this TrackerItemRelationsResult.  # noqa: E501
        :type: list[OutgoingTrackerItemAssociation]
        """

        self._outgoing_associations = outgoing_associations

    @property
    def page(self):
        """Gets the page of this TrackerItemRelationsResult.  # noqa: E501

        Page no.  # noqa: E501

        :return: The page of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this TrackerItemRelationsResult.

        Page no.  # noqa: E501

        :param page: The page of this TrackerItemRelationsResult.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this TrackerItemRelationsResult.  # noqa: E501

        Page size  # noqa: E501

        :return: The page_size of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this TrackerItemRelationsResult.

        Page size  # noqa: E501

        :param page_size: The page_size of this TrackerItemRelationsResult.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def upstream_references(self):
        """Gets the upstream_references of this TrackerItemRelationsResult.  # noqa: E501

        References and associations to the item  # noqa: E501

        :return: The upstream_references of this TrackerItemRelationsResult.  # noqa: E501
        :rtype: list[UpstreamTrackerItemReference]
        """
        return self._upstream_references

    @upstream_references.setter
    def upstream_references(self, upstream_references):
        """Sets the upstream_references of this TrackerItemRelationsResult.

        References and associations to the item  # noqa: E501

        :param upstream_references: The upstream_references of this TrackerItemRelationsResult.  # noqa: E501
        :type: list[UpstreamTrackerItemReference]
        """

        self._upstream_references = upstream_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemRelationsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemRelationsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
