# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItemFieldMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        '_property': 'str',
        'type_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        '_property': 'property',
        'type_name': 'typeName'
    }

    def __init__(self, id=None, name=None, _property=None, type_name=None):  # noqa: E501
        """TrackerItemFieldMapping - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self.__property = None
        self._type_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if _property is not None:
            self._property = _property
        if type_name is not None:
            self.type_name = type_name

    @property
    def id(self):
        """Gets the id of this TrackerItemFieldMapping.  # noqa: E501

        Id of the entity  # noqa: E501

        :return: The id of this TrackerItemFieldMapping.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackerItemFieldMapping.

        Id of the entity  # noqa: E501

        :param id: The id of this TrackerItemFieldMapping.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TrackerItemFieldMapping.  # noqa: E501

        Name of the entity  # noqa: E501

        :return: The name of this TrackerItemFieldMapping.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackerItemFieldMapping.

        Name of the entity  # noqa: E501

        :param name: The name of this TrackerItemFieldMapping.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def _property(self):
        """Gets the _property of this TrackerItemFieldMapping.  # noqa: E501

        Tracker field property name  # noqa: E501

        :return: The _property of this TrackerItemFieldMapping.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this TrackerItemFieldMapping.

        Tracker field property name  # noqa: E501

        :param _property: The _property of this TrackerItemFieldMapping.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def type_name(self):
        """Gets the type_name of this TrackerItemFieldMapping.  # noqa: E501

        Tracker field type  # noqa: E501

        :return: The type_name of this TrackerItemFieldMapping.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this TrackerItemFieldMapping.

        Tracker field type  # noqa: E501

        :param type_name: The type_name of this TrackerItemFieldMapping.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemFieldMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemFieldMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
