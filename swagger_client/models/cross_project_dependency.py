# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrossProjectDependency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'referred_from': 'list[DependencyAttribute]',
        'source_project': 'ProjectReference',
        'target_project': 'ProjectReference'
    }

    attribute_map = {
        'referred_from': 'referredFrom',
        'source_project': 'sourceProject',
        'target_project': 'targetProject'
    }

    def __init__(self, referred_from=None, source_project=None, target_project=None):  # noqa: E501
        """CrossProjectDependency - a model defined in Swagger"""  # noqa: E501
        self._referred_from = None
        self._source_project = None
        self._target_project = None
        self.discriminator = None
        if referred_from is not None:
            self.referred_from = referred_from
        if source_project is not None:
            self.source_project = source_project
        if target_project is not None:
            self.target_project = target_project

    @property
    def referred_from(self):
        """Gets the referred_from of this CrossProjectDependency.  # noqa: E501

        Information on where references were found in source project.  # noqa: E501

        :return: The referred_from of this CrossProjectDependency.  # noqa: E501
        :rtype: list[DependencyAttribute]
        """
        return self._referred_from

    @referred_from.setter
    def referred_from(self, referred_from):
        """Sets the referred_from of this CrossProjectDependency.

        Information on where references were found in source project.  # noqa: E501

        :param referred_from: The referred_from of this CrossProjectDependency.  # noqa: E501
        :type: list[DependencyAttribute]
        """

        self._referred_from = referred_from

    @property
    def source_project(self):
        """Gets the source_project of this CrossProjectDependency.  # noqa: E501


        :return: The source_project of this CrossProjectDependency.  # noqa: E501
        :rtype: ProjectReference
        """
        return self._source_project

    @source_project.setter
    def source_project(self, source_project):
        """Sets the source_project of this CrossProjectDependency.


        :param source_project: The source_project of this CrossProjectDependency.  # noqa: E501
        :type: ProjectReference
        """

        self._source_project = source_project

    @property
    def target_project(self):
        """Gets the target_project of this CrossProjectDependency.  # noqa: E501


        :return: The target_project of this CrossProjectDependency.  # noqa: E501
        :rtype: ProjectReference
        """
        return self._target_project

    @target_project.setter
    def target_project(self, target_project):
        """Sets the target_project of this CrossProjectDependency.


        :param target_project: The target_project of this CrossProjectDependency.  # noqa: E501
        :type: ProjectReference
        """

        self._target_project = target_project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrossProjectDependency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrossProjectDependency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
