# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExportToWordRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_item_and_its_children': 'bool',
        'current_item_id': 'int',
        'export_target_tracker_folder_id': 'int',
        'export_target_tracker_id': 'int',
        'new_version': 'bool',
        'report_id': 'int',
        'word_filename': 'str',
        'word_template_name': 'str'
    }

    attribute_map = {
        'current_item_and_its_children': 'currentItemAndItsChildren',
        'current_item_id': 'currentItemId',
        'export_target_tracker_folder_id': 'exportTargetTrackerFolderId',
        'export_target_tracker_id': 'exportTargetTrackerId',
        'new_version': 'newVersion',
        'report_id': 'reportId',
        'word_filename': 'wordFilename',
        'word_template_name': 'wordTemplateName'
    }

    def __init__(self, current_item_and_its_children=None, current_item_id=None, export_target_tracker_folder_id=None, export_target_tracker_id=None, new_version=None, report_id=None, word_filename=None, word_template_name=None):  # noqa: E501
        """ExportToWordRequest - a model defined in Swagger"""  # noqa: E501
        self._current_item_and_its_children = None
        self._current_item_id = None
        self._export_target_tracker_folder_id = None
        self._export_target_tracker_id = None
        self._new_version = None
        self._report_id = None
        self._word_filename = None
        self._word_template_name = None
        self.discriminator = None
        if current_item_and_its_children is not None:
            self.current_item_and_its_children = current_item_and_its_children
        self.current_item_id = current_item_id
        if export_target_tracker_folder_id is not None:
            self.export_target_tracker_folder_id = export_target_tracker_folder_id
        self.export_target_tracker_id = export_target_tracker_id
        if new_version is not None:
            self.new_version = new_version
        if report_id is not None:
            self.report_id = report_id
        self.word_filename = word_filename
        if word_template_name is not None:
            self.word_template_name = word_template_name

    @property
    def current_item_and_its_children(self):
        """Gets the current_item_and_its_children of this ExportToWordRequest.  # noqa: E501

        The children of the current item should be included also or not  # noqa: E501

        :return: The current_item_and_its_children of this ExportToWordRequest.  # noqa: E501
        :rtype: bool
        """
        return self._current_item_and_its_children

    @current_item_and_its_children.setter
    def current_item_and_its_children(self, current_item_and_its_children):
        """Sets the current_item_and_its_children of this ExportToWordRequest.

        The children of the current item should be included also or not  # noqa: E501

        :param current_item_and_its_children: The current_item_and_its_children of this ExportToWordRequest.  # noqa: E501
        :type: bool
        """

        self._current_item_and_its_children = current_item_and_its_children

    @property
    def current_item_id(self):
        """Gets the current_item_id of this ExportToWordRequest.  # noqa: E501

        The id of the item  # noqa: E501

        :return: The current_item_id of this ExportToWordRequest.  # noqa: E501
        :rtype: int
        """
        return self._current_item_id

    @current_item_id.setter
    def current_item_id(self, current_item_id):
        """Sets the current_item_id of this ExportToWordRequest.

        The id of the item  # noqa: E501

        :param current_item_id: The current_item_id of this ExportToWordRequest.  # noqa: E501
        :type: int
        """
        if current_item_id is None:
            raise ValueError("Invalid value for `current_item_id`, must not be `None`")  # noqa: E501

        self._current_item_id = current_item_id

    @property
    def export_target_tracker_folder_id(self):
        """Gets the export_target_tracker_folder_id of this ExportToWordRequest.  # noqa: E501

        The Document tracker Folder where the exported file will be stored  # noqa: E501

        :return: The export_target_tracker_folder_id of this ExportToWordRequest.  # noqa: E501
        :rtype: int
        """
        return self._export_target_tracker_folder_id

    @export_target_tracker_folder_id.setter
    def export_target_tracker_folder_id(self, export_target_tracker_folder_id):
        """Sets the export_target_tracker_folder_id of this ExportToWordRequest.

        The Document tracker Folder where the exported file will be stored  # noqa: E501

        :param export_target_tracker_folder_id: The export_target_tracker_folder_id of this ExportToWordRequest.  # noqa: E501
        :type: int
        """

        self._export_target_tracker_folder_id = export_target_tracker_folder_id

    @property
    def export_target_tracker_id(self):
        """Gets the export_target_tracker_id of this ExportToWordRequest.  # noqa: E501

        The id of the Document type Tracker  # noqa: E501

        :return: The export_target_tracker_id of this ExportToWordRequest.  # noqa: E501
        :rtype: int
        """
        return self._export_target_tracker_id

    @export_target_tracker_id.setter
    def export_target_tracker_id(self, export_target_tracker_id):
        """Sets the export_target_tracker_id of this ExportToWordRequest.

        The id of the Document type Tracker  # noqa: E501

        :param export_target_tracker_id: The export_target_tracker_id of this ExportToWordRequest.  # noqa: E501
        :type: int
        """
        if export_target_tracker_id is None:
            raise ValueError("Invalid value for `export_target_tracker_id`, must not be `None`")  # noqa: E501

        self._export_target_tracker_id = export_target_tracker_id

    @property
    def new_version(self):
        """Gets the new_version of this ExportToWordRequest.  # noqa: E501

        If true, new version of the file will be created (timestamp added), otherwise previous file will be overwritten  # noqa: E501

        :return: The new_version of this ExportToWordRequest.  # noqa: E501
        :rtype: bool
        """
        return self._new_version

    @new_version.setter
    def new_version(self, new_version):
        """Sets the new_version of this ExportToWordRequest.

        If true, new version of the file will be created (timestamp added), otherwise previous file will be overwritten  # noqa: E501

        :param new_version: The new_version of this ExportToWordRequest.  # noqa: E501
        :type: bool
        """

        self._new_version = new_version

    @property
    def report_id(self):
        """Gets the report_id of this ExportToWordRequest.  # noqa: E501

        If specified, the report result will be in the Word document instead of the current item (and its children, if this set)  # noqa: E501

        :return: The report_id of this ExportToWordRequest.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this ExportToWordRequest.

        If specified, the report result will be in the Word document instead of the current item (and its children, if this set)  # noqa: E501

        :param report_id: The report_id of this ExportToWordRequest.  # noqa: E501
        :type: int
        """

        self._report_id = report_id

    @property
    def word_filename(self):
        """Gets the word_filename of this ExportToWordRequest.  # noqa: E501

        The name of the generated Word document  # noqa: E501

        :return: The word_filename of this ExportToWordRequest.  # noqa: E501
        :rtype: str
        """
        return self._word_filename

    @word_filename.setter
    def word_filename(self, word_filename):
        """Sets the word_filename of this ExportToWordRequest.

        The name of the generated Word document  # noqa: E501

        :param word_filename: The word_filename of this ExportToWordRequest.  # noqa: E501
        :type: str
        """
        if word_filename is None:
            raise ValueError("Invalid value for `word_filename`, must not be `None`")  # noqa: E501

        self._word_filename = word_filename

    @property
    def word_template_name(self):
        """Gets the word_template_name of this ExportToWordRequest.  # noqa: E501

        Which Word template should be used for the Word document generation  # noqa: E501

        :return: The word_template_name of this ExportToWordRequest.  # noqa: E501
        :rtype: str
        """
        return self._word_template_name

    @word_template_name.setter
    def word_template_name(self, word_template_name):
        """Sets the word_template_name of this ExportToWordRequest.

        Which Word template should be used for the Word document generation  # noqa: E501

        :param word_template_name: The word_template_name of this ExportToWordRequest.  # noqa: E501
        :type: str
        """

        self._word_template_name = word_template_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportToWordRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportToWordRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
