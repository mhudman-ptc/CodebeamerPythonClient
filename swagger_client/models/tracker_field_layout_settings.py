# coding: utf-8

"""
    Codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerFieldLayoutSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_layout': 'str',
        'layouts': 'list[FieldLayoutSettings]',
        'status_layout': 'list[StatusLayout]'
    }

    attribute_map = {
        'default_layout': 'defaultLayout',
        'layouts': 'layouts',
        'status_layout': 'statusLayout'
    }

    def __init__(self, default_layout=None, layouts=None, status_layout=None):  # noqa: E501
        """TrackerFieldLayoutSettings - a model defined in Swagger"""  # noqa: E501
        self._default_layout = None
        self._layouts = None
        self._status_layout = None
        self.discriminator = None
        if default_layout is not None:
            self.default_layout = default_layout
        if layouts is not None:
            self.layouts = layouts
        if status_layout is not None:
            self.status_layout = status_layout

    @property
    def default_layout(self):
        """Gets the default_layout of this TrackerFieldLayoutSettings.  # noqa: E501

        defaultLayout of a tracker  # noqa: E501

        :return: The default_layout of this TrackerFieldLayoutSettings.  # noqa: E501
        :rtype: str
        """
        return self._default_layout

    @default_layout.setter
    def default_layout(self, default_layout):
        """Sets the default_layout of this TrackerFieldLayoutSettings.

        defaultLayout of a tracker  # noqa: E501

        :param default_layout: The default_layout of this TrackerFieldLayoutSettings.  # noqa: E501
        :type: str
        """

        self._default_layout = default_layout

    @property
    def layouts(self):
        """Gets the layouts of this TrackerFieldLayoutSettings.  # noqa: E501

        fieldLayoutSettingsModels of a tracker  # noqa: E501

        :return: The layouts of this TrackerFieldLayoutSettings.  # noqa: E501
        :rtype: list[FieldLayoutSettings]
        """
        return self._layouts

    @layouts.setter
    def layouts(self, layouts):
        """Sets the layouts of this TrackerFieldLayoutSettings.

        fieldLayoutSettingsModels of a tracker  # noqa: E501

        :param layouts: The layouts of this TrackerFieldLayoutSettings.  # noqa: E501
        :type: list[FieldLayoutSettings]
        """

        self._layouts = layouts

    @property
    def status_layout(self):
        """Gets the status_layout of this TrackerFieldLayoutSettings.  # noqa: E501

        statusLayout of a tracker  # noqa: E501

        :return: The status_layout of this TrackerFieldLayoutSettings.  # noqa: E501
        :rtype: list[StatusLayout]
        """
        return self._status_layout

    @status_layout.setter
    def status_layout(self, status_layout):
        """Sets the status_layout of this TrackerFieldLayoutSettings.

        statusLayout of a tracker  # noqa: E501

        :param status_layout: The status_layout of this TrackerFieldLayoutSettings.  # noqa: E501
        :type: list[StatusLayout]
        """

        self._status_layout = status_layout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerFieldLayoutSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerFieldLayoutSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
