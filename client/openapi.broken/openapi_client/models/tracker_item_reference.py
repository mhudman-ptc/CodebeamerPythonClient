# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.abstract_reference import AbstractReference
from openapi_client.models.tracker_item_reference_data import TrackerItemReferenceData
from typing import Optional, Set
from typing_extensions import Self

class TrackerItemReference(AbstractReference):
    """
    Reference to a tracker item
    """ # noqa: E501
    angular_icon: Optional[StrictStr] = Field(default=None, alias="angularIcon")
    icon_color: Optional[StrictStr] = Field(default=None, alias="iconColor")
    propagate_suspects: Optional[StrictBool] = Field(default=None, alias="propagateSuspects")
    reference_data: Optional[TrackerItemReferenceData] = Field(default=None, alias="referenceData")
    test_step_reuse: Optional[StrictBool] = Field(default=None, alias="testStepReuse")
    tracker_key: Optional[StrictStr] = Field(default=None, alias="trackerKey")
    tracker_type_id: Optional[StrictInt] = Field(default=None, alias="trackerTypeId")
    uri: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "type", "angularIcon", "iconColor", "propagateSuspects", "referenceData", "testStepReuse", "trackerKey", "trackerTypeId", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackerItemReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reference_data
        if self.reference_data:
            _dict['referenceData'] = self.reference_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackerItemReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "angularIcon": obj.get("angularIcon"),
            "iconColor": obj.get("iconColor"),
            "propagateSuspects": obj.get("propagateSuspects"),
            "referenceData": TrackerItemReferenceData.from_dict(obj["referenceData"]) if obj.get("referenceData") is not None else None,
            "testStepReuse": obj.get("testStepReuse"),
            "trackerKey": obj.get("trackerKey"),
            "trackerTypeId": obj.get("trackerTypeId"),
            "uri": obj.get("uri")
        })
        return _obj


