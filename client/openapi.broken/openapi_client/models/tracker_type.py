# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TrackerType(BaseModel):
    """
    TrackerType
    """ # noqa: E501
    branchable: Optional[StrictBool] = Field(default=None, description="True if tracker type is branchable")
    color: Optional[StrictStr] = Field(default=None, description="Color of a tracker type")
    doc_edit_view: Optional[StrictBool] = Field(default=None, description="True if tracker type has document view", alias="docEditView")
    editor_url: Optional[StrictStr] = Field(default=None, description="Editor URL of a tracker type", alias="editorUrl")
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Id of the entity")
    item_icon_url: Optional[StrictStr] = Field(default=None, description="Item icon URL of a tracker type", alias="itemIconUrl")
    name: Optional[StrictStr] = Field(default=None, description="Name of the entity")
    outline: Optional[StrictBool] = Field(default=None, description="True if outline is enabled")
    tracker_icon_url: Optional[StrictStr] = Field(default=None, description="Tracker icon URL of a tracker type", alias="trackerIconUrl")
    url_link_format: Optional[StrictStr] = Field(default=None, description="URL link format of a tracker type", alias="urlLinkFormat")
    var_name: Optional[StrictStr] = Field(default=None, description="Internal/variable name of a tracker type", alias="varName")
    __properties: ClassVar[List[str]] = ["branchable", "color", "docEditView", "editorUrl", "id", "itemIconUrl", "name", "outline", "trackerIconUrl", "urlLinkFormat", "varName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackerType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackerType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branchable": obj.get("branchable"),
            "color": obj.get("color"),
            "docEditView": obj.get("docEditView"),
            "editorUrl": obj.get("editorUrl"),
            "id": obj.get("id"),
            "itemIconUrl": obj.get("itemIconUrl"),
            "name": obj.get("name"),
            "outline": obj.get("outline"),
            "trackerIconUrl": obj.get("trackerIconUrl"),
            "urlLinkFormat": obj.get("urlLinkFormat"),
            "varName": obj.get("varName")
        })
        return _obj


