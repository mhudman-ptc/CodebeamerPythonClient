# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TrackerBasicInformation(BaseModel):
    """
    General Tracker information.
    """ # noqa: E501
    always_use_quick_transitions: Optional[StrictBool] = Field(default=None, alias="alwaysUseQuickTransitions")
    color: Optional[StrictStr] = None
    default_layout: Optional[StrictStr] = Field(default=None, alias="defaultLayout")
    description: Optional[StrictStr] = None
    hidden: Optional[StrictBool] = None
    inbox_id: Optional[StrictInt] = Field(default=None, alias="inboxId")
    issue_type_id: Optional[StrictInt] = Field(default=None, alias="issueTypeId")
    key: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    only_workflow_actions_can_create_new_referring_items: Optional[StrictBool] = Field(default=None, alias="onlyWorkflowActionsCanCreateNewReferringItems")
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    shared_in_working_sets: Optional[StrictBool] = Field(default=None, alias="sharedInWorkingSets")
    show_ancestor_items: Optional[StrictBool] = Field(default=None, alias="showAncestorItems")
    show_descendant_items: Optional[StrictBool] = Field(default=None, alias="showDescendantItems")
    template: Optional[StrictBool] = None
    template_id: Optional[StrictInt] = Field(default=None, alias="templateId")
    tracker_id: Optional[StrictInt] = Field(default=None, alias="trackerId")
    workflow_is_active: Optional[StrictBool] = Field(default=None, alias="workflowIsActive")
    __properties: ClassVar[List[str]] = ["alwaysUseQuickTransitions", "color", "defaultLayout", "description", "hidden", "inboxId", "issueTypeId", "key", "name", "onlyWorkflowActionsCanCreateNewReferringItems", "projectId", "sharedInWorkingSets", "showAncestorItems", "showDescendantItems", "template", "templateId", "trackerId", "workflowIsActive"]

    @field_validator('default_layout')
    def default_layout_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TABLE', 'DOCUMENT', 'DOCUMENT_EDIT', 'CARDBOARD', 'DASHBOARD']):
            raise ValueError("must be one of enum values ('TABLE', 'DOCUMENT', 'DOCUMENT_EDIT', 'CARDBOARD', 'DASHBOARD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackerBasicInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackerBasicInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alwaysUseQuickTransitions": obj.get("alwaysUseQuickTransitions"),
            "color": obj.get("color"),
            "defaultLayout": obj.get("defaultLayout"),
            "description": obj.get("description"),
            "hidden": obj.get("hidden"),
            "inboxId": obj.get("inboxId"),
            "issueTypeId": obj.get("issueTypeId"),
            "key": obj.get("key"),
            "name": obj.get("name"),
            "onlyWorkflowActionsCanCreateNewReferringItems": obj.get("onlyWorkflowActionsCanCreateNewReferringItems"),
            "projectId": obj.get("projectId"),
            "sharedInWorkingSets": obj.get("sharedInWorkingSets"),
            "showAncestorItems": obj.get("showAncestorItems"),
            "showDescendantItems": obj.get("showDescendantItems"),
            "template": obj.get("template"),
            "templateId": obj.get("templateId"),
            "trackerId": obj.get("trackerId"),
            "workflowIsActive": obj.get("workflowIsActive")
        })
        return _obj


