# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.abstract_field_value import AbstractFieldValue
from openapi_client.models.abstract_reference import AbstractReference
from openapi_client.models.comment_reference import CommentReference
from openapi_client.models.label import Label
from openapi_client.models.tracker_item_reference import TrackerItemReference
from openapi_client.models.tracker_reference import TrackerReference
from openapi_client.models.user_reference import UserReference
from typing import Optional, Set
from typing_extensions import Self

class TrackerItem(BaseModel):
    """
    Basic properties of a codebeamer tracker item
    """ # noqa: E501
    accrued_millis: Optional[StrictInt] = Field(default=None, description="Accrued work time of a tracker item in milliseconds", alias="accruedMillis")
    areas: Optional[List[AbstractReference]] = Field(default=None, description="Areas of a tracker item")
    assigned_at: Optional[datetime] = Field(default=None, description="Assignee date of a tracker item", alias="assignedAt")
    assigned_to: Optional[List[AbstractReference]] = Field(default=None, description="Assignees of a tracker item", alias="assignedTo")
    categories: Optional[List[AbstractReference]] = Field(default=None, description="Categories of a tracker item")
    children: Optional[List[TrackerItemReference]] = Field(default=None, description="Children of a tracker item")
    closed_at: Optional[datetime] = Field(default=None, description="Close date of a tracker item", alias="closedAt")
    comments: Optional[List[CommentReference]] = Field(default=None, description="Comment in the tracker item")
    created_at: Optional[datetime] = Field(default=None, description="The date when the entity was created", alias="createdAt")
    created_by: Optional[UserReference] = Field(default=None, alias="createdBy")
    custom_fields: Optional[List[AbstractFieldValue]] = Field(default=None, description="Custom field of a tracker item", alias="customFields")
    description: Optional[StrictStr] = Field(default=None, description="Description of the entity")
    description_format: Optional[StrictStr] = Field(default=None, description="Description format of the entity", alias="descriptionFormat")
    end_date: Optional[datetime] = Field(default=None, description="End date of a tracker item", alias="endDate")
    estimated_millis: Optional[StrictInt] = Field(default=None, description="Estimated work time of a tracker item in milliseconds", alias="estimatedMillis")
    formality: Optional[AbstractReference] = None
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Id of the entity")
    modified_at: Optional[datetime] = Field(default=None, description="The date when the entity was modified", alias="modifiedAt")
    modified_by: Optional[UserReference] = Field(default=None, alias="modifiedBy")
    name: Optional[StrictStr] = Field(default=None, description="Name of the entity")
    ordinal: Optional[StrictInt] = Field(default=None, description="Ordinal of a tracker item")
    owners: Optional[List[AbstractReference]] = Field(default=None, description="Owners of a tracker item")
    parent: Optional[TrackerItemReference] = None
    platforms: Optional[List[AbstractReference]] = Field(default=None, description="Platforms of a tracker item")
    priority: Optional[AbstractReference] = None
    release_method: Optional[AbstractReference] = Field(default=None, alias="releaseMethod")
    resolutions: Optional[List[AbstractReference]] = Field(default=None, description="Resolutions of a tracker item")
    severities: Optional[List[AbstractReference]] = Field(default=None, description="Severities of a tracker item")
    spent_millis: Optional[StrictInt] = Field(default=None, description="Spent work time of a tracker item in milliseconds", alias="spentMillis")
    start_date: Optional[datetime] = Field(default=None, description="Start date of a tracker item", alias="startDate")
    status: Optional[AbstractReference] = None
    story_points: Optional[StrictInt] = Field(default=None, description="Story points of a tracker item", alias="storyPoints")
    subjects: Optional[List[AbstractReference]] = Field(default=None, description="Subjects of a tracker item")
    tags: Optional[List[Label]] = Field(default=None, description="Tags of the tracker item")
    teams: Optional[List[AbstractReference]] = Field(default=None, description="Teams of a tracker item")
    tracker: Optional[TrackerReference] = None
    type_name: Optional[StrictStr] = Field(default=None, description="Type name of a tracker item", alias="typeName")
    version: Optional[StrictInt] = Field(default=None, description="Version of a tracker item")
    versions: Optional[List[AbstractReference]] = Field(default=None, description="Versions of a tracker item")
    __properties: ClassVar[List[str]] = ["accruedMillis", "areas", "assignedAt", "assignedTo", "categories", "children", "closedAt", "comments", "createdAt", "createdBy", "customFields", "description", "descriptionFormat", "endDate", "estimatedMillis", "formality", "id", "modifiedAt", "modifiedBy", "name", "ordinal", "owners", "parent", "platforms", "priority", "releaseMethod", "resolutions", "severities", "spentMillis", "startDate", "status", "storyPoints", "subjects", "tags", "teams", "tracker", "typeName", "version", "versions"]

    @field_validator('description_format')
    def description_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PlainText', 'Html', 'Wiki']):
            raise ValueError("must be one of enum values ('PlainText', 'Html', 'Wiki')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackerItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "accrued_millis",
            "assigned_at",
            "children",
            "comments",
            "tags",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in areas (list)
        _items = []
        if self.areas:
            for _item in self.areas:
                if _item:
                    _items.append(_item.to_dict())
            _dict['areas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assigned_to (list)
        _items = []
        if self.assigned_to:
            for _item in self.assigned_to:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assignedTo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item in self.categories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item in self.comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of formality
        if self.formality:
            _dict['formality'] = self.formality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_by
        if self.modified_by:
            _dict['modifiedBy'] = self.modified_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item in self.owners:
                if _item:
                    _items.append(_item.to_dict())
            _dict['owners'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in platforms (list)
        _items = []
        if self.platforms:
            for _item in self.platforms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['platforms'] = _items
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of release_method
        if self.release_method:
            _dict['releaseMethod'] = self.release_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resolutions (list)
        _items = []
        if self.resolutions:
            for _item in self.resolutions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resolutions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in severities (list)
        _items = []
        if self.severities:
            for _item in self.severities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['severities'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subjects (list)
        _items = []
        if self.subjects:
            for _item in self.subjects:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item in self.teams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['teams'] = _items
        # override the default output from pydantic by calling `to_dict()` of tracker
        if self.tracker:
            _dict['tracker'] = self.tracker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in versions (list)
        _items = []
        if self.versions:
            for _item in self.versions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['versions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackerItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accruedMillis": obj.get("accruedMillis"),
            "areas": [AbstractReference.from_dict(_item) for _item in obj["areas"]] if obj.get("areas") is not None else None,
            "assignedAt": obj.get("assignedAt"),
            "assignedTo": [AbstractReference.from_dict(_item) for _item in obj["assignedTo"]] if obj.get("assignedTo") is not None else None,
            "categories": [AbstractReference.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "children": [TrackerItemReference.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "closedAt": obj.get("closedAt"),
            "comments": [CommentReference.from_dict(_item) for _item in obj["comments"]] if obj.get("comments") is not None else None,
            "createdAt": obj.get("createdAt"),
            "createdBy": UserReference.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "customFields": [AbstractFieldValue.from_dict(_item) for _item in obj["customFields"]] if obj.get("customFields") is not None else None,
            "description": obj.get("description"),
            "descriptionFormat": obj.get("descriptionFormat"),
            "endDate": obj.get("endDate"),
            "estimatedMillis": obj.get("estimatedMillis"),
            "formality": AbstractReference.from_dict(obj["formality"]) if obj.get("formality") is not None else None,
            "id": obj.get("id"),
            "modifiedAt": obj.get("modifiedAt"),
            "modifiedBy": UserReference.from_dict(obj["modifiedBy"]) if obj.get("modifiedBy") is not None else None,
            "name": obj.get("name"),
            "ordinal": obj.get("ordinal"),
            "owners": [AbstractReference.from_dict(_item) for _item in obj["owners"]] if obj.get("owners") is not None else None,
            "parent": TrackerItemReference.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "platforms": [AbstractReference.from_dict(_item) for _item in obj["platforms"]] if obj.get("platforms") is not None else None,
            "priority": AbstractReference.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "releaseMethod": AbstractReference.from_dict(obj["releaseMethod"]) if obj.get("releaseMethod") is not None else None,
            "resolutions": [AbstractReference.from_dict(_item) for _item in obj["resolutions"]] if obj.get("resolutions") is not None else None,
            "severities": [AbstractReference.from_dict(_item) for _item in obj["severities"]] if obj.get("severities") is not None else None,
            "spentMillis": obj.get("spentMillis"),
            "startDate": obj.get("startDate"),
            "status": AbstractReference.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "storyPoints": obj.get("storyPoints"),
            "subjects": [AbstractReference.from_dict(_item) for _item in obj["subjects"]] if obj.get("subjects") is not None else None,
            "tags": [Label.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "teams": [AbstractReference.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None,
            "tracker": TrackerReference.from_dict(obj["tracker"]) if obj.get("tracker") is not None else None,
            "typeName": obj.get("typeName"),
            "version": obj.get("version"),
            "versions": [AbstractReference.from_dict(_item) for _item in obj["versions"]] if obj.get("versions") is not None else None
        })
        return _obj


