# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tracker_item_revision import TrackerItemRevision
from typing import Optional, Set
from typing_extensions import Self

class TraceabilityLevelFilter(BaseModel):
    """
    Traceability level filter
    """ # noqa: E501
    cb_ql: StrictStr = Field(description="cbQL", alias="cbQL")
    folders_and_information: Optional[StrictBool] = Field(default=False, description="Show folders and information", alias="foldersAndInformation")
    history_baseline_id: Optional[StrictInt] = Field(default=None, description="History Baseline Id - Snapshot view of the given baseline", alias="historyBaselineId")
    history_date: Optional[datetime] = Field(default=None, description="History Date - Snapshot view of the given date", alias="historyDate")
    incoming_association: Optional[StrictBool] = Field(default=True, description="Show incoming association", alias="incomingAssociation")
    incoming_reference: Optional[StrictBool] = Field(default=True, description="Show incoming references", alias="incomingReference")
    outgoing_association: Optional[StrictBool] = Field(default=True, description="Show outgoing association", alias="outgoingAssociation")
    outgoing_reference: Optional[StrictBool] = Field(default=True, description="Show outgoing references", alias="outgoingReference")
    previous_level_items: Optional[List[TrackerItemRevision]] = Field(default=None, description="Previous Level Items", alias="previousLevelItems")
    show_test_step_references: Optional[StrictBool] = Field(default=None, alias="showTestStepReferences")
    __properties: ClassVar[List[str]] = ["cbQL", "foldersAndInformation", "historyBaselineId", "historyDate", "incomingAssociation", "incomingReference", "outgoingAssociation", "outgoingReference", "previousLevelItems", "showTestStepReferences"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TraceabilityLevelFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in previous_level_items (list)
        _items = []
        if self.previous_level_items:
            for _item in self.previous_level_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['previousLevelItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TraceabilityLevelFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cbQL": obj.get("cbQL"),
            "foldersAndInformation": obj.get("foldersAndInformation") if obj.get("foldersAndInformation") is not None else False,
            "historyBaselineId": obj.get("historyBaselineId"),
            "historyDate": obj.get("historyDate"),
            "incomingAssociation": obj.get("incomingAssociation") if obj.get("incomingAssociation") is not None else True,
            "incomingReference": obj.get("incomingReference") if obj.get("incomingReference") is not None else True,
            "outgoingAssociation": obj.get("outgoingAssociation") if obj.get("outgoingAssociation") is not None else True,
            "outgoingReference": obj.get("outgoingReference") if obj.get("outgoingReference") is not None else True,
            "previousLevelItems": [TrackerItemRevision.from_dict(_item) for _item in obj["previousLevelItems"]] if obj.get("previousLevelItems") is not None else None,
            "showTestStepReferences": obj.get("showTestStepReferences")
        })
        return _obj


