# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.choice_option_reference import ChoiceOptionReference
from openapi_client.models.shared_field_reference import SharedFieldReference
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.artifact_reference_field import ArtifactReferenceField
    from openapi_client.models.bool_field import BoolField
    from openapi_client.models.color_field import ColorField
    from openapi_client.models.country_field import CountryField
    from openapi_client.models.date_field import DateField
    from openapi_client.models.decimal_field import DecimalField
    from openapi_client.models.duration_field import DurationField
    from openapi_client.models.integer_field import IntegerField
    from openapi_client.models.language_field import LanguageField
    from openapi_client.models.member_field import MemberField
    from openapi_client.models.option_choice_field import OptionChoiceField
    from openapi_client.models.project_choice_field import ProjectChoiceField
    from openapi_client.models.reference_field import ReferenceField
    from openapi_client.models.repository_choice_field import RepositoryChoiceField
    from openapi_client.models.review_member_reference_field import ReviewMemberReferenceField
    from openapi_client.models.table_field import TableField
    from openapi_client.models.text_field import TextField
    from openapi_client.models.tracker_choice_field import TrackerChoiceField
    from openapi_client.models.tracker_item_choice_field import TrackerItemChoiceField
    from openapi_client.models.url_field import UrlField
    from openapi_client.models.user_choice_field import UserChoiceField
    from openapi_client.models.wiki_text_field import WikiTextField

class AbstractField(BaseModel):
    """
    Abstract field
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of a field")
    formula: Optional[StrictStr] = Field(default=None, description="Formula value of a field")
    hidden: Optional[StrictBool] = Field(default=None, description="Visibility status of a field")
    hide_if_dependency_formula: Optional[StrictStr] = Field(default=None, description="Hide If dependency formula value of a field", alias="hideIfDependencyFormula")
    id: Optional[StrictInt] = Field(default=None, description="Id of a field")
    legacy_rest_name: Optional[StrictStr] = Field(default=None, description="Identifier matching the legacy REST API naming", alias="legacyRestName")
    mandatory_if_dependency_formula: Optional[StrictStr] = Field(default=None, description="Mandatory If dependency formula value of a field", alias="mandatoryIfDependencyFormula")
    mandatory_in_statuses: Optional[List[ChoiceOptionReference]] = Field(default=None, description="List of statuses where the field is mandatory.", alias="mandatoryInStatuses")
    name: Optional[StrictStr] = Field(default=None, description="Name of a field")
    shared_fields: Optional[List[SharedFieldReference]] = Field(default=None, description="List of shared fields assigned to this field", alias="sharedFields")
    title: Optional[StrictStr] = Field(default=None, description="Title of a field")
    tracker_item_field: Optional[StrictStr] = Field(default=None, description="Tracker item's field name for this field", alias="trackerItemField")
    type: Optional[StrictStr] = Field(default=None, description="Type of a field")
    value_model: Optional[StrictStr] = Field(default=None, description="Name of the updater/getter value model", alias="valueModel")
    __properties: ClassVar[List[str]] = ["description", "formula", "hidden", "hideIfDependencyFormula", "id", "legacyRestName", "mandatoryIfDependencyFormula", "mandatoryInStatuses", "name", "sharedFields", "title", "trackerItemField", "type", "valueModel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArtifactReferenceField': 'ArtifactReferenceField','BoolField': 'BoolField','ColorField': 'ColorField','CountryField': 'CountryField','DateField': 'DateField','DecimalField': 'DecimalField','DurationField': 'DurationField','IntegerField': 'IntegerField','LanguageField': 'LanguageField','MemberField': 'MemberField','OptionChoiceField': 'OptionChoiceField','ProjectChoiceField': 'ProjectChoiceField','ReferenceField': 'ReferenceField','RepositoryChoiceField': 'RepositoryChoiceField','ReviewMemberReferenceField': 'ReviewMemberReferenceField','TableField': 'TableField','TextField': 'TextField','TrackerChoiceField': 'TrackerChoiceField','TrackerItemChoiceField': 'TrackerItemChoiceField','UrlField': 'UrlField','UserChoiceField': 'UserChoiceField','WikiTextField': 'WikiTextField'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ArtifactReferenceField, BoolField, ColorField, CountryField, DateField, DecimalField, DurationField, IntegerField, LanguageField, MemberField, OptionChoiceField, ProjectChoiceField, ReferenceField, RepositoryChoiceField, ReviewMemberReferenceField, TableField, TextField, TrackerChoiceField, TrackerItemChoiceField, UrlField, UserChoiceField, WikiTextField]]:
        """Create an instance of AbstractField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mandatory_in_statuses (list)
        _items = []
        if self.mandatory_in_statuses:
            for _item in self.mandatory_in_statuses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mandatoryInStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shared_fields (list)
        _items = []
        if self.shared_fields:
            for _item in self.shared_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sharedFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ArtifactReferenceField, BoolField, ColorField, CountryField, DateField, DecimalField, DurationField, IntegerField, LanguageField, MemberField, OptionChoiceField, ProjectChoiceField, ReferenceField, RepositoryChoiceField, ReviewMemberReferenceField, TableField, TextField, TrackerChoiceField, TrackerItemChoiceField, UrlField, UserChoiceField, WikiTextField]]:
        """Create an instance of AbstractField from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ArtifactReferenceField':
            return import_module("openapi_client.models.artifact_reference_field").ArtifactReferenceField.from_dict(obj)
        if object_type ==  'BoolField':
            return import_module("openapi_client.models.bool_field").BoolField.from_dict(obj)
        if object_type ==  'ColorField':
            return import_module("openapi_client.models.color_field").ColorField.from_dict(obj)
        if object_type ==  'CountryField':
            return import_module("openapi_client.models.country_field").CountryField.from_dict(obj)
        if object_type ==  'DateField':
            return import_module("openapi_client.models.date_field").DateField.from_dict(obj)
        if object_type ==  'DecimalField':
            return import_module("openapi_client.models.decimal_field").DecimalField.from_dict(obj)
        if object_type ==  'DurationField':
            return import_module("openapi_client.models.duration_field").DurationField.from_dict(obj)
        if object_type ==  'IntegerField':
            return import_module("openapi_client.models.integer_field").IntegerField.from_dict(obj)
        if object_type ==  'LanguageField':
            return import_module("openapi_client.models.language_field").LanguageField.from_dict(obj)
        if object_type ==  'MemberField':
            return import_module("openapi_client.models.member_field").MemberField.from_dict(obj)
        if object_type ==  'OptionChoiceField':
            return import_module("openapi_client.models.option_choice_field").OptionChoiceField.from_dict(obj)
        if object_type ==  'ProjectChoiceField':
            return import_module("openapi_client.models.project_choice_field").ProjectChoiceField.from_dict(obj)
        if object_type ==  'ReferenceField':
            return import_module("openapi_client.models.reference_field").ReferenceField.from_dict(obj)
        if object_type ==  'RepositoryChoiceField':
            return import_module("openapi_client.models.repository_choice_field").RepositoryChoiceField.from_dict(obj)
        if object_type ==  'ReviewMemberReferenceField':
            return import_module("openapi_client.models.review_member_reference_field").ReviewMemberReferenceField.from_dict(obj)
        if object_type ==  'TableField':
            return import_module("openapi_client.models.table_field").TableField.from_dict(obj)
        if object_type ==  'TextField':
            return import_module("openapi_client.models.text_field").TextField.from_dict(obj)
        if object_type ==  'TrackerChoiceField':
            return import_module("openapi_client.models.tracker_choice_field").TrackerChoiceField.from_dict(obj)
        if object_type ==  'TrackerItemChoiceField':
            return import_module("openapi_client.models.tracker_item_choice_field").TrackerItemChoiceField.from_dict(obj)
        if object_type ==  'UrlField':
            return import_module("openapi_client.models.url_field").UrlField.from_dict(obj)
        if object_type ==  'UserChoiceField':
            return import_module("openapi_client.models.user_choice_field").UserChoiceField.from_dict(obj)
        if object_type ==  'WikiTextField':
            return import_module("openapi_client.models.wiki_text_field").WikiTextField.from_dict(obj)

        raise ValueError("AbstractField failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


