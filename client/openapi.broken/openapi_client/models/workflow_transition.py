# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.access_permission import AccessPermission
from openapi_client.models.choice_option_reference import ChoiceOptionReference
from typing import Optional, Set
from typing_extensions import Self

class WorkflowTransition(BaseModel):
    """
    A transition in the workflow
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the entity")
    description_format: Optional[StrictStr] = Field(default=None, description="Description format of the entity", alias="descriptionFormat")
    from_status: Optional[ChoiceOptionReference] = Field(default=None, alias="fromStatus")
    hidden: Optional[StrictBool] = Field(default=None, description="Indicator if the transition is hidden")
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Id of the entity")
    name: Optional[StrictStr] = Field(default=None, description="Name of the entity")
    permissions: Optional[List[AccessPermission]] = Field(default=None, description="Access permissions of the transition")
    to_status: ChoiceOptionReference = Field(alias="toStatus")
    __properties: ClassVar[List[str]] = ["description", "descriptionFormat", "fromStatus", "hidden", "id", "name", "permissions", "toStatus"]

    @field_validator('description_format')
    def description_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PlainText', 'Html', 'Wiki']):
            raise ValueError("must be one of enum values ('PlainText', 'Html', 'Wiki')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowTransition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of from_status
        if self.from_status:
            _dict['fromStatus'] = self.from_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item in self.permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of to_status
        if self.to_status:
            _dict['toStatus'] = self.to_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowTransition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "descriptionFormat": obj.get("descriptionFormat"),
            "fromStatus": ChoiceOptionReference.from_dict(obj["fromStatus"]) if obj.get("fromStatus") is not None else None,
            "hidden": obj.get("hidden"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "permissions": [AccessPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "toStatus": ChoiceOptionReference.from_dict(obj["toStatus"]) if obj.get("toStatus") is not None else None
        })
        return _obj


