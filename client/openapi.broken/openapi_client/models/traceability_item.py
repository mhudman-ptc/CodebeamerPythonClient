# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tracker_item_revision import TrackerItemRevision
from typing import Optional, Set
from typing_extensions import Self

class TraceabilityItem(BaseModel):
    """
    Traceability Item
    """ # noqa: E501
    children: Optional[List[TraceabilityItem]] = Field(default=None, description="children")
    incoming_association: Optional[List[TrackerItemRevision]] = Field(default=None, alias="incoming association")
    incoming_reference: Optional[List[TrackerItemRevision]] = Field(default=None, alias="incoming reference")
    incoming_associations: Optional[List[TrackerItemRevision]] = Field(default=None, description="incoming associations", alias="incomingAssociations")
    incoming_references: Optional[List[TrackerItemRevision]] = Field(default=None, description="incoming references", alias="incomingReferences")
    item_revision: Optional[TrackerItemRevision] = Field(default=None, alias="itemRevision")
    outgoing_association: Optional[List[TrackerItemRevision]] = Field(default=None, alias="outgoing association")
    outgoing_reference: Optional[List[TrackerItemRevision]] = Field(default=None, alias="outgoing reference")
    outgoing_associations: Optional[List[TrackerItemRevision]] = Field(default=None, description="outgoing association", alias="outgoingAssociations")
    outgoing_references: Optional[List[TrackerItemRevision]] = Field(default=None, description="outgoing reference", alias="outgoingReferences")
    __properties: ClassVar[List[str]] = ["children", "incoming association", "incoming reference", "incomingAssociations", "incomingReferences", "itemRevision", "outgoing association", "outgoing reference", "outgoingAssociations", "outgoingReferences"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TraceabilityItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in incoming_association (list)
        _items = []
        if self.incoming_association:
            for _item in self.incoming_association:
                if _item:
                    _items.append(_item.to_dict())
            _dict['incoming association'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in incoming_reference (list)
        _items = []
        if self.incoming_reference:
            for _item in self.incoming_reference:
                if _item:
                    _items.append(_item.to_dict())
            _dict['incoming reference'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in incoming_associations (list)
        _items = []
        if self.incoming_associations:
            for _item in self.incoming_associations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['incomingAssociations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in incoming_references (list)
        _items = []
        if self.incoming_references:
            for _item in self.incoming_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['incomingReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of item_revision
        if self.item_revision:
            _dict['itemRevision'] = self.item_revision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in outgoing_association (list)
        _items = []
        if self.outgoing_association:
            for _item in self.outgoing_association:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outgoing association'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outgoing_reference (list)
        _items = []
        if self.outgoing_reference:
            for _item in self.outgoing_reference:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outgoing reference'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outgoing_associations (list)
        _items = []
        if self.outgoing_associations:
            for _item in self.outgoing_associations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outgoingAssociations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outgoing_references (list)
        _items = []
        if self.outgoing_references:
            for _item in self.outgoing_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outgoingReferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TraceabilityItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "children": [TraceabilityItem.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "incoming association": [TrackerItemRevision.from_dict(_item) for _item in obj["incoming association"]] if obj.get("incoming association") is not None else None,
            "incoming reference": [TrackerItemRevision.from_dict(_item) for _item in obj["incoming reference"]] if obj.get("incoming reference") is not None else None,
            "incomingAssociations": [TrackerItemRevision.from_dict(_item) for _item in obj["incomingAssociations"]] if obj.get("incomingAssociations") is not None else None,
            "incomingReferences": [TrackerItemRevision.from_dict(_item) for _item in obj["incomingReferences"]] if obj.get("incomingReferences") is not None else None,
            "itemRevision": TrackerItemRevision.from_dict(obj["itemRevision"]) if obj.get("itemRevision") is not None else None,
            "outgoing association": [TrackerItemRevision.from_dict(_item) for _item in obj["outgoing association"]] if obj.get("outgoing association") is not None else None,
            "outgoing reference": [TrackerItemRevision.from_dict(_item) for _item in obj["outgoing reference"]] if obj.get("outgoing reference") is not None else None,
            "outgoingAssociations": [TrackerItemRevision.from_dict(_item) for _item in obj["outgoingAssociations"]] if obj.get("outgoingAssociations") is not None else None,
            "outgoingReferences": [TrackerItemRevision.from_dict(_item) for _item in obj["outgoingReferences"]] if obj.get("outgoingReferences") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
TraceabilityItem.model_rebuild(raise_errors=False)

