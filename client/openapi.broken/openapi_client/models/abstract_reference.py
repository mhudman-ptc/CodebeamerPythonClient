# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.artifact_reference import ArtifactReference
    from openapi_client.models.association_type_reference import AssociationTypeReference
    from openapi_client.models.attachment_reference import AttachmentReference
    from openapi_client.models.branch_reference import BranchReference
    from openapi_client.models.choice_option_reference import ChoiceOptionReference
    from openapi_client.models.comment_reference import CommentReference
    from openapi_client.models.dependency_entity_reference import DependencyEntityReference
    from openapi_client.models.field_reference import FieldReference
    from openapi_client.models.project_baseline_reference import ProjectBaselineReference
    from openapi_client.models.project_reference import ProjectReference
    from openapi_client.models.project_role_reference import ProjectRoleReference
    from openapi_client.models.report_reference import ReportReference
    from openapi_client.models.repository_reference import RepositoryReference
    from openapi_client.models.role_reference import RoleReference
    from openapi_client.models.shared_field_reference import SharedFieldReference
    from openapi_client.models.tracker_baseline_reference import TrackerBaselineReference
    from openapi_client.models.tracker_item_reference import TrackerItemReference
    from openapi_client.models.tracker_permission_reference import TrackerPermissionReference
    from openapi_client.models.tracker_reference import TrackerReference
    from openapi_client.models.tracker_type_reference import TrackerTypeReference
    from openapi_client.models.user_group_reference import UserGroupReference
    from openapi_client.models.user_reference import UserReference
    from openapi_client.models.wiki_page_reference import WikiPageReference
    from openapi_client.models.working_set_reference import WorkingSetReference

class AbstractReference(BaseModel):
    """
    Reference to an item
    """ # noqa: E501
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Id of the entity")
    name: Optional[StrictStr] = Field(default=None, description="Name of the entity")
    type: Optional[StrictStr] = Field(default=None, description="Type of a referenced object")
    __properties: ClassVar[List[str]] = ["id", "name", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArtifactReference': 'ArtifactReference','AssociationTypeReference': 'AssociationTypeReference','AttachmentReference': 'AttachmentReference','BranchReference': 'BranchReference','ChoiceOptionReference': 'ChoiceOptionReference','CommentReference': 'CommentReference','DependencyEntityReference': 'DependencyEntityReference','FieldReference': 'FieldReference','ProjectBaselineReference': 'ProjectBaselineReference','ProjectReference': 'ProjectReference','ProjectRoleReference': 'ProjectRoleReference','ReportReference': 'ReportReference','RepositoryReference': 'RepositoryReference','RoleReference': 'RoleReference','SharedFieldReference': 'SharedFieldReference','TrackerBaselineReference': 'TrackerBaselineReference','TrackerItemReference': 'TrackerItemReference','TrackerPermissionReference': 'TrackerPermissionReference','TrackerReference': 'TrackerReference','TrackerTypeReference': 'TrackerTypeReference','UserGroupReference': 'UserGroupReference','UserReference': 'UserReference','WikiPageReference': 'WikiPageReference','WorkingSetReference': 'WorkingSetReference'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ArtifactReference, AssociationTypeReference, AttachmentReference, BranchReference, ChoiceOptionReference, CommentReference, DependencyEntityReference, FieldReference, ProjectBaselineReference, ProjectReference, ProjectRoleReference, ReportReference, RepositoryReference, RoleReference, SharedFieldReference, TrackerBaselineReference, TrackerItemReference, TrackerPermissionReference, TrackerReference, TrackerTypeReference, UserGroupReference, UserReference, WikiPageReference, WorkingSetReference]]:
        """Create an instance of AbstractReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ArtifactReference, AssociationTypeReference, AttachmentReference, BranchReference, ChoiceOptionReference, CommentReference, DependencyEntityReference, FieldReference, ProjectBaselineReference, ProjectReference, ProjectRoleReference, ReportReference, RepositoryReference, RoleReference, SharedFieldReference, TrackerBaselineReference, TrackerItemReference, TrackerPermissionReference, TrackerReference, TrackerTypeReference, UserGroupReference, UserReference, WikiPageReference, WorkingSetReference]]:
        """Create an instance of AbstractReference from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ArtifactReference':
            return import_module("openapi_client.models.artifact_reference").ArtifactReference.from_dict(obj)
        if object_type ==  'AssociationTypeReference':
            return import_module("openapi_client.models.association_type_reference").AssociationTypeReference.from_dict(obj)
        if object_type ==  'AttachmentReference':
            return import_module("openapi_client.models.attachment_reference").AttachmentReference.from_dict(obj)
        if object_type ==  'BranchReference':
            return import_module("openapi_client.models.branch_reference").BranchReference.from_dict(obj)
        if object_type ==  'ChoiceOptionReference':
            return import_module("openapi_client.models.choice_option_reference").ChoiceOptionReference.from_dict(obj)
        if object_type ==  'CommentReference':
            return import_module("openapi_client.models.comment_reference").CommentReference.from_dict(obj)
        if object_type ==  'DependencyEntityReference':
            return import_module("openapi_client.models.dependency_entity_reference").DependencyEntityReference.from_dict(obj)
        if object_type ==  'FieldReference':
            return import_module("openapi_client.models.field_reference").FieldReference.from_dict(obj)
        if object_type ==  'ProjectBaselineReference':
            return import_module("openapi_client.models.project_baseline_reference").ProjectBaselineReference.from_dict(obj)
        if object_type ==  'ProjectReference':
            return import_module("openapi_client.models.project_reference").ProjectReference.from_dict(obj)
        if object_type ==  'ProjectRoleReference':
            return import_module("openapi_client.models.project_role_reference").ProjectRoleReference.from_dict(obj)
        if object_type ==  'ReportReference':
            return import_module("openapi_client.models.report_reference").ReportReference.from_dict(obj)
        if object_type ==  'RepositoryReference':
            return import_module("openapi_client.models.repository_reference").RepositoryReference.from_dict(obj)
        if object_type ==  'RoleReference':
            return import_module("openapi_client.models.role_reference").RoleReference.from_dict(obj)
        if object_type ==  'SharedFieldReference':
            return import_module("openapi_client.models.shared_field_reference").SharedFieldReference.from_dict(obj)
        if object_type ==  'TrackerBaselineReference':
            return import_module("openapi_client.models.tracker_baseline_reference").TrackerBaselineReference.from_dict(obj)
        if object_type ==  'TrackerItemReference':
            return import_module("openapi_client.models.tracker_item_reference").TrackerItemReference.from_dict(obj)
        if object_type ==  'TrackerPermissionReference':
            return import_module("openapi_client.models.tracker_permission_reference").TrackerPermissionReference.from_dict(obj)
        if object_type ==  'TrackerReference':
            return import_module("openapi_client.models.tracker_reference").TrackerReference.from_dict(obj)
        if object_type ==  'TrackerTypeReference':
            return import_module("openapi_client.models.tracker_type_reference").TrackerTypeReference.from_dict(obj)
        if object_type ==  'UserGroupReference':
            return import_module("openapi_client.models.user_group_reference").UserGroupReference.from_dict(obj)
        if object_type ==  'UserReference':
            return import_module("openapi_client.models.user_reference").UserReference.from_dict(obj)
        if object_type ==  'WikiPageReference':
            return import_module("openapi_client.models.wiki_page_reference").WikiPageReference.from_dict(obj)
        if object_type ==  'WorkingSetReference':
            return import_module("openapi_client.models.working_set_reference").WorkingSetReference.from_dict(obj)

        raise ValueError("AbstractReference failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


