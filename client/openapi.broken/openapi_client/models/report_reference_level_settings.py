# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.report_column_settings import ReportColumnSettings
from openapi_client.models.tracker_reference import TrackerReference
from openapi_client.models.tracker_type_reference import TrackerTypeReference
from typing import Optional, Set
from typing_extensions import Self

class ReportReferenceLevelSettings(BaseModel):
    """
    Reference level settings for Intelligent Table View.
    """ # noqa: E501
    columns: List[ReportColumnSettings] = Field(description="Columns to show on this reference level.")
    downstream_reference: StrictBool = Field(description="Include downstream references indicator.", alias="downstreamReference")
    level: Annotated[int, Field(strict=True, ge=1)] = Field(description="Level of the reference layer")
    reference_tracker_types: Optional[List[TrackerTypeReference]] = Field(default=None, description="Tracker types to include on this level.", alias="referenceTrackerTypes")
    reference_trackers: Optional[List[TrackerReference]] = Field(default=None, description="Trackers to include on this level.", alias="referenceTrackers")
    upstream_reference: StrictBool = Field(description="Include upstream references indicator.", alias="upstreamReference")
    __properties: ClassVar[List[str]] = ["columns", "downstreamReference", "level", "referenceTrackerTypes", "referenceTrackers", "upstreamReference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportReferenceLevelSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item in self.columns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['columns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reference_tracker_types (list)
        _items = []
        if self.reference_tracker_types:
            for _item in self.reference_tracker_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['referenceTrackerTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reference_trackers (list)
        _items = []
        if self.reference_trackers:
            for _item in self.reference_trackers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['referenceTrackers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportReferenceLevelSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columns": [ReportColumnSettings.from_dict(_item) for _item in obj["columns"]] if obj.get("columns") is not None else None,
            "downstreamReference": obj.get("downstreamReference"),
            "level": obj.get("level"),
            "referenceTrackerTypes": [TrackerTypeReference.from_dict(_item) for _item in obj["referenceTrackerTypes"]] if obj.get("referenceTrackerTypes") is not None else None,
            "referenceTrackers": [TrackerReference.from_dict(_item) for _item in obj["referenceTrackers"]] if obj.get("referenceTrackers") is not None else None,
            "upstreamReference": obj.get("upstreamReference")
        })
        return _obj


