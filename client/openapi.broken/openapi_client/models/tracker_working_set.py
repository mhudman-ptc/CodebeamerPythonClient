# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.branch_reference import BranchReference
from openapi_client.models.tracker_baseline_reference import TrackerBaselineReference
from openapi_client.models.user_reference import UserReference
from openapi_client.models.working_set_reference import WorkingSetReference
from typing import Optional, Set
from typing_extensions import Self

class TrackerWorkingSet(BaseModel):
    """
    Working-Set information where the Tracker exists
    """ # noqa: E501
    baseline: Optional[TrackerBaselineReference] = None
    branch: Optional[BranchReference] = None
    created_at: Optional[datetime] = Field(default=None, description="The date when the entity was created", alias="createdAt")
    created_by: Optional[UserReference] = Field(default=None, alias="createdBy")
    deleted: Optional[StrictBool] = Field(default=None, description="Is the Working-Set deleted or not")
    shared_in_working_set: Optional[StrictBool] = Field(default=None, description="The Tracker is shared in Working-Set", alias="sharedInWorkingSet")
    working_set: Optional[WorkingSetReference] = Field(default=None, alias="workingSet")
    __properties: ClassVar[List[str]] = ["baseline", "branch", "createdAt", "createdBy", "deleted", "sharedInWorkingSet", "workingSet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackerWorkingSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of baseline
        if self.baseline:
            _dict['baseline'] = self.baseline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of branch
        if self.branch:
            _dict['branch'] = self.branch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of working_set
        if self.working_set:
            _dict['workingSet'] = self.working_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackerWorkingSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseline": TrackerBaselineReference.from_dict(obj["baseline"]) if obj.get("baseline") is not None else None,
            "branch": BranchReference.from_dict(obj["branch"]) if obj.get("branch") is not None else None,
            "createdAt": obj.get("createdAt"),
            "createdBy": UserReference.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "deleted": obj.get("deleted"),
            "sharedInWorkingSet": obj.get("sharedInWorkingSet"),
            "workingSet": WorkingSetReference.from_dict(obj["workingSet"]) if obj.get("workingSet") is not None else None
        })
        return _obj


