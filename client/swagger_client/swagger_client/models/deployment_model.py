# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeploymentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'import_tracker_hierarchy': 'bool',
        'imports': 'str',
        'password': 'str',
        'skip_refresh_computed_fields': 'bool'
    }

    attribute_map = {
        'import_tracker_hierarchy': 'importTrackerHierarchy',
        'imports': 'imports',
        'password': 'password',
        'skip_refresh_computed_fields': 'skipRefreshComputedFields'
    }

    def __init__(self, import_tracker_hierarchy=None, imports=None, password=None, skip_refresh_computed_fields=None):  # noqa: E501
        """DeploymentModel - a model defined in Swagger"""  # noqa: E501
        self._import_tracker_hierarchy = None
        self._imports = None
        self._password = None
        self._skip_refresh_computed_fields = None
        self.discriminator = None
        if import_tracker_hierarchy is not None:
            self.import_tracker_hierarchy = import_tracker_hierarchy
        self.imports = imports
        if password is not None:
            self.password = password
        if skip_refresh_computed_fields is not None:
            self.skip_refresh_computed_fields = skip_refresh_computed_fields

    @property
    def import_tracker_hierarchy(self):
        """Gets the import_tracker_hierarchy of this DeploymentModel.  # noqa: E501

        Import tracker inheritance. This is controlled by Application Configuration. Can be true if this configuration is enabled.  # noqa: E501

        :return: The import_tracker_hierarchy of this DeploymentModel.  # noqa: E501
        :rtype: bool
        """
        return self._import_tracker_hierarchy

    @import_tracker_hierarchy.setter
    def import_tracker_hierarchy(self, import_tracker_hierarchy):
        """Sets the import_tracker_hierarchy of this DeploymentModel.

        Import tracker inheritance. This is controlled by Application Configuration. Can be true if this configuration is enabled.  # noqa: E501

        :param import_tracker_hierarchy: The import_tracker_hierarchy of this DeploymentModel.  # noqa: E501
        :type: bool
        """

        self._import_tracker_hierarchy = import_tracker_hierarchy

    @property
    def imports(self):
        """Gets the imports of this DeploymentModel.  # noqa: E501

        Deployment files  # noqa: E501

        :return: The imports of this DeploymentModel.  # noqa: E501
        :rtype: str
        """
        return self._imports

    @imports.setter
    def imports(self, imports):
        """Sets the imports of this DeploymentModel.

        Deployment files  # noqa: E501

        :param imports: The imports of this DeploymentModel.  # noqa: E501
        :type: str
        """
        if imports is None:
            raise ValueError("Invalid value for `imports`, must not be `None`")  # noqa: E501

        self._imports = imports

    @property
    def password(self):
        """Gets the password of this DeploymentModel.  # noqa: E501

        Import file password  # noqa: E501

        :return: The password of this DeploymentModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DeploymentModel.

        Import file password  # noqa: E501

        :param password: The password of this DeploymentModel.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def skip_refresh_computed_fields(self):
        """Gets the skip_refresh_computed_fields of this DeploymentModel.  # noqa: E501

        Skip refresh computed fields on tracker items  # noqa: E501

        :return: The skip_refresh_computed_fields of this DeploymentModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_refresh_computed_fields

    @skip_refresh_computed_fields.setter
    def skip_refresh_computed_fields(self, skip_refresh_computed_fields):
        """Sets the skip_refresh_computed_fields of this DeploymentModel.

        Skip refresh computed fields on tracker items  # noqa: E501

        :param skip_refresh_computed_fields: The skip_refresh_computed_fields of this DeploymentModel.  # noqa: E501
        :type: bool
        """

        self._skip_refresh_computed_fields = skip_refresh_computed_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
