# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbstractField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'formula': 'str',
        'hidden': 'bool',
        'hide_if_dependency_formula': 'str',
        'id': 'int',
        'legacy_rest_name': 'str',
        'mandatory_if_dependency_formula': 'str',
        'mandatory_in_statuses': 'list[ChoiceOptionReference]',
        'name': 'str',
        'shared_fields': 'list[SharedFieldReference]',
        'title': 'str',
        'tracker_item_field': 'str',
        'type': 'str',
        'value_model': 'str'
    }

    attribute_map = {
        'description': 'description',
        'formula': 'formula',
        'hidden': 'hidden',
        'hide_if_dependency_formula': 'hideIfDependencyFormula',
        'id': 'id',
        'legacy_rest_name': 'legacyRestName',
        'mandatory_if_dependency_formula': 'mandatoryIfDependencyFormula',
        'mandatory_in_statuses': 'mandatoryInStatuses',
        'name': 'name',
        'shared_fields': 'sharedFields',
        'title': 'title',
        'tracker_item_field': 'trackerItemField',
        'type': 'type',
        'value_model': 'valueModel'
    }

    discriminator_value_class_map = {
          'DecimalField': 'DecimalField',
'TableField': 'TableField',
'ArtifactReferenceField': 'ArtifactReferenceField',
'TrackerItemChoiceField': 'TrackerItemChoiceField',
'UrlField': 'UrlField',
'BoolField': 'BoolField',
'RepositoryChoiceField': 'RepositoryChoiceField',
'MemberField': 'MemberField',
'OptionChoiceField': 'OptionChoiceField',
'DateField': 'DateField',
'ProjectChoiceField': 'ProjectChoiceField',
'ReferenceField': 'ReferenceField',
'ColorField': 'ColorField',
'DurationField': 'DurationField',
'IntegerField': 'IntegerField',
'UserChoiceField': 'UserChoiceField',
'CountryField': 'CountryField',
'WikiTextField': 'WikiTextField',
'TextField': 'TextField',
'LanguageField': 'LanguageField',
'ReviewMemberReferenceField': 'ReviewMemberReferenceField',
'TrackerChoiceField': 'TrackerChoiceField'    }

    def __init__(self, description=None, formula=None, hidden=None, hide_if_dependency_formula=None, id=None, legacy_rest_name=None, mandatory_if_dependency_formula=None, mandatory_in_statuses=None, name=None, shared_fields=None, title=None, tracker_item_field=None, type=None, value_model=None):  # noqa: E501
        """AbstractField - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._formula = None
        self._hidden = None
        self._hide_if_dependency_formula = None
        self._id = None
        self._legacy_rest_name = None
        self._mandatory_if_dependency_formula = None
        self._mandatory_in_statuses = None
        self._name = None
        self._shared_fields = None
        self._title = None
        self._tracker_item_field = None
        self._type = None
        self._value_model = None
        self.discriminator = 'type'
        if description is not None:
            self.description = description
        if formula is not None:
            self.formula = formula
        if hidden is not None:
            self.hidden = hidden
        if hide_if_dependency_formula is not None:
            self.hide_if_dependency_formula = hide_if_dependency_formula
        if id is not None:
            self.id = id
        if legacy_rest_name is not None:
            self.legacy_rest_name = legacy_rest_name
        if mandatory_if_dependency_formula is not None:
            self.mandatory_if_dependency_formula = mandatory_if_dependency_formula
        if mandatory_in_statuses is not None:
            self.mandatory_in_statuses = mandatory_in_statuses
        if name is not None:
            self.name = name
        if shared_fields is not None:
            self.shared_fields = shared_fields
        if title is not None:
            self.title = title
        if tracker_item_field is not None:
            self.tracker_item_field = tracker_item_field
        if type is not None:
            self.type = type
        if value_model is not None:
            self.value_model = value_model

    @property
    def description(self):
        """Gets the description of this AbstractField.  # noqa: E501

        Description of a field  # noqa: E501

        :return: The description of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AbstractField.

        Description of a field  # noqa: E501

        :param description: The description of this AbstractField.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def formula(self):
        """Gets the formula of this AbstractField.  # noqa: E501

        Formula value of a field  # noqa: E501

        :return: The formula of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this AbstractField.

        Formula value of a field  # noqa: E501

        :param formula: The formula of this AbstractField.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def hidden(self):
        """Gets the hidden of this AbstractField.  # noqa: E501

        Visibility status of a field  # noqa: E501

        :return: The hidden of this AbstractField.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AbstractField.

        Visibility status of a field  # noqa: E501

        :param hidden: The hidden of this AbstractField.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def hide_if_dependency_formula(self):
        """Gets the hide_if_dependency_formula of this AbstractField.  # noqa: E501

        Hide If dependency formula value of a field  # noqa: E501

        :return: The hide_if_dependency_formula of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._hide_if_dependency_formula

    @hide_if_dependency_formula.setter
    def hide_if_dependency_formula(self, hide_if_dependency_formula):
        """Sets the hide_if_dependency_formula of this AbstractField.

        Hide If dependency formula value of a field  # noqa: E501

        :param hide_if_dependency_formula: The hide_if_dependency_formula of this AbstractField.  # noqa: E501
        :type: str
        """

        self._hide_if_dependency_formula = hide_if_dependency_formula

    @property
    def id(self):
        """Gets the id of this AbstractField.  # noqa: E501

        Id of a field  # noqa: E501

        :return: The id of this AbstractField.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbstractField.

        Id of a field  # noqa: E501

        :param id: The id of this AbstractField.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def legacy_rest_name(self):
        """Gets the legacy_rest_name of this AbstractField.  # noqa: E501

        Identifier matching the legacy REST API naming  # noqa: E501

        :return: The legacy_rest_name of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._legacy_rest_name

    @legacy_rest_name.setter
    def legacy_rest_name(self, legacy_rest_name):
        """Sets the legacy_rest_name of this AbstractField.

        Identifier matching the legacy REST API naming  # noqa: E501

        :param legacy_rest_name: The legacy_rest_name of this AbstractField.  # noqa: E501
        :type: str
        """

        self._legacy_rest_name = legacy_rest_name

    @property
    def mandatory_if_dependency_formula(self):
        """Gets the mandatory_if_dependency_formula of this AbstractField.  # noqa: E501

        Mandatory If dependency formula value of a field  # noqa: E501

        :return: The mandatory_if_dependency_formula of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._mandatory_if_dependency_formula

    @mandatory_if_dependency_formula.setter
    def mandatory_if_dependency_formula(self, mandatory_if_dependency_formula):
        """Sets the mandatory_if_dependency_formula of this AbstractField.

        Mandatory If dependency formula value of a field  # noqa: E501

        :param mandatory_if_dependency_formula: The mandatory_if_dependency_formula of this AbstractField.  # noqa: E501
        :type: str
        """

        self._mandatory_if_dependency_formula = mandatory_if_dependency_formula

    @property
    def mandatory_in_statuses(self):
        """Gets the mandatory_in_statuses of this AbstractField.  # noqa: E501

        List of statuses where the field is mandatory.  # noqa: E501

        :return: The mandatory_in_statuses of this AbstractField.  # noqa: E501
        :rtype: list[ChoiceOptionReference]
        """
        return self._mandatory_in_statuses

    @mandatory_in_statuses.setter
    def mandatory_in_statuses(self, mandatory_in_statuses):
        """Sets the mandatory_in_statuses of this AbstractField.

        List of statuses where the field is mandatory.  # noqa: E501

        :param mandatory_in_statuses: The mandatory_in_statuses of this AbstractField.  # noqa: E501
        :type: list[ChoiceOptionReference]
        """

        self._mandatory_in_statuses = mandatory_in_statuses

    @property
    def name(self):
        """Gets the name of this AbstractField.  # noqa: E501

        Name of a field  # noqa: E501

        :return: The name of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AbstractField.

        Name of a field  # noqa: E501

        :param name: The name of this AbstractField.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def shared_fields(self):
        """Gets the shared_fields of this AbstractField.  # noqa: E501

        List of shared fields assigned to this field  # noqa: E501

        :return: The shared_fields of this AbstractField.  # noqa: E501
        :rtype: list[SharedFieldReference]
        """
        return self._shared_fields

    @shared_fields.setter
    def shared_fields(self, shared_fields):
        """Sets the shared_fields of this AbstractField.

        List of shared fields assigned to this field  # noqa: E501

        :param shared_fields: The shared_fields of this AbstractField.  # noqa: E501
        :type: list[SharedFieldReference]
        """

        self._shared_fields = shared_fields

    @property
    def title(self):
        """Gets the title of this AbstractField.  # noqa: E501

        Title of a field  # noqa: E501

        :return: The title of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AbstractField.

        Title of a field  # noqa: E501

        :param title: The title of this AbstractField.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def tracker_item_field(self):
        """Gets the tracker_item_field of this AbstractField.  # noqa: E501

        Tracker item's field name for this field  # noqa: E501

        :return: The tracker_item_field of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._tracker_item_field

    @tracker_item_field.setter
    def tracker_item_field(self, tracker_item_field):
        """Sets the tracker_item_field of this AbstractField.

        Tracker item's field name for this field  # noqa: E501

        :param tracker_item_field: The tracker_item_field of this AbstractField.  # noqa: E501
        :type: str
        """

        self._tracker_item_field = tracker_item_field

    @property
    def type(self):
        """Gets the type of this AbstractField.  # noqa: E501

        Type of a field  # noqa: E501

        :return: The type of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbstractField.

        Type of a field  # noqa: E501

        :param type: The type of this AbstractField.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value_model(self):
        """Gets the value_model of this AbstractField.  # noqa: E501

        Name of the updater/getter value model  # noqa: E501

        :return: The value_model of this AbstractField.  # noqa: E501
        :rtype: str
        """
        return self._value_model

    @value_model.setter
    def value_model(self, value_model):
        """Sets the value_model of this AbstractField.

        Name of the updater/getter value model  # noqa: E501

        :param value_model: The value_model of this AbstractField.  # noqa: E501
        :type: str
        """

        self._value_model = value_model

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbstractField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
