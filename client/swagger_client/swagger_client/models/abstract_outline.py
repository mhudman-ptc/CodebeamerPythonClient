# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbstractOutline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outline_indexes': 'list[OutlineIndex]',
        'type': 'str'
    }

    attribute_map = {
        'outline_indexes': 'outlineIndexes',
        'type': 'type'
    }

    discriminator_value_class_map = {
          'OutlineWiki': 'OutlineWiki',
'OutlineItem': 'OutlineItem'    }

    def __init__(self, outline_indexes=None, type=None):  # noqa: E501
        """AbstractOutline - a model defined in Swagger"""  # noqa: E501
        self._outline_indexes = None
        self._type = None
        self.discriminator = 'type'
        if outline_indexes is not None:
            self.outline_indexes = outline_indexes
        if type is not None:
            self.type = type

    @property
    def outline_indexes(self):
        """Gets the outline_indexes of this AbstractOutline.  # noqa: E501

        Indexes of the entity in the outline.  # noqa: E501

        :return: The outline_indexes of this AbstractOutline.  # noqa: E501
        :rtype: list[OutlineIndex]
        """
        return self._outline_indexes

    @outline_indexes.setter
    def outline_indexes(self, outline_indexes):
        """Sets the outline_indexes of this AbstractOutline.

        Indexes of the entity in the outline.  # noqa: E501

        :param outline_indexes: The outline_indexes of this AbstractOutline.  # noqa: E501
        :type: list[OutlineIndex]
        """

        self._outline_indexes = outline_indexes

    @property
    def type(self):
        """Gets the type of this AbstractOutline.  # noqa: E501

        Type of the outline model  # noqa: E501

        :return: The type of this AbstractOutline.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbstractOutline.

        Type of the outline model  # noqa: E501

        :param type: The type of this AbstractOutline.  # noqa: E501
        :type: str
        """

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbstractOutline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractOutline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
