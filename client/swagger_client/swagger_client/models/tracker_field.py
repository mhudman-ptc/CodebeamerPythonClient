# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregation_rule': 'str',
        'choice_option_setting': 'BaseTrackerFieldChoiceOption',
        'computed_as': 'str',
        'computed_field_references': 'list[TrackerFieldComputedFieldReference]',
        'date_field_settings': 'TrackerFieldDateFieldSettings',
        'default_values_in_statuses': 'dict(str, str)',
        'dependency': 'TrackerFieldDependency',
        'description': 'str',
        'digits': 'int',
        'distribution_rule': 'str',
        'global_type_ids': 'list[int]',
        'height': 'int',
        'hidden': 'bool',
        'hide_if_formula': 'str',
        'hide_if_formula_same_as_field_id': 'int',
        'label': 'str',
        'listable': 'bool',
        'mandatory': 'bool',
        'mandatory_if_formula': 'str',
        'mandatory_if_formula_same_as_field_id': 'int',
        'max_value': 'str',
        'min_value': 'str',
        'multiple_selection': 'bool',
        'new_line': 'bool',
        'omit_merge': 'bool',
        'omit_suspected_when_change': 'bool',
        'permission': 'BaseTrackerFieldPermission',
        'position': 'int',
        'propagate_dependencies': 'bool',
        'propagate_suspect': 'bool',
        'reference_id': 'int',
        'reversed_suspect': 'bool',
        'service_desk_field': 'TrackerFieldServiceDeskField',
        'span': 'int',
        'title': 'str',
        'type_id': 'int',
        'union': 'bool',
        'width': 'int'
    }

    attribute_map = {
        'aggregation_rule': 'aggregationRule',
        'choice_option_setting': 'choiceOptionSetting',
        'computed_as': 'computedAs',
        'computed_field_references': 'computedFieldReferences',
        'date_field_settings': 'dateFieldSettings',
        'default_values_in_statuses': 'defaultValuesInStatuses',
        'dependency': 'dependency',
        'description': 'description',
        'digits': 'digits',
        'distribution_rule': 'distributionRule',
        'global_type_ids': 'globalTypeIds',
        'height': 'height',
        'hidden': 'hidden',
        'hide_if_formula': 'hideIfFormula',
        'hide_if_formula_same_as_field_id': 'hideIfFormulaSameAsFieldId',
        'label': 'label',
        'listable': 'listable',
        'mandatory': 'mandatory',
        'mandatory_if_formula': 'mandatoryIfFormula',
        'mandatory_if_formula_same_as_field_id': 'mandatoryIfFormulaSameAsFieldId',
        'max_value': 'maxValue',
        'min_value': 'minValue',
        'multiple_selection': 'multipleSelection',
        'new_line': 'newLine',
        'omit_merge': 'omitMerge',
        'omit_suspected_when_change': 'omitSuspectedWhenChange',
        'permission': 'permission',
        'position': 'position',
        'propagate_dependencies': 'propagateDependencies',
        'propagate_suspect': 'propagateSuspect',
        'reference_id': 'referenceId',
        'reversed_suspect': 'reversedSuspect',
        'service_desk_field': 'serviceDeskField',
        'span': 'span',
        'title': 'title',
        'type_id': 'typeId',
        'union': 'union',
        'width': 'width'
    }

    def __init__(self, aggregation_rule=None, choice_option_setting=None, computed_as=None, computed_field_references=None, date_field_settings=None, default_values_in_statuses=None, dependency=None, description=None, digits=None, distribution_rule=None, global_type_ids=None, height=None, hidden=None, hide_if_formula=None, hide_if_formula_same_as_field_id=None, label=None, listable=None, mandatory=None, mandatory_if_formula=None, mandatory_if_formula_same_as_field_id=None, max_value=None, min_value=None, multiple_selection=None, new_line=None, omit_merge=None, omit_suspected_when_change=None, permission=None, position=None, propagate_dependencies=None, propagate_suspect=None, reference_id=None, reversed_suspect=None, service_desk_field=None, span=None, title=None, type_id=None, union=None, width=None):  # noqa: E501
        """TrackerField - a model defined in Swagger"""  # noqa: E501
        self._aggregation_rule = None
        self._choice_option_setting = None
        self._computed_as = None
        self._computed_field_references = None
        self._date_field_settings = None
        self._default_values_in_statuses = None
        self._dependency = None
        self._description = None
        self._digits = None
        self._distribution_rule = None
        self._global_type_ids = None
        self._height = None
        self._hidden = None
        self._hide_if_formula = None
        self._hide_if_formula_same_as_field_id = None
        self._label = None
        self._listable = None
        self._mandatory = None
        self._mandatory_if_formula = None
        self._mandatory_if_formula_same_as_field_id = None
        self._max_value = None
        self._min_value = None
        self._multiple_selection = None
        self._new_line = None
        self._omit_merge = None
        self._omit_suspected_when_change = None
        self._permission = None
        self._position = None
        self._propagate_dependencies = None
        self._propagate_suspect = None
        self._reference_id = None
        self._reversed_suspect = None
        self._service_desk_field = None
        self._span = None
        self._title = None
        self._type_id = None
        self._union = None
        self._width = None
        self.discriminator = None
        if aggregation_rule is not None:
            self.aggregation_rule = aggregation_rule
        if choice_option_setting is not None:
            self.choice_option_setting = choice_option_setting
        if computed_as is not None:
            self.computed_as = computed_as
        if computed_field_references is not None:
            self.computed_field_references = computed_field_references
        if date_field_settings is not None:
            self.date_field_settings = date_field_settings
        if default_values_in_statuses is not None:
            self.default_values_in_statuses = default_values_in_statuses
        if dependency is not None:
            self.dependency = dependency
        if description is not None:
            self.description = description
        if digits is not None:
            self.digits = digits
        if distribution_rule is not None:
            self.distribution_rule = distribution_rule
        if global_type_ids is not None:
            self.global_type_ids = global_type_ids
        if height is not None:
            self.height = height
        if hidden is not None:
            self.hidden = hidden
        if hide_if_formula is not None:
            self.hide_if_formula = hide_if_formula
        if hide_if_formula_same_as_field_id is not None:
            self.hide_if_formula_same_as_field_id = hide_if_formula_same_as_field_id
        if label is not None:
            self.label = label
        if listable is not None:
            self.listable = listable
        if mandatory is not None:
            self.mandatory = mandatory
        if mandatory_if_formula is not None:
            self.mandatory_if_formula = mandatory_if_formula
        if mandatory_if_formula_same_as_field_id is not None:
            self.mandatory_if_formula_same_as_field_id = mandatory_if_formula_same_as_field_id
        if max_value is not None:
            self.max_value = max_value
        if min_value is not None:
            self.min_value = min_value
        if multiple_selection is not None:
            self.multiple_selection = multiple_selection
        if new_line is not None:
            self.new_line = new_line
        if omit_merge is not None:
            self.omit_merge = omit_merge
        if omit_suspected_when_change is not None:
            self.omit_suspected_when_change = omit_suspected_when_change
        if permission is not None:
            self.permission = permission
        if position is not None:
            self.position = position
        if propagate_dependencies is not None:
            self.propagate_dependencies = propagate_dependencies
        if propagate_suspect is not None:
            self.propagate_suspect = propagate_suspect
        if reference_id is not None:
            self.reference_id = reference_id
        if reversed_suspect is not None:
            self.reversed_suspect = reversed_suspect
        if service_desk_field is not None:
            self.service_desk_field = service_desk_field
        if span is not None:
            self.span = span
        if title is not None:
            self.title = title
        if type_id is not None:
            self.type_id = type_id
        if union is not None:
            self.union = union
        if width is not None:
            self.width = width

    @property
    def aggregation_rule(self):
        """Gets the aggregation_rule of this TrackerField.  # noqa: E501

        The Aggregation Rule for a specific Field.  # noqa: E501

        :return: The aggregation_rule of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_rule

    @aggregation_rule.setter
    def aggregation_rule(self, aggregation_rule):
        """Sets the aggregation_rule of this TrackerField.

        The Aggregation Rule for a specific Field.  # noqa: E501

        :param aggregation_rule: The aggregation_rule of this TrackerField.  # noqa: E501
        :type: str
        """
        allowed_values = ["MINIMUM", "MAXIMUM", "UNION", "INTERSECTION", "SUM_TOTAL", "AVERAGE"]  # noqa: E501
        if aggregation_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregation_rule, allowed_values)
            )

        self._aggregation_rule = aggregation_rule

    @property
    def choice_option_setting(self):
        """Gets the choice_option_setting of this TrackerField.  # noqa: E501


        :return: The choice_option_setting of this TrackerField.  # noqa: E501
        :rtype: BaseTrackerFieldChoiceOption
        """
        return self._choice_option_setting

    @choice_option_setting.setter
    def choice_option_setting(self, choice_option_setting):
        """Sets the choice_option_setting of this TrackerField.


        :param choice_option_setting: The choice_option_setting of this TrackerField.  # noqa: E501
        :type: BaseTrackerFieldChoiceOption
        """

        self._choice_option_setting = choice_option_setting

    @property
    def computed_as(self):
        """Gets the computed_as of this TrackerField.  # noqa: E501


        :return: The computed_as of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._computed_as

    @computed_as.setter
    def computed_as(self, computed_as):
        """Sets the computed_as of this TrackerField.


        :param computed_as: The computed_as of this TrackerField.  # noqa: E501
        :type: str
        """

        self._computed_as = computed_as

    @property
    def computed_field_references(self):
        """Gets the computed_field_references of this TrackerField.  # noqa: E501


        :return: The computed_field_references of this TrackerField.  # noqa: E501
        :rtype: list[TrackerFieldComputedFieldReference]
        """
        return self._computed_field_references

    @computed_field_references.setter
    def computed_field_references(self, computed_field_references):
        """Sets the computed_field_references of this TrackerField.


        :param computed_field_references: The computed_field_references of this TrackerField.  # noqa: E501
        :type: list[TrackerFieldComputedFieldReference]
        """

        self._computed_field_references = computed_field_references

    @property
    def date_field_settings(self):
        """Gets the date_field_settings of this TrackerField.  # noqa: E501


        :return: The date_field_settings of this TrackerField.  # noqa: E501
        :rtype: TrackerFieldDateFieldSettings
        """
        return self._date_field_settings

    @date_field_settings.setter
    def date_field_settings(self, date_field_settings):
        """Sets the date_field_settings of this TrackerField.


        :param date_field_settings: The date_field_settings of this TrackerField.  # noqa: E501
        :type: TrackerFieldDateFieldSettings
        """

        self._date_field_settings = date_field_settings

    @property
    def default_values_in_statuses(self):
        """Gets the default_values_in_statuses of this TrackerField.  # noqa: E501


        :return: The default_values_in_statuses of this TrackerField.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._default_values_in_statuses

    @default_values_in_statuses.setter
    def default_values_in_statuses(self, default_values_in_statuses):
        """Sets the default_values_in_statuses of this TrackerField.


        :param default_values_in_statuses: The default_values_in_statuses of this TrackerField.  # noqa: E501
        :type: dict(str, str)
        """

        self._default_values_in_statuses = default_values_in_statuses

    @property
    def dependency(self):
        """Gets the dependency of this TrackerField.  # noqa: E501


        :return: The dependency of this TrackerField.  # noqa: E501
        :rtype: TrackerFieldDependency
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this TrackerField.


        :param dependency: The dependency of this TrackerField.  # noqa: E501
        :type: TrackerFieldDependency
        """

        self._dependency = dependency

    @property
    def description(self):
        """Gets the description of this TrackerField.  # noqa: E501


        :return: The description of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrackerField.


        :param description: The description of this TrackerField.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def digits(self):
        """Gets the digits of this TrackerField.  # noqa: E501


        :return: The digits of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._digits

    @digits.setter
    def digits(self, digits):
        """Sets the digits of this TrackerField.


        :param digits: The digits of this TrackerField.  # noqa: E501
        :type: int
        """

        self._digits = digits

    @property
    def distribution_rule(self):
        """Gets the distribution_rule of this TrackerField.  # noqa: E501

        The Distribution Rule of a specific Field.  # noqa: E501

        :return: The distribution_rule of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._distribution_rule

    @distribution_rule.setter
    def distribution_rule(self, distribution_rule):
        """Sets the distribution_rule of this TrackerField.

        The Distribution Rule of a specific Field.  # noqa: E501

        :param distribution_rule: The distribution_rule of this TrackerField.  # noqa: E501
        :type: str
        """
        allowed_values = ["SET", "DEFAULT", "LEAST", "GREATEST", "SUBSET", "SUPERSET", "CLOSE_RECURSIVELY", "CLOSE_RESTRICTED"]  # noqa: E501
        if distribution_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `distribution_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(distribution_rule, allowed_values)
            )

        self._distribution_rule = distribution_rule

    @property
    def global_type_ids(self):
        """Gets the global_type_ids of this TrackerField.  # noqa: E501


        :return: The global_type_ids of this TrackerField.  # noqa: E501
        :rtype: list[int]
        """
        return self._global_type_ids

    @global_type_ids.setter
    def global_type_ids(self, global_type_ids):
        """Sets the global_type_ids of this TrackerField.


        :param global_type_ids: The global_type_ids of this TrackerField.  # noqa: E501
        :type: list[int]
        """

        self._global_type_ids = global_type_ids

    @property
    def height(self):
        """Gets the height of this TrackerField.  # noqa: E501


        :return: The height of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TrackerField.


        :param height: The height of this TrackerField.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def hidden(self):
        """Gets the hidden of this TrackerField.  # noqa: E501


        :return: The hidden of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this TrackerField.


        :param hidden: The hidden of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def hide_if_formula(self):
        """Gets the hide_if_formula of this TrackerField.  # noqa: E501


        :return: The hide_if_formula of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._hide_if_formula

    @hide_if_formula.setter
    def hide_if_formula(self, hide_if_formula):
        """Sets the hide_if_formula of this TrackerField.


        :param hide_if_formula: The hide_if_formula of this TrackerField.  # noqa: E501
        :type: str
        """

        self._hide_if_formula = hide_if_formula

    @property
    def hide_if_formula_same_as_field_id(self):
        """Gets the hide_if_formula_same_as_field_id of this TrackerField.  # noqa: E501


        :return: The hide_if_formula_same_as_field_id of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._hide_if_formula_same_as_field_id

    @hide_if_formula_same_as_field_id.setter
    def hide_if_formula_same_as_field_id(self, hide_if_formula_same_as_field_id):
        """Sets the hide_if_formula_same_as_field_id of this TrackerField.


        :param hide_if_formula_same_as_field_id: The hide_if_formula_same_as_field_id of this TrackerField.  # noqa: E501
        :type: int
        """

        self._hide_if_formula_same_as_field_id = hide_if_formula_same_as_field_id

    @property
    def label(self):
        """Gets the label of this TrackerField.  # noqa: E501


        :return: The label of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TrackerField.


        :param label: The label of this TrackerField.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def listable(self):
        """Gets the listable of this TrackerField.  # noqa: E501


        :return: The listable of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._listable

    @listable.setter
    def listable(self, listable):
        """Sets the listable of this TrackerField.


        :param listable: The listable of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._listable = listable

    @property
    def mandatory(self):
        """Gets the mandatory of this TrackerField.  # noqa: E501


        :return: The mandatory of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this TrackerField.


        :param mandatory: The mandatory of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._mandatory = mandatory

    @property
    def mandatory_if_formula(self):
        """Gets the mandatory_if_formula of this TrackerField.  # noqa: E501


        :return: The mandatory_if_formula of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._mandatory_if_formula

    @mandatory_if_formula.setter
    def mandatory_if_formula(self, mandatory_if_formula):
        """Sets the mandatory_if_formula of this TrackerField.


        :param mandatory_if_formula: The mandatory_if_formula of this TrackerField.  # noqa: E501
        :type: str
        """

        self._mandatory_if_formula = mandatory_if_formula

    @property
    def mandatory_if_formula_same_as_field_id(self):
        """Gets the mandatory_if_formula_same_as_field_id of this TrackerField.  # noqa: E501


        :return: The mandatory_if_formula_same_as_field_id of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._mandatory_if_formula_same_as_field_id

    @mandatory_if_formula_same_as_field_id.setter
    def mandatory_if_formula_same_as_field_id(self, mandatory_if_formula_same_as_field_id):
        """Sets the mandatory_if_formula_same_as_field_id of this TrackerField.


        :param mandatory_if_formula_same_as_field_id: The mandatory_if_formula_same_as_field_id of this TrackerField.  # noqa: E501
        :type: int
        """

        self._mandatory_if_formula_same_as_field_id = mandatory_if_formula_same_as_field_id

    @property
    def max_value(self):
        """Gets the max_value of this TrackerField.  # noqa: E501


        :return: The max_value of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this TrackerField.


        :param max_value: The max_value of this TrackerField.  # noqa: E501
        :type: str
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this TrackerField.  # noqa: E501


        :return: The min_value of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this TrackerField.


        :param min_value: The min_value of this TrackerField.  # noqa: E501
        :type: str
        """

        self._min_value = min_value

    @property
    def multiple_selection(self):
        """Gets the multiple_selection of this TrackerField.  # noqa: E501


        :return: The multiple_selection of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_selection

    @multiple_selection.setter
    def multiple_selection(self, multiple_selection):
        """Sets the multiple_selection of this TrackerField.


        :param multiple_selection: The multiple_selection of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._multiple_selection = multiple_selection

    @property
    def new_line(self):
        """Gets the new_line of this TrackerField.  # noqa: E501


        :return: The new_line of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._new_line

    @new_line.setter
    def new_line(self, new_line):
        """Sets the new_line of this TrackerField.


        :param new_line: The new_line of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._new_line = new_line

    @property
    def omit_merge(self):
        """Gets the omit_merge of this TrackerField.  # noqa: E501


        :return: The omit_merge of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._omit_merge

    @omit_merge.setter
    def omit_merge(self, omit_merge):
        """Sets the omit_merge of this TrackerField.


        :param omit_merge: The omit_merge of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._omit_merge = omit_merge

    @property
    def omit_suspected_when_change(self):
        """Gets the omit_suspected_when_change of this TrackerField.  # noqa: E501


        :return: The omit_suspected_when_change of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._omit_suspected_when_change

    @omit_suspected_when_change.setter
    def omit_suspected_when_change(self, omit_suspected_when_change):
        """Sets the omit_suspected_when_change of this TrackerField.


        :param omit_suspected_when_change: The omit_suspected_when_change of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._omit_suspected_when_change = omit_suspected_when_change

    @property
    def permission(self):
        """Gets the permission of this TrackerField.  # noqa: E501


        :return: The permission of this TrackerField.  # noqa: E501
        :rtype: BaseTrackerFieldPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this TrackerField.


        :param permission: The permission of this TrackerField.  # noqa: E501
        :type: BaseTrackerFieldPermission
        """

        self._permission = permission

    @property
    def position(self):
        """Gets the position of this TrackerField.  # noqa: E501


        :return: The position of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this TrackerField.


        :param position: The position of this TrackerField.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def propagate_dependencies(self):
        """Gets the propagate_dependencies of this TrackerField.  # noqa: E501


        :return: The propagate_dependencies of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._propagate_dependencies

    @propagate_dependencies.setter
    def propagate_dependencies(self, propagate_dependencies):
        """Sets the propagate_dependencies of this TrackerField.


        :param propagate_dependencies: The propagate_dependencies of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._propagate_dependencies = propagate_dependencies

    @property
    def propagate_suspect(self):
        """Gets the propagate_suspect of this TrackerField.  # noqa: E501


        :return: The propagate_suspect of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._propagate_suspect

    @propagate_suspect.setter
    def propagate_suspect(self, propagate_suspect):
        """Sets the propagate_suspect of this TrackerField.


        :param propagate_suspect: The propagate_suspect of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._propagate_suspect = propagate_suspect

    @property
    def reference_id(self):
        """Gets the reference_id of this TrackerField.  # noqa: E501


        :return: The reference_id of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this TrackerField.


        :param reference_id: The reference_id of this TrackerField.  # noqa: E501
        :type: int
        """

        self._reference_id = reference_id

    @property
    def reversed_suspect(self):
        """Gets the reversed_suspect of this TrackerField.  # noqa: E501


        :return: The reversed_suspect of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._reversed_suspect

    @reversed_suspect.setter
    def reversed_suspect(self, reversed_suspect):
        """Sets the reversed_suspect of this TrackerField.


        :param reversed_suspect: The reversed_suspect of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._reversed_suspect = reversed_suspect

    @property
    def service_desk_field(self):
        """Gets the service_desk_field of this TrackerField.  # noqa: E501


        :return: The service_desk_field of this TrackerField.  # noqa: E501
        :rtype: TrackerFieldServiceDeskField
        """
        return self._service_desk_field

    @service_desk_field.setter
    def service_desk_field(self, service_desk_field):
        """Sets the service_desk_field of this TrackerField.


        :param service_desk_field: The service_desk_field of this TrackerField.  # noqa: E501
        :type: TrackerFieldServiceDeskField
        """

        self._service_desk_field = service_desk_field

    @property
    def span(self):
        """Gets the span of this TrackerField.  # noqa: E501


        :return: The span of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._span

    @span.setter
    def span(self, span):
        """Sets the span of this TrackerField.


        :param span: The span of this TrackerField.  # noqa: E501
        :type: int
        """

        self._span = span

    @property
    def title(self):
        """Gets the title of this TrackerField.  # noqa: E501


        :return: The title of this TrackerField.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TrackerField.


        :param title: The title of this TrackerField.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type_id(self):
        """Gets the type_id of this TrackerField.  # noqa: E501


        :return: The type_id of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this TrackerField.


        :param type_id: The type_id of this TrackerField.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def union(self):
        """Gets the union of this TrackerField.  # noqa: E501


        :return: The union of this TrackerField.  # noqa: E501
        :rtype: bool
        """
        return self._union

    @union.setter
    def union(self, union):
        """Sets the union of this TrackerField.


        :param union: The union of this TrackerField.  # noqa: E501
        :type: bool
        """

        self._union = union

    @property
    def width(self):
        """Gets the width of this TrackerField.  # noqa: E501


        :return: The width of this TrackerField.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this TrackerField.


        :param width: The width of this TrackerField.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
