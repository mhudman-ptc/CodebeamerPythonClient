# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accrued_millis': 'int',
        'areas': 'list[AbstractReference]',
        'assigned_at': 'datetime',
        'assigned_to': 'list[AbstractReference]',
        'categories': 'list[AbstractReference]',
        'children': 'list[TrackerItemReference]',
        'closed_at': 'datetime',
        'comments': 'list[CommentReference]',
        'created_at': 'datetime',
        'created_by': 'UserReference',
        'custom_fields': 'list[AbstractFieldValue]',
        'description': 'str',
        'description_format': 'str',
        'end_date': 'datetime',
        'estimated_millis': 'int',
        'formality': 'AbstractReference',
        'id': 'int',
        'modified_at': 'datetime',
        'modified_by': 'UserReference',
        'name': 'str',
        'ordinal': 'int',
        'owners': 'list[AbstractReference]',
        'parent': 'TrackerItemReference',
        'platforms': 'list[AbstractReference]',
        'priority': 'AbstractReference',
        'release_method': 'AbstractReference',
        'resolutions': 'list[AbstractReference]',
        'severities': 'list[AbstractReference]',
        'spent_millis': 'int',
        'start_date': 'datetime',
        'status': 'AbstractReference',
        'story_points': 'int',
        'subjects': 'list[AbstractReference]',
        'tags': 'list[Label]',
        'teams': 'list[AbstractReference]',
        'tracker': 'TrackerReference',
        'type_name': 'str',
        'version': 'int',
        'versions': 'list[AbstractReference]'
    }

    attribute_map = {
        'accrued_millis': 'accruedMillis',
        'areas': 'areas',
        'assigned_at': 'assignedAt',
        'assigned_to': 'assignedTo',
        'categories': 'categories',
        'children': 'children',
        'closed_at': 'closedAt',
        'comments': 'comments',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'custom_fields': 'customFields',
        'description': 'description',
        'description_format': 'descriptionFormat',
        'end_date': 'endDate',
        'estimated_millis': 'estimatedMillis',
        'formality': 'formality',
        'id': 'id',
        'modified_at': 'modifiedAt',
        'modified_by': 'modifiedBy',
        'name': 'name',
        'ordinal': 'ordinal',
        'owners': 'owners',
        'parent': 'parent',
        'platforms': 'platforms',
        'priority': 'priority',
        'release_method': 'releaseMethod',
        'resolutions': 'resolutions',
        'severities': 'severities',
        'spent_millis': 'spentMillis',
        'start_date': 'startDate',
        'status': 'status',
        'story_points': 'storyPoints',
        'subjects': 'subjects',
        'tags': 'tags',
        'teams': 'teams',
        'tracker': 'tracker',
        'type_name': 'typeName',
        'version': 'version',
        'versions': 'versions'
    }

    def __init__(self, accrued_millis=None, areas=None, assigned_at=None, assigned_to=None, categories=None, children=None, closed_at=None, comments=None, created_at=None, created_by=None, custom_fields=None, description=None, description_format=None, end_date=None, estimated_millis=None, formality=None, id=None, modified_at=None, modified_by=None, name=None, ordinal=None, owners=None, parent=None, platforms=None, priority=None, release_method=None, resolutions=None, severities=None, spent_millis=None, start_date=None, status=None, story_points=None, subjects=None, tags=None, teams=None, tracker=None, type_name=None, version=None, versions=None):  # noqa: E501
        """TrackerItem - a model defined in Swagger"""  # noqa: E501
        self._accrued_millis = None
        self._areas = None
        self._assigned_at = None
        self._assigned_to = None
        self._categories = None
        self._children = None
        self._closed_at = None
        self._comments = None
        self._created_at = None
        self._created_by = None
        self._custom_fields = None
        self._description = None
        self._description_format = None
        self._end_date = None
        self._estimated_millis = None
        self._formality = None
        self._id = None
        self._modified_at = None
        self._modified_by = None
        self._name = None
        self._ordinal = None
        self._owners = None
        self._parent = None
        self._platforms = None
        self._priority = None
        self._release_method = None
        self._resolutions = None
        self._severities = None
        self._spent_millis = None
        self._start_date = None
        self._status = None
        self._story_points = None
        self._subjects = None
        self._tags = None
        self._teams = None
        self._tracker = None
        self._type_name = None
        self._version = None
        self._versions = None
        self.discriminator = None
        if accrued_millis is not None:
            self.accrued_millis = accrued_millis
        if areas is not None:
            self.areas = areas
        if assigned_at is not None:
            self.assigned_at = assigned_at
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if categories is not None:
            self.categories = categories
        if children is not None:
            self.children = children
        if closed_at is not None:
            self.closed_at = closed_at
        if comments is not None:
            self.comments = comments
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if description is not None:
            self.description = description
        if description_format is not None:
            self.description_format = description_format
        if end_date is not None:
            self.end_date = end_date
        if estimated_millis is not None:
            self.estimated_millis = estimated_millis
        if formality is not None:
            self.formality = formality
        if id is not None:
            self.id = id
        if modified_at is not None:
            self.modified_at = modified_at
        if modified_by is not None:
            self.modified_by = modified_by
        if name is not None:
            self.name = name
        if ordinal is not None:
            self.ordinal = ordinal
        if owners is not None:
            self.owners = owners
        if parent is not None:
            self.parent = parent
        if platforms is not None:
            self.platforms = platforms
        if priority is not None:
            self.priority = priority
        if release_method is not None:
            self.release_method = release_method
        if resolutions is not None:
            self.resolutions = resolutions
        if severities is not None:
            self.severities = severities
        if spent_millis is not None:
            self.spent_millis = spent_millis
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status
        if story_points is not None:
            self.story_points = story_points
        if subjects is not None:
            self.subjects = subjects
        if tags is not None:
            self.tags = tags
        if teams is not None:
            self.teams = teams
        if tracker is not None:
            self.tracker = tracker
        if type_name is not None:
            self.type_name = type_name
        if version is not None:
            self.version = version
        if versions is not None:
            self.versions = versions

    @property
    def accrued_millis(self):
        """Gets the accrued_millis of this TrackerItem.  # noqa: E501

        Accrued work time of a tracker item in milliseconds  # noqa: E501

        :return: The accrued_millis of this TrackerItem.  # noqa: E501
        :rtype: int
        """
        return self._accrued_millis

    @accrued_millis.setter
    def accrued_millis(self, accrued_millis):
        """Sets the accrued_millis of this TrackerItem.

        Accrued work time of a tracker item in milliseconds  # noqa: E501

        :param accrued_millis: The accrued_millis of this TrackerItem.  # noqa: E501
        :type: int
        """

        self._accrued_millis = accrued_millis

    @property
    def areas(self):
        """Gets the areas of this TrackerItem.  # noqa: E501

        Areas of a tracker item  # noqa: E501

        :return: The areas of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this TrackerItem.

        Areas of a tracker item  # noqa: E501

        :param areas: The areas of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._areas = areas

    @property
    def assigned_at(self):
        """Gets the assigned_at of this TrackerItem.  # noqa: E501

        Assignee date of a tracker item  # noqa: E501

        :return: The assigned_at of this TrackerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._assigned_at

    @assigned_at.setter
    def assigned_at(self, assigned_at):
        """Sets the assigned_at of this TrackerItem.

        Assignee date of a tracker item  # noqa: E501

        :param assigned_at: The assigned_at of this TrackerItem.  # noqa: E501
        :type: datetime
        """

        self._assigned_at = assigned_at

    @property
    def assigned_to(self):
        """Gets the assigned_to of this TrackerItem.  # noqa: E501

        Assignees of a tracker item  # noqa: E501

        :return: The assigned_to of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this TrackerItem.

        Assignees of a tracker item  # noqa: E501

        :param assigned_to: The assigned_to of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._assigned_to = assigned_to

    @property
    def categories(self):
        """Gets the categories of this TrackerItem.  # noqa: E501

        Categories of a tracker item  # noqa: E501

        :return: The categories of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this TrackerItem.

        Categories of a tracker item  # noqa: E501

        :param categories: The categories of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._categories = categories

    @property
    def children(self):
        """Gets the children of this TrackerItem.  # noqa: E501

        Children of a tracker item  # noqa: E501

        :return: The children of this TrackerItem.  # noqa: E501
        :rtype: list[TrackerItemReference]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TrackerItem.

        Children of a tracker item  # noqa: E501

        :param children: The children of this TrackerItem.  # noqa: E501
        :type: list[TrackerItemReference]
        """

        self._children = children

    @property
    def closed_at(self):
        """Gets the closed_at of this TrackerItem.  # noqa: E501

        Close date of a tracker item  # noqa: E501

        :return: The closed_at of this TrackerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this TrackerItem.

        Close date of a tracker item  # noqa: E501

        :param closed_at: The closed_at of this TrackerItem.  # noqa: E501
        :type: datetime
        """

        self._closed_at = closed_at

    @property
    def comments(self):
        """Gets the comments of this TrackerItem.  # noqa: E501

        Comment in the tracker item  # noqa: E501

        :return: The comments of this TrackerItem.  # noqa: E501
        :rtype: list[CommentReference]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TrackerItem.

        Comment in the tracker item  # noqa: E501

        :param comments: The comments of this TrackerItem.  # noqa: E501
        :type: list[CommentReference]
        """

        self._comments = comments

    @property
    def created_at(self):
        """Gets the created_at of this TrackerItem.  # noqa: E501

        The date when the entity was created  # noqa: E501

        :return: The created_at of this TrackerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TrackerItem.

        The date when the entity was created  # noqa: E501

        :param created_at: The created_at of this TrackerItem.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this TrackerItem.  # noqa: E501


        :return: The created_by of this TrackerItem.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TrackerItem.


        :param created_by: The created_by of this TrackerItem.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def custom_fields(self):
        """Gets the custom_fields of this TrackerItem.  # noqa: E501

        Custom field of a tracker item  # noqa: E501

        :return: The custom_fields of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractFieldValue]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this TrackerItem.

        Custom field of a tracker item  # noqa: E501

        :param custom_fields: The custom_fields of this TrackerItem.  # noqa: E501
        :type: list[AbstractFieldValue]
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this TrackerItem.  # noqa: E501

        Description of the entity  # noqa: E501

        :return: The description of this TrackerItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrackerItem.

        Description of the entity  # noqa: E501

        :param description: The description of this TrackerItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_format(self):
        """Gets the description_format of this TrackerItem.  # noqa: E501

        Description format of the entity  # noqa: E501

        :return: The description_format of this TrackerItem.  # noqa: E501
        :rtype: str
        """
        return self._description_format

    @description_format.setter
    def description_format(self, description_format):
        """Sets the description_format of this TrackerItem.

        Description format of the entity  # noqa: E501

        :param description_format: The description_format of this TrackerItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["PlainText", "Html", "Wiki"]  # noqa: E501
        if description_format not in allowed_values:
            raise ValueError(
                "Invalid value for `description_format` ({0}), must be one of {1}"  # noqa: E501
                .format(description_format, allowed_values)
            )

        self._description_format = description_format

    @property
    def end_date(self):
        """Gets the end_date of this TrackerItem.  # noqa: E501

        End date of a tracker item  # noqa: E501

        :return: The end_date of this TrackerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TrackerItem.

        End date of a tracker item  # noqa: E501

        :param end_date: The end_date of this TrackerItem.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def estimated_millis(self):
        """Gets the estimated_millis of this TrackerItem.  # noqa: E501

        Estimated work time of a tracker item in milliseconds  # noqa: E501

        :return: The estimated_millis of this TrackerItem.  # noqa: E501
        :rtype: int
        """
        return self._estimated_millis

    @estimated_millis.setter
    def estimated_millis(self, estimated_millis):
        """Sets the estimated_millis of this TrackerItem.

        Estimated work time of a tracker item in milliseconds  # noqa: E501

        :param estimated_millis: The estimated_millis of this TrackerItem.  # noqa: E501
        :type: int
        """

        self._estimated_millis = estimated_millis

    @property
    def formality(self):
        """Gets the formality of this TrackerItem.  # noqa: E501


        :return: The formality of this TrackerItem.  # noqa: E501
        :rtype: AbstractReference
        """
        return self._formality

    @formality.setter
    def formality(self, formality):
        """Sets the formality of this TrackerItem.


        :param formality: The formality of this TrackerItem.  # noqa: E501
        :type: AbstractReference
        """

        self._formality = formality

    @property
    def id(self):
        """Gets the id of this TrackerItem.  # noqa: E501

        Id of the entity  # noqa: E501

        :return: The id of this TrackerItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackerItem.

        Id of the entity  # noqa: E501

        :param id: The id of this TrackerItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def modified_at(self):
        """Gets the modified_at of this TrackerItem.  # noqa: E501

        The date when the entity was modified  # noqa: E501

        :return: The modified_at of this TrackerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this TrackerItem.

        The date when the entity was modified  # noqa: E501

        :param modified_at: The modified_at of this TrackerItem.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this TrackerItem.  # noqa: E501


        :return: The modified_by of this TrackerItem.  # noqa: E501
        :rtype: UserReference
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this TrackerItem.


        :param modified_by: The modified_by of this TrackerItem.  # noqa: E501
        :type: UserReference
        """

        self._modified_by = modified_by

    @property
    def name(self):
        """Gets the name of this TrackerItem.  # noqa: E501

        Name of the entity  # noqa: E501

        :return: The name of this TrackerItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackerItem.

        Name of the entity  # noqa: E501

        :param name: The name of this TrackerItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ordinal(self):
        """Gets the ordinal of this TrackerItem.  # noqa: E501

        Ordinal of a tracker item  # noqa: E501

        :return: The ordinal of this TrackerItem.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this TrackerItem.

        Ordinal of a tracker item  # noqa: E501

        :param ordinal: The ordinal of this TrackerItem.  # noqa: E501
        :type: int
        """

        self._ordinal = ordinal

    @property
    def owners(self):
        """Gets the owners of this TrackerItem.  # noqa: E501

        Owners of a tracker item  # noqa: E501

        :return: The owners of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this TrackerItem.

        Owners of a tracker item  # noqa: E501

        :param owners: The owners of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._owners = owners

    @property
    def parent(self):
        """Gets the parent of this TrackerItem.  # noqa: E501


        :return: The parent of this TrackerItem.  # noqa: E501
        :rtype: TrackerItemReference
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TrackerItem.


        :param parent: The parent of this TrackerItem.  # noqa: E501
        :type: TrackerItemReference
        """

        self._parent = parent

    @property
    def platforms(self):
        """Gets the platforms of this TrackerItem.  # noqa: E501

        Platforms of a tracker item  # noqa: E501

        :return: The platforms of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this TrackerItem.

        Platforms of a tracker item  # noqa: E501

        :param platforms: The platforms of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._platforms = platforms

    @property
    def priority(self):
        """Gets the priority of this TrackerItem.  # noqa: E501


        :return: The priority of this TrackerItem.  # noqa: E501
        :rtype: AbstractReference
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TrackerItem.


        :param priority: The priority of this TrackerItem.  # noqa: E501
        :type: AbstractReference
        """

        self._priority = priority

    @property
    def release_method(self):
        """Gets the release_method of this TrackerItem.  # noqa: E501


        :return: The release_method of this TrackerItem.  # noqa: E501
        :rtype: AbstractReference
        """
        return self._release_method

    @release_method.setter
    def release_method(self, release_method):
        """Sets the release_method of this TrackerItem.


        :param release_method: The release_method of this TrackerItem.  # noqa: E501
        :type: AbstractReference
        """

        self._release_method = release_method

    @property
    def resolutions(self):
        """Gets the resolutions of this TrackerItem.  # noqa: E501

        Resolutions of a tracker item  # noqa: E501

        :return: The resolutions of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._resolutions

    @resolutions.setter
    def resolutions(self, resolutions):
        """Sets the resolutions of this TrackerItem.

        Resolutions of a tracker item  # noqa: E501

        :param resolutions: The resolutions of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._resolutions = resolutions

    @property
    def severities(self):
        """Gets the severities of this TrackerItem.  # noqa: E501

        Severities of a tracker item  # noqa: E501

        :return: The severities of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._severities

    @severities.setter
    def severities(self, severities):
        """Sets the severities of this TrackerItem.

        Severities of a tracker item  # noqa: E501

        :param severities: The severities of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._severities = severities

    @property
    def spent_millis(self):
        """Gets the spent_millis of this TrackerItem.  # noqa: E501

        Spent work time of a tracker item in milliseconds  # noqa: E501

        :return: The spent_millis of this TrackerItem.  # noqa: E501
        :rtype: int
        """
        return self._spent_millis

    @spent_millis.setter
    def spent_millis(self, spent_millis):
        """Sets the spent_millis of this TrackerItem.

        Spent work time of a tracker item in milliseconds  # noqa: E501

        :param spent_millis: The spent_millis of this TrackerItem.  # noqa: E501
        :type: int
        """

        self._spent_millis = spent_millis

    @property
    def start_date(self):
        """Gets the start_date of this TrackerItem.  # noqa: E501

        Start date of a tracker item  # noqa: E501

        :return: The start_date of this TrackerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TrackerItem.

        Start date of a tracker item  # noqa: E501

        :param start_date: The start_date of this TrackerItem.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this TrackerItem.  # noqa: E501


        :return: The status of this TrackerItem.  # noqa: E501
        :rtype: AbstractReference
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrackerItem.


        :param status: The status of this TrackerItem.  # noqa: E501
        :type: AbstractReference
        """

        self._status = status

    @property
    def story_points(self):
        """Gets the story_points of this TrackerItem.  # noqa: E501

        Story points of a tracker item  # noqa: E501

        :return: The story_points of this TrackerItem.  # noqa: E501
        :rtype: int
        """
        return self._story_points

    @story_points.setter
    def story_points(self, story_points):
        """Sets the story_points of this TrackerItem.

        Story points of a tracker item  # noqa: E501

        :param story_points: The story_points of this TrackerItem.  # noqa: E501
        :type: int
        """

        self._story_points = story_points

    @property
    def subjects(self):
        """Gets the subjects of this TrackerItem.  # noqa: E501

        Subjects of a tracker item  # noqa: E501

        :return: The subjects of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this TrackerItem.

        Subjects of a tracker item  # noqa: E501

        :param subjects: The subjects of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._subjects = subjects

    @property
    def tags(self):
        """Gets the tags of this TrackerItem.  # noqa: E501

        Tags of the tracker item  # noqa: E501

        :return: The tags of this TrackerItem.  # noqa: E501
        :rtype: list[Label]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TrackerItem.

        Tags of the tracker item  # noqa: E501

        :param tags: The tags of this TrackerItem.  # noqa: E501
        :type: list[Label]
        """

        self._tags = tags

    @property
    def teams(self):
        """Gets the teams of this TrackerItem.  # noqa: E501

        Teams of a tracker item  # noqa: E501

        :return: The teams of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this TrackerItem.

        Teams of a tracker item  # noqa: E501

        :param teams: The teams of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._teams = teams

    @property
    def tracker(self):
        """Gets the tracker of this TrackerItem.  # noqa: E501


        :return: The tracker of this TrackerItem.  # noqa: E501
        :rtype: TrackerReference
        """
        return self._tracker

    @tracker.setter
    def tracker(self, tracker):
        """Sets the tracker of this TrackerItem.


        :param tracker: The tracker of this TrackerItem.  # noqa: E501
        :type: TrackerReference
        """

        self._tracker = tracker

    @property
    def type_name(self):
        """Gets the type_name of this TrackerItem.  # noqa: E501

        Type name of a tracker item  # noqa: E501

        :return: The type_name of this TrackerItem.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this TrackerItem.

        Type name of a tracker item  # noqa: E501

        :param type_name: The type_name of this TrackerItem.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def version(self):
        """Gets the version of this TrackerItem.  # noqa: E501

        Version of a tracker item  # noqa: E501

        :return: The version of this TrackerItem.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TrackerItem.

        Version of a tracker item  # noqa: E501

        :param version: The version of this TrackerItem.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def versions(self):
        """Gets the versions of this TrackerItem.  # noqa: E501

        Versions of a tracker item  # noqa: E501

        :return: The versions of this TrackerItem.  # noqa: E501
        :rtype: list[AbstractReference]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this TrackerItem.

        Versions of a tracker item  # noqa: E501

        :param versions: The versions of this TrackerItem.  # noqa: E501
        :type: list[AbstractReference]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
