# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tracker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_as_template': 'bool',
        'color': 'str',
        'created_at': 'datetime',
        'created_by': 'UserReference',
        'default_show_ancestor_items': 'bool',
        'default_show_descendant_items': 'bool',
        'deleted': 'bool',
        'description': 'str',
        'description_format': 'str',
        'hidden': 'bool',
        'id': 'int',
        'key_name': 'str',
        'modified_at': 'datetime',
        'modified_by': 'UserReference',
        'name': 'str',
        'only_workflow_can_create_new_referring_item': 'bool',
        'project': 'ProjectReference',
        'shared_in_working_set': 'bool',
        'template_tracker': 'TrackerReference',
        'tracker_field_layout_settings_model': 'TrackerFieldLayoutSettings',
        'type': 'TrackerTypeReference',
        'using_quick_transitions': 'bool',
        'using_workflow': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'available_as_template': 'availableAsTemplate',
        'color': 'color',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'default_show_ancestor_items': 'defaultShowAncestorItems',
        'default_show_descendant_items': 'defaultShowDescendantItems',
        'deleted': 'deleted',
        'description': 'description',
        'description_format': 'descriptionFormat',
        'hidden': 'hidden',
        'id': 'id',
        'key_name': 'keyName',
        'modified_at': 'modifiedAt',
        'modified_by': 'modifiedBy',
        'name': 'name',
        'only_workflow_can_create_new_referring_item': 'onlyWorkflowCanCreateNewReferringItem',
        'project': 'project',
        'shared_in_working_set': 'sharedInWorkingSet',
        'template_tracker': 'templateTracker',
        'tracker_field_layout_settings_model': 'trackerFieldLayoutSettingsModel',
        'type': 'type',
        'using_quick_transitions': 'usingQuickTransitions',
        'using_workflow': 'usingWorkflow',
        'version': 'version'
    }

    def __init__(self, available_as_template=None, color=None, created_at=None, created_by=None, default_show_ancestor_items=None, default_show_descendant_items=None, deleted=None, description=None, description_format=None, hidden=None, id=None, key_name=None, modified_at=None, modified_by=None, name=None, only_workflow_can_create_new_referring_item=None, project=None, shared_in_working_set=None, template_tracker=None, tracker_field_layout_settings_model=None, type=None, using_quick_transitions=None, using_workflow=None, version=None):  # noqa: E501
        """Tracker - a model defined in Swagger"""  # noqa: E501
        self._available_as_template = None
        self._color = None
        self._created_at = None
        self._created_by = None
        self._default_show_ancestor_items = None
        self._default_show_descendant_items = None
        self._deleted = None
        self._description = None
        self._description_format = None
        self._hidden = None
        self._id = None
        self._key_name = None
        self._modified_at = None
        self._modified_by = None
        self._name = None
        self._only_workflow_can_create_new_referring_item = None
        self._project = None
        self._shared_in_working_set = None
        self._template_tracker = None
        self._tracker_field_layout_settings_model = None
        self._type = None
        self._using_quick_transitions = None
        self._using_workflow = None
        self._version = None
        self.discriminator = None
        if available_as_template is not None:
            self.available_as_template = available_as_template
        if color is not None:
            self.color = color
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        self.default_show_ancestor_items = default_show_ancestor_items
        self.default_show_descendant_items = default_show_descendant_items
        self.deleted = deleted
        if description is not None:
            self.description = description
        if description_format is not None:
            self.description_format = description_format
        self.hidden = hidden
        if id is not None:
            self.id = id
        if key_name is not None:
            self.key_name = key_name
        if modified_at is not None:
            self.modified_at = modified_at
        if modified_by is not None:
            self.modified_by = modified_by
        if name is not None:
            self.name = name
        self.only_workflow_can_create_new_referring_item = only_workflow_can_create_new_referring_item
        if project is not None:
            self.project = project
        if shared_in_working_set is not None:
            self.shared_in_working_set = shared_in_working_set
        if template_tracker is not None:
            self.template_tracker = template_tracker
        if tracker_field_layout_settings_model is not None:
            self.tracker_field_layout_settings_model = tracker_field_layout_settings_model
        if type is not None:
            self.type = type
        self.using_quick_transitions = using_quick_transitions
        self.using_workflow = using_workflow
        if version is not None:
            self.version = version

    @property
    def available_as_template(self):
        """Gets the available_as_template of this Tracker.  # noqa: E501

        Indicator if the tracker can be used as a template  # noqa: E501

        :return: The available_as_template of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._available_as_template

    @available_as_template.setter
    def available_as_template(self, available_as_template):
        """Sets the available_as_template of this Tracker.

        Indicator if the tracker can be used as a template  # noqa: E501

        :param available_as_template: The available_as_template of this Tracker.  # noqa: E501
        :type: bool
        """

        self._available_as_template = available_as_template

    @property
    def color(self):
        """Gets the color of this Tracker.  # noqa: E501

        Color of the tracker  # noqa: E501

        :return: The color of this Tracker.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Tracker.

        Color of the tracker  # noqa: E501

        :param color: The color of this Tracker.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def created_at(self):
        """Gets the created_at of this Tracker.  # noqa: E501

        The date when the entity was created  # noqa: E501

        :return: The created_at of this Tracker.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Tracker.

        The date when the entity was created  # noqa: E501

        :param created_at: The created_at of this Tracker.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Tracker.  # noqa: E501


        :return: The created_by of this Tracker.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Tracker.


        :param created_by: The created_by of this Tracker.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def default_show_ancestor_items(self):
        """Gets the default_show_ancestor_items of this Tracker.  # noqa: E501

        Default Outline should show Ancestor Items or not  # noqa: E501

        :return: The default_show_ancestor_items of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._default_show_ancestor_items

    @default_show_ancestor_items.setter
    def default_show_ancestor_items(self, default_show_ancestor_items):
        """Sets the default_show_ancestor_items of this Tracker.

        Default Outline should show Ancestor Items or not  # noqa: E501

        :param default_show_ancestor_items: The default_show_ancestor_items of this Tracker.  # noqa: E501
        :type: bool
        """
        if default_show_ancestor_items is None:
            raise ValueError("Invalid value for `default_show_ancestor_items`, must not be `None`")  # noqa: E501

        self._default_show_ancestor_items = default_show_ancestor_items

    @property
    def default_show_descendant_items(self):
        """Gets the default_show_descendant_items of this Tracker.  # noqa: E501

        Default Outline should show Descendant Items or not  # noqa: E501

        :return: The default_show_descendant_items of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._default_show_descendant_items

    @default_show_descendant_items.setter
    def default_show_descendant_items(self, default_show_descendant_items):
        """Sets the default_show_descendant_items of this Tracker.

        Default Outline should show Descendant Items or not  # noqa: E501

        :param default_show_descendant_items: The default_show_descendant_items of this Tracker.  # noqa: E501
        :type: bool
        """
        if default_show_descendant_items is None:
            raise ValueError("Invalid value for `default_show_descendant_items`, must not be `None`")  # noqa: E501

        self._default_show_descendant_items = default_show_descendant_items

    @property
    def deleted(self):
        """Gets the deleted of this Tracker.  # noqa: E501

        Indicator if the tracker is deleted  # noqa: E501

        :return: The deleted of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Tracker.

        Indicator if the tracker is deleted  # noqa: E501

        :param deleted: The deleted of this Tracker.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Tracker.  # noqa: E501

        Description of the entity  # noqa: E501

        :return: The description of this Tracker.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tracker.

        Description of the entity  # noqa: E501

        :param description: The description of this Tracker.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_format(self):
        """Gets the description_format of this Tracker.  # noqa: E501

        Description format of the entity  # noqa: E501

        :return: The description_format of this Tracker.  # noqa: E501
        :rtype: str
        """
        return self._description_format

    @description_format.setter
    def description_format(self, description_format):
        """Sets the description_format of this Tracker.

        Description format of the entity  # noqa: E501

        :param description_format: The description_format of this Tracker.  # noqa: E501
        :type: str
        """
        allowed_values = ["PlainText", "Html", "Wiki"]  # noqa: E501
        if description_format not in allowed_values:
            raise ValueError(
                "Invalid value for `description_format` ({0}), must be one of {1}"  # noqa: E501
                .format(description_format, allowed_values)
            )

        self._description_format = description_format

    @property
    def hidden(self):
        """Gets the hidden of this Tracker.  # noqa: E501

        Indicator if the tracker is hidden  # noqa: E501

        :return: The hidden of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Tracker.

        Indicator if the tracker is hidden  # noqa: E501

        :param hidden: The hidden of this Tracker.  # noqa: E501
        :type: bool
        """
        if hidden is None:
            raise ValueError("Invalid value for `hidden`, must not be `None`")  # noqa: E501

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Tracker.  # noqa: E501

        Id of the entity  # noqa: E501

        :return: The id of this Tracker.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tracker.

        Id of the entity  # noqa: E501

        :param id: The id of this Tracker.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key_name(self):
        """Gets the key_name of this Tracker.  # noqa: E501

        Keyname of a tracker  # noqa: E501

        :return: The key_name of this Tracker.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this Tracker.

        Keyname of a tracker  # noqa: E501

        :param key_name: The key_name of this Tracker.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    @property
    def modified_at(self):
        """Gets the modified_at of this Tracker.  # noqa: E501

        The date when the entity was modified  # noqa: E501

        :return: The modified_at of this Tracker.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Tracker.

        The date when the entity was modified  # noqa: E501

        :param modified_at: The modified_at of this Tracker.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this Tracker.  # noqa: E501


        :return: The modified_by of this Tracker.  # noqa: E501
        :rtype: UserReference
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Tracker.


        :param modified_by: The modified_by of this Tracker.  # noqa: E501
        :type: UserReference
        """

        self._modified_by = modified_by

    @property
    def name(self):
        """Gets the name of this Tracker.  # noqa: E501

        Name of the entity  # noqa: E501

        :return: The name of this Tracker.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tracker.

        Name of the entity  # noqa: E501

        :param name: The name of this Tracker.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def only_workflow_can_create_new_referring_item(self):
        """Gets the only_workflow_can_create_new_referring_item of this Tracker.  # noqa: E501

        If true, then the only way to create new referring items is through workflow actions  # noqa: E501

        :return: The only_workflow_can_create_new_referring_item of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._only_workflow_can_create_new_referring_item

    @only_workflow_can_create_new_referring_item.setter
    def only_workflow_can_create_new_referring_item(self, only_workflow_can_create_new_referring_item):
        """Sets the only_workflow_can_create_new_referring_item of this Tracker.

        If true, then the only way to create new referring items is through workflow actions  # noqa: E501

        :param only_workflow_can_create_new_referring_item: The only_workflow_can_create_new_referring_item of this Tracker.  # noqa: E501
        :type: bool
        """
        if only_workflow_can_create_new_referring_item is None:
            raise ValueError("Invalid value for `only_workflow_can_create_new_referring_item`, must not be `None`")  # noqa: E501

        self._only_workflow_can_create_new_referring_item = only_workflow_can_create_new_referring_item

    @property
    def project(self):
        """Gets the project of this Tracker.  # noqa: E501


        :return: The project of this Tracker.  # noqa: E501
        :rtype: ProjectReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Tracker.


        :param project: The project of this Tracker.  # noqa: E501
        :type: ProjectReference
        """

        self._project = project

    @property
    def shared_in_working_set(self):
        """Gets the shared_in_working_set of this Tracker.  # noqa: E501

        If the tracker is shared in a WorkingSet  # noqa: E501

        :return: The shared_in_working_set of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._shared_in_working_set

    @shared_in_working_set.setter
    def shared_in_working_set(self, shared_in_working_set):
        """Sets the shared_in_working_set of this Tracker.

        If the tracker is shared in a WorkingSet  # noqa: E501

        :param shared_in_working_set: The shared_in_working_set of this Tracker.  # noqa: E501
        :type: bool
        """

        self._shared_in_working_set = shared_in_working_set

    @property
    def template_tracker(self):
        """Gets the template_tracker of this Tracker.  # noqa: E501


        :return: The template_tracker of this Tracker.  # noqa: E501
        :rtype: TrackerReference
        """
        return self._template_tracker

    @template_tracker.setter
    def template_tracker(self, template_tracker):
        """Sets the template_tracker of this Tracker.


        :param template_tracker: The template_tracker of this Tracker.  # noqa: E501
        :type: TrackerReference
        """

        self._template_tracker = template_tracker

    @property
    def tracker_field_layout_settings_model(self):
        """Gets the tracker_field_layout_settings_model of this Tracker.  # noqa: E501


        :return: The tracker_field_layout_settings_model of this Tracker.  # noqa: E501
        :rtype: TrackerFieldLayoutSettings
        """
        return self._tracker_field_layout_settings_model

    @tracker_field_layout_settings_model.setter
    def tracker_field_layout_settings_model(self, tracker_field_layout_settings_model):
        """Sets the tracker_field_layout_settings_model of this Tracker.


        :param tracker_field_layout_settings_model: The tracker_field_layout_settings_model of this Tracker.  # noqa: E501
        :type: TrackerFieldLayoutSettings
        """

        self._tracker_field_layout_settings_model = tracker_field_layout_settings_model

    @property
    def type(self):
        """Gets the type of this Tracker.  # noqa: E501


        :return: The type of this Tracker.  # noqa: E501
        :rtype: TrackerTypeReference
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tracker.


        :param type: The type of this Tracker.  # noqa: E501
        :type: TrackerTypeReference
        """

        self._type = type

    @property
    def using_quick_transitions(self):
        """Gets the using_quick_transitions of this Tracker.  # noqa: E501

        If true, then every transition will be executed immediately (if possible) without opening an editor for the item  # noqa: E501

        :return: The using_quick_transitions of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._using_quick_transitions

    @using_quick_transitions.setter
    def using_quick_transitions(self, using_quick_transitions):
        """Sets the using_quick_transitions of this Tracker.

        If true, then every transition will be executed immediately (if possible) without opening an editor for the item  # noqa: E501

        :param using_quick_transitions: The using_quick_transitions of this Tracker.  # noqa: E501
        :type: bool
        """
        if using_quick_transitions is None:
            raise ValueError("Invalid value for `using_quick_transitions`, must not be `None`")  # noqa: E501

        self._using_quick_transitions = using_quick_transitions

    @property
    def using_workflow(self):
        """Gets the using_workflow of this Tracker.  # noqa: E501

        Should transitions and workflow actions be available in the tracker or not  # noqa: E501

        :return: The using_workflow of this Tracker.  # noqa: E501
        :rtype: bool
        """
        return self._using_workflow

    @using_workflow.setter
    def using_workflow(self, using_workflow):
        """Sets the using_workflow of this Tracker.

        Should transitions and workflow actions be available in the tracker or not  # noqa: E501

        :param using_workflow: The using_workflow of this Tracker.  # noqa: E501
        :type: bool
        """
        if using_workflow is None:
            raise ValueError("Invalid value for `using_workflow`, must not be `None`")  # noqa: E501

        self._using_workflow = using_workflow

    @property
    def version(self):
        """Gets the version of this Tracker.  # noqa: E501

        Version of a tracker  # noqa: E501

        :return: The version of this Tracker.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Tracker.

        Version of a tracker  # noqa: E501

        :param version: The version of this Tracker.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tracker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tracker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
