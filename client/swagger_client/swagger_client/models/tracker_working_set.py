# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerWorkingSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baseline': 'TrackerBaselineReference',
        'branch': 'BranchReference',
        'created_at': 'datetime',
        'created_by': 'UserReference',
        'deleted': 'bool',
        'shared_in_working_set': 'bool',
        'working_set': 'WorkingSetReference'
    }

    attribute_map = {
        'baseline': 'baseline',
        'branch': 'branch',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'deleted': 'deleted',
        'shared_in_working_set': 'sharedInWorkingSet',
        'working_set': 'workingSet'
    }

    def __init__(self, baseline=None, branch=None, created_at=None, created_by=None, deleted=None, shared_in_working_set=None, working_set=None):  # noqa: E501
        """TrackerWorkingSet - a model defined in Swagger"""  # noqa: E501
        self._baseline = None
        self._branch = None
        self._created_at = None
        self._created_by = None
        self._deleted = None
        self._shared_in_working_set = None
        self._working_set = None
        self.discriminator = None
        if baseline is not None:
            self.baseline = baseline
        if branch is not None:
            self.branch = branch
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if deleted is not None:
            self.deleted = deleted
        if shared_in_working_set is not None:
            self.shared_in_working_set = shared_in_working_set
        if working_set is not None:
            self.working_set = working_set

    @property
    def baseline(self):
        """Gets the baseline of this TrackerWorkingSet.  # noqa: E501


        :return: The baseline of this TrackerWorkingSet.  # noqa: E501
        :rtype: TrackerBaselineReference
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this TrackerWorkingSet.


        :param baseline: The baseline of this TrackerWorkingSet.  # noqa: E501
        :type: TrackerBaselineReference
        """

        self._baseline = baseline

    @property
    def branch(self):
        """Gets the branch of this TrackerWorkingSet.  # noqa: E501


        :return: The branch of this TrackerWorkingSet.  # noqa: E501
        :rtype: BranchReference
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this TrackerWorkingSet.


        :param branch: The branch of this TrackerWorkingSet.  # noqa: E501
        :type: BranchReference
        """

        self._branch = branch

    @property
    def created_at(self):
        """Gets the created_at of this TrackerWorkingSet.  # noqa: E501

        The date when the entity was created  # noqa: E501

        :return: The created_at of this TrackerWorkingSet.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TrackerWorkingSet.

        The date when the entity was created  # noqa: E501

        :param created_at: The created_at of this TrackerWorkingSet.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this TrackerWorkingSet.  # noqa: E501


        :return: The created_by of this TrackerWorkingSet.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TrackerWorkingSet.


        :param created_by: The created_by of this TrackerWorkingSet.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def deleted(self):
        """Gets the deleted of this TrackerWorkingSet.  # noqa: E501

        Is the Working-Set deleted or not  # noqa: E501

        :return: The deleted of this TrackerWorkingSet.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TrackerWorkingSet.

        Is the Working-Set deleted or not  # noqa: E501

        :param deleted: The deleted of this TrackerWorkingSet.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def shared_in_working_set(self):
        """Gets the shared_in_working_set of this TrackerWorkingSet.  # noqa: E501

        The Tracker is shared in Working-Set  # noqa: E501

        :return: The shared_in_working_set of this TrackerWorkingSet.  # noqa: E501
        :rtype: bool
        """
        return self._shared_in_working_set

    @shared_in_working_set.setter
    def shared_in_working_set(self, shared_in_working_set):
        """Sets the shared_in_working_set of this TrackerWorkingSet.

        The Tracker is shared in Working-Set  # noqa: E501

        :param shared_in_working_set: The shared_in_working_set of this TrackerWorkingSet.  # noqa: E501
        :type: bool
        """

        self._shared_in_working_set = shared_in_working_set

    @property
    def working_set(self):
        """Gets the working_set of this TrackerWorkingSet.  # noqa: E501


        :return: The working_set of this TrackerWorkingSet.  # noqa: E501
        :rtype: WorkingSetReference
        """
        return self._working_set

    @working_set.setter
    def working_set(self, working_set):
        """Sets the working_set of this TrackerWorkingSet.


        :param working_set: The working_set of this TrackerWorkingSet.  # noqa: E501
        :type: WorkingSetReference
        """

        self._working_set = working_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerWorkingSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerWorkingSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
