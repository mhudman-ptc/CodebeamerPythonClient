# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackerItemMoveRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_mapping': 'list[TrackerItemFieldMappingPair]',
        'items': 'list[TrackerItemReference]',
        'source_tracker': 'TrackerReference',
        'target_tracker': 'TrackerReference'
    }

    attribute_map = {
        'field_mapping': 'fieldMapping',
        'items': 'items',
        'source_tracker': 'sourceTracker',
        'target_tracker': 'targetTracker'
    }

    def __init__(self, field_mapping=None, items=None, source_tracker=None, target_tracker=None):  # noqa: E501
        """TrackerItemMoveRequest - a model defined in Swagger"""  # noqa: E501
        self._field_mapping = None
        self._items = None
        self._source_tracker = None
        self._target_tracker = None
        self.discriminator = None
        self.field_mapping = field_mapping
        if items is not None:
            self.items = items
        self.source_tracker = source_tracker
        self.target_tracker = target_tracker

    @property
    def field_mapping(self):
        """Gets the field_mapping of this TrackerItemMoveRequest.  # noqa: E501

        Field mappings between the Source Tacker and the Target Tracker.  # noqa: E501

        :return: The field_mapping of this TrackerItemMoveRequest.  # noqa: E501
        :rtype: list[TrackerItemFieldMappingPair]
        """
        return self._field_mapping

    @field_mapping.setter
    def field_mapping(self, field_mapping):
        """Sets the field_mapping of this TrackerItemMoveRequest.

        Field mappings between the Source Tacker and the Target Tracker.  # noqa: E501

        :param field_mapping: The field_mapping of this TrackerItemMoveRequest.  # noqa: E501
        :type: list[TrackerItemFieldMappingPair]
        """
        if field_mapping is None:
            raise ValueError("Invalid value for `field_mapping`, must not be `None`")  # noqa: E501

        self._field_mapping = field_mapping

    @property
    def items(self):
        """Gets the items of this TrackerItemMoveRequest.  # noqa: E501

        Optional Tracker Item list. If not provided all Tracker Items from the Source Tracker are moved.  # noqa: E501

        :return: The items of this TrackerItemMoveRequest.  # noqa: E501
        :rtype: list[TrackerItemReference]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this TrackerItemMoveRequest.

        Optional Tracker Item list. If not provided all Tracker Items from the Source Tracker are moved.  # noqa: E501

        :param items: The items of this TrackerItemMoveRequest.  # noqa: E501
        :type: list[TrackerItemReference]
        """

        self._items = items

    @property
    def source_tracker(self):
        """Gets the source_tracker of this TrackerItemMoveRequest.  # noqa: E501


        :return: The source_tracker of this TrackerItemMoveRequest.  # noqa: E501
        :rtype: TrackerReference
        """
        return self._source_tracker

    @source_tracker.setter
    def source_tracker(self, source_tracker):
        """Sets the source_tracker of this TrackerItemMoveRequest.


        :param source_tracker: The source_tracker of this TrackerItemMoveRequest.  # noqa: E501
        :type: TrackerReference
        """
        if source_tracker is None:
            raise ValueError("Invalid value for `source_tracker`, must not be `None`")  # noqa: E501

        self._source_tracker = source_tracker

    @property
    def target_tracker(self):
        """Gets the target_tracker of this TrackerItemMoveRequest.  # noqa: E501


        :return: The target_tracker of this TrackerItemMoveRequest.  # noqa: E501
        :rtype: TrackerReference
        """
        return self._target_tracker

    @target_tracker.setter
    def target_tracker(self, target_tracker):
        """Sets the target_tracker of this TrackerItemMoveRequest.


        :param target_tracker: The target_tracker of this TrackerItemMoveRequest.  # noqa: E501
        :type: TrackerReference
        """
        if target_tracker is None:
            raise ValueError("Invalid value for `target_tracker`, must not be `None`")  # noqa: E501

        self._target_tracker = target_tracker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackerItemMoveRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackerItemMoveRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
