# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExportProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'str',
        'selected_tracker_ids': 'list[int]',
        'skip_associations': 'bool',
        'skip_reports': 'bool',
        'skip_tracker_items': 'bool',
        'skip_wiki_pages': 'bool'
    }

    attribute_map = {
        'password': 'password',
        'selected_tracker_ids': 'selectedTrackerIds',
        'skip_associations': 'skipAssociations',
        'skip_reports': 'skipReports',
        'skip_tracker_items': 'skipTrackerItems',
        'skip_wiki_pages': 'skipWikiPages'
    }

    def __init__(self, password=None, selected_tracker_ids=None, skip_associations=False, skip_reports=False, skip_tracker_items=False, skip_wiki_pages=True):  # noqa: E501
        """ExportProject - a model defined in Swagger"""  # noqa: E501
        self._password = None
        self._selected_tracker_ids = None
        self._skip_associations = None
        self._skip_reports = None
        self._skip_tracker_items = None
        self._skip_wiki_pages = None
        self.discriminator = None
        if password is not None:
            self.password = password
        if selected_tracker_ids is not None:
            self.selected_tracker_ids = selected_tracker_ids
        if skip_associations is not None:
            self.skip_associations = skip_associations
        if skip_reports is not None:
            self.skip_reports = skip_reports
        if skip_tracker_items is not None:
            self.skip_tracker_items = skip_tracker_items
        if skip_wiki_pages is not None:
            self.skip_wiki_pages = skip_wiki_pages

    @property
    def password(self):
        """Gets the password of this ExportProject.  # noqa: E501

        A password that is used during the project encryption.  # noqa: E501

        :return: The password of this ExportProject.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ExportProject.

        A password that is used during the project encryption.  # noqa: E501

        :param password: The password of this ExportProject.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def selected_tracker_ids(self):
        """Gets the selected_tracker_ids of this ExportProject.  # noqa: E501

        If this list is not empty then only the Trackers listed here are exported.  # noqa: E501

        :return: The selected_tracker_ids of this ExportProject.  # noqa: E501
        :rtype: list[int]
        """
        return self._selected_tracker_ids

    @selected_tracker_ids.setter
    def selected_tracker_ids(self, selected_tracker_ids):
        """Sets the selected_tracker_ids of this ExportProject.

        If this list is not empty then only the Trackers listed here are exported.  # noqa: E501

        :param selected_tracker_ids: The selected_tracker_ids of this ExportProject.  # noqa: E501
        :type: list[int]
        """

        self._selected_tracker_ids = selected_tracker_ids

    @property
    def skip_associations(self):
        """Gets the skip_associations of this ExportProject.  # noqa: E501

        If true, then the Associations are not exported  # noqa: E501

        :return: The skip_associations of this ExportProject.  # noqa: E501
        :rtype: bool
        """
        return self._skip_associations

    @skip_associations.setter
    def skip_associations(self, skip_associations):
        """Sets the skip_associations of this ExportProject.

        If true, then the Associations are not exported  # noqa: E501

        :param skip_associations: The skip_associations of this ExportProject.  # noqa: E501
        :type: bool
        """

        self._skip_associations = skip_associations

    @property
    def skip_reports(self):
        """Gets the skip_reports of this ExportProject.  # noqa: E501

        If true, then the Reports are not exported  # noqa: E501

        :return: The skip_reports of this ExportProject.  # noqa: E501
        :rtype: bool
        """
        return self._skip_reports

    @skip_reports.setter
    def skip_reports(self, skip_reports):
        """Sets the skip_reports of this ExportProject.

        If true, then the Reports are not exported  # noqa: E501

        :param skip_reports: The skip_reports of this ExportProject.  # noqa: E501
        :type: bool
        """

        self._skip_reports = skip_reports

    @property
    def skip_tracker_items(self):
        """Gets the skip_tracker_items of this ExportProject.  # noqa: E501

        If true, then the Tracker Items are not exported  # noqa: E501

        :return: The skip_tracker_items of this ExportProject.  # noqa: E501
        :rtype: bool
        """
        return self._skip_tracker_items

    @skip_tracker_items.setter
    def skip_tracker_items(self, skip_tracker_items):
        """Sets the skip_tracker_items of this ExportProject.

        If true, then the Tracker Items are not exported  # noqa: E501

        :param skip_tracker_items: The skip_tracker_items of this ExportProject.  # noqa: E501
        :type: bool
        """

        self._skip_tracker_items = skip_tracker_items

    @property
    def skip_wiki_pages(self):
        """Gets the skip_wiki_pages of this ExportProject.  # noqa: E501

        If true, then the Wiki PAges are not exported  # noqa: E501

        :return: The skip_wiki_pages of this ExportProject.  # noqa: E501
        :rtype: bool
        """
        return self._skip_wiki_pages

    @skip_wiki_pages.setter
    def skip_wiki_pages(self, skip_wiki_pages):
        """Sets the skip_wiki_pages of this ExportProject.

        If true, then the Wiki PAges are not exported  # noqa: E501

        :param skip_wiki_pages: The skip_wiki_pages of this ExportProject.  # noqa: E501
        :type: bool
        """

        self._skip_wiki_pages = skip_wiki_pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
