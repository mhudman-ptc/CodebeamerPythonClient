# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Association(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baseline_id': 'int',
        'bi_directional_propagation': 'bool',
        'created_at': 'datetime',
        'created_by': 'UserReference',
        'description': 'str',
        'description_format': 'str',
        '_from': 'AbstractReference',
        'id': 'int',
        'name': 'str',
        'propagating_dependencies': 'bool',
        'propagating_suspects': 'bool',
        'reverse_propagation': 'bool',
        'to': 'AbstractReference',
        'type': 'AssociationTypeReference',
        'url': 'str'
    }

    attribute_map = {
        'baseline_id': 'baselineId',
        'bi_directional_propagation': 'biDirectionalPropagation',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'description': 'description',
        'description_format': 'descriptionFormat',
        '_from': 'from',
        'id': 'id',
        'name': 'name',
        'propagating_dependencies': 'propagatingDependencies',
        'propagating_suspects': 'propagatingSuspects',
        'reverse_propagation': 'reversePropagation',
        'to': 'to',
        'type': 'type',
        'url': 'url'
    }

    def __init__(self, baseline_id=None, bi_directional_propagation=None, created_at=None, created_by=None, description=None, description_format=None, _from=None, id=None, name=None, propagating_dependencies=None, propagating_suspects=None, reverse_propagation=None, to=None, type=None, url=None):  # noqa: E501
        """Association - a model defined in Swagger"""  # noqa: E501
        self._baseline_id = None
        self._bi_directional_propagation = None
        self._created_at = None
        self._created_by = None
        self._description = None
        self._description_format = None
        self.__from = None
        self._id = None
        self._name = None
        self._propagating_dependencies = None
        self._propagating_suspects = None
        self._reverse_propagation = None
        self._to = None
        self._type = None
        self._url = None
        self.discriminator = None
        if baseline_id is not None:
            self.baseline_id = baseline_id
        if bi_directional_propagation is not None:
            self.bi_directional_propagation = bi_directional_propagation
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if description_format is not None:
            self.description_format = description_format
        self._from = _from
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if propagating_dependencies is not None:
            self.propagating_dependencies = propagating_dependencies
        if propagating_suspects is not None:
            self.propagating_suspects = propagating_suspects
        if reverse_propagation is not None:
            self.reverse_propagation = reverse_propagation
        if to is not None:
            self.to = to
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url

    @property
    def baseline_id(self):
        """Gets the baseline_id of this Association.  # noqa: E501

        Baseline ID  # noqa: E501

        :return: The baseline_id of this Association.  # noqa: E501
        :rtype: int
        """
        return self._baseline_id

    @baseline_id.setter
    def baseline_id(self, baseline_id):
        """Sets the baseline_id of this Association.

        Baseline ID  # noqa: E501

        :param baseline_id: The baseline_id of this Association.  # noqa: E501
        :type: int
        """

        self._baseline_id = baseline_id

    @property
    def bi_directional_propagation(self):
        """Gets the bi_directional_propagation of this Association.  # noqa: E501

        Bi-directional reference  # noqa: E501

        :return: The bi_directional_propagation of this Association.  # noqa: E501
        :rtype: bool
        """
        return self._bi_directional_propagation

    @bi_directional_propagation.setter
    def bi_directional_propagation(self, bi_directional_propagation):
        """Sets the bi_directional_propagation of this Association.

        Bi-directional reference  # noqa: E501

        :param bi_directional_propagation: The bi_directional_propagation of this Association.  # noqa: E501
        :type: bool
        """

        self._bi_directional_propagation = bi_directional_propagation

    @property
    def created_at(self):
        """Gets the created_at of this Association.  # noqa: E501

        The date when the entity was created  # noqa: E501

        :return: The created_at of this Association.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Association.

        The date when the entity was created  # noqa: E501

        :param created_at: The created_at of this Association.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Association.  # noqa: E501


        :return: The created_by of this Association.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Association.


        :param created_by: The created_by of this Association.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this Association.  # noqa: E501

        Description of the entity  # noqa: E501

        :return: The description of this Association.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Association.

        Description of the entity  # noqa: E501

        :param description: The description of this Association.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_format(self):
        """Gets the description_format of this Association.  # noqa: E501

        Description format of the entity  # noqa: E501

        :return: The description_format of this Association.  # noqa: E501
        :rtype: str
        """
        return self._description_format

    @description_format.setter
    def description_format(self, description_format):
        """Sets the description_format of this Association.

        Description format of the entity  # noqa: E501

        :param description_format: The description_format of this Association.  # noqa: E501
        :type: str
        """
        allowed_values = ["PlainText", "Html", "Wiki"]  # noqa: E501
        if description_format not in allowed_values:
            raise ValueError(
                "Invalid value for `description_format` ({0}), must be one of {1}"  # noqa: E501
                .format(description_format, allowed_values)
            )

        self._description_format = description_format

    @property
    def _from(self):
        """Gets the _from of this Association.  # noqa: E501


        :return: The _from of this Association.  # noqa: E501
        :rtype: AbstractReference
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Association.


        :param _from: The _from of this Association.  # noqa: E501
        :type: AbstractReference
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this Association.  # noqa: E501

        Id of the entity  # noqa: E501

        :return: The id of this Association.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Association.

        Id of the entity  # noqa: E501

        :param id: The id of this Association.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Association.  # noqa: E501

        Name of the entity  # noqa: E501

        :return: The name of this Association.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Association.

        Name of the entity  # noqa: E501

        :param name: The name of this Association.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def propagating_dependencies(self):
        """Gets the propagating_dependencies of this Association.  # noqa: E501

        Propagating dependencies  # noqa: E501

        :return: The propagating_dependencies of this Association.  # noqa: E501
        :rtype: bool
        """
        return self._propagating_dependencies

    @propagating_dependencies.setter
    def propagating_dependencies(self, propagating_dependencies):
        """Sets the propagating_dependencies of this Association.

        Propagating dependencies  # noqa: E501

        :param propagating_dependencies: The propagating_dependencies of this Association.  # noqa: E501
        :type: bool
        """

        self._propagating_dependencies = propagating_dependencies

    @property
    def propagating_suspects(self):
        """Gets the propagating_suspects of this Association.  # noqa: E501

        Propagating suspects  # noqa: E501

        :return: The propagating_suspects of this Association.  # noqa: E501
        :rtype: bool
        """
        return self._propagating_suspects

    @propagating_suspects.setter
    def propagating_suspects(self, propagating_suspects):
        """Sets the propagating_suspects of this Association.

        Propagating suspects  # noqa: E501

        :param propagating_suspects: The propagating_suspects of this Association.  # noqa: E501
        :type: bool
        """

        self._propagating_suspects = propagating_suspects

    @property
    def reverse_propagation(self):
        """Gets the reverse_propagation of this Association.  # noqa: E501

        Reverse propagation  # noqa: E501

        :return: The reverse_propagation of this Association.  # noqa: E501
        :rtype: bool
        """
        return self._reverse_propagation

    @reverse_propagation.setter
    def reverse_propagation(self, reverse_propagation):
        """Sets the reverse_propagation of this Association.

        Reverse propagation  # noqa: E501

        :param reverse_propagation: The reverse_propagation of this Association.  # noqa: E501
        :type: bool
        """

        self._reverse_propagation = reverse_propagation

    @property
    def to(self):
        """Gets the to of this Association.  # noqa: E501


        :return: The to of this Association.  # noqa: E501
        :rtype: AbstractReference
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Association.


        :param to: The to of this Association.  # noqa: E501
        :type: AbstractReference
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this Association.  # noqa: E501


        :return: The type of this Association.  # noqa: E501
        :rtype: AssociationTypeReference
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Association.


        :param type: The type of this Association.  # noqa: E501
        :type: AssociationTypeReference
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this Association.  # noqa: E501

        Association to url  # noqa: E501

        :return: The url of this Association.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Association.

        Association to url  # noqa: E501

        :param url: The url of this Association.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Association, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Association):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
