# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_real_result': 'bool',
        'item': 'TrackerItem',
        'outline_level': 'int'
    }

    attribute_map = {
        'is_real_result': 'isRealResult',
        'item': 'item',
        'outline_level': 'outlineLevel'
    }

    def __init__(self, is_real_result=None, item=None, outline_level=None):  # noqa: E501
        """ReportItem - a model defined in Swagger"""  # noqa: E501
        self._is_real_result = None
        self._item = None
        self._outline_level = None
        self.discriminator = None
        if is_real_result is not None:
            self.is_real_result = is_real_result
        if item is not None:
            self.item = item
        if outline_level is not None:
            self.outline_level = outline_level

    @property
    def is_real_result(self):
        """Gets the is_real_result of this ReportItem.  # noqa: E501

        Indicator if the item is a real query result (e.g. not an ancestor item).  # noqa: E501

        :return: The is_real_result of this ReportItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_real_result

    @is_real_result.setter
    def is_real_result(self, is_real_result):
        """Sets the is_real_result of this ReportItem.

        Indicator if the item is a real query result (e.g. not an ancestor item).  # noqa: E501

        :param is_real_result: The is_real_result of this ReportItem.  # noqa: E501
        :type: bool
        """

        self._is_real_result = is_real_result

    @property
    def item(self):
        """Gets the item of this ReportItem.  # noqa: E501


        :return: The item of this ReportItem.  # noqa: E501
        :rtype: TrackerItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this ReportItem.


        :param item: The item of this ReportItem.  # noqa: E501
        :type: TrackerItem
        """

        self._item = item

    @property
    def outline_level(self):
        """Gets the outline_level of this ReportItem.  # noqa: E501

        Item's level in the tracker outline.  # noqa: E501

        :return: The outline_level of this ReportItem.  # noqa: E501
        :rtype: int
        """
        return self._outline_level

    @outline_level.setter
    def outline_level(self, outline_level):
        """Sets the outline_level of this ReportItem.

        Item's level in the tracker outline.  # noqa: E501

        :param outline_level: The outline_level of this ReportItem.  # noqa: E501
        :type: int
        """

        self._outline_level = outline_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
