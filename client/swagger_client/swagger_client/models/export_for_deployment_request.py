# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExportForDeploymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_file_name': 'str',
        'password': 'str',
        'project_settings': 'list[DeploymentProjectExportSettings]',
        'schema_name': 'str',
        'schema_version': 'str'
    }

    attribute_map = {
        'export_file_name': 'exportFileName',
        'password': 'password',
        'project_settings': 'projectSettings',
        'schema_name': 'schemaName',
        'schema_version': 'schemaVersion'
    }

    def __init__(self, export_file_name=None, password=None, project_settings=None, schema_name=None, schema_version=None):  # noqa: E501
        """ExportForDeploymentRequest - a model defined in Swagger"""  # noqa: E501
        self._export_file_name = None
        self._password = None
        self._project_settings = None
        self._schema_name = None
        self._schema_version = None
        self.discriminator = None
        if export_file_name is not None:
            self.export_file_name = export_file_name
        if password is not None:
            self.password = password
        if project_settings is not None:
            self.project_settings = project_settings
        if schema_name is not None:
            self.schema_name = schema_name
        if schema_version is not None:
            self.schema_version = schema_version

    @property
    def export_file_name(self):
        """Gets the export_file_name of this ExportForDeploymentRequest.  # noqa: E501

        Name of the resulting export file (without extension).  # noqa: E501

        :return: The export_file_name of this ExportForDeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._export_file_name

    @export_file_name.setter
    def export_file_name(self, export_file_name):
        """Sets the export_file_name of this ExportForDeploymentRequest.

        Name of the resulting export file (without extension).  # noqa: E501

        :param export_file_name: The export_file_name of this ExportForDeploymentRequest.  # noqa: E501
        :type: str
        """

        self._export_file_name = export_file_name

    @property
    def password(self):
        """Gets the password of this ExportForDeploymentRequest.  # noqa: E501

        A password that is used during the project encryption.  # noqa: E501

        :return: The password of this ExportForDeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ExportForDeploymentRequest.

        A password that is used during the project encryption.  # noqa: E501

        :param password: The password of this ExportForDeploymentRequest.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def project_settings(self):
        """Gets the project_settings of this ExportForDeploymentRequest.  # noqa: E501

        Project settings  # noqa: E501

        :return: The project_settings of this ExportForDeploymentRequest.  # noqa: E501
        :rtype: list[DeploymentProjectExportSettings]
        """
        return self._project_settings

    @project_settings.setter
    def project_settings(self, project_settings):
        """Sets the project_settings of this ExportForDeploymentRequest.

        Project settings  # noqa: E501

        :param project_settings: The project_settings of this ExportForDeploymentRequest.  # noqa: E501
        :type: list[DeploymentProjectExportSettings]
        """

        self._project_settings = project_settings

    @property
    def schema_name(self):
        """Gets the schema_name of this ExportForDeploymentRequest.  # noqa: E501

        Name of deployment settings schema  # noqa: E501

        :return: The schema_name of this ExportForDeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this ExportForDeploymentRequest.

        Name of deployment settings schema  # noqa: E501

        :param schema_name: The schema_name of this ExportForDeploymentRequest.  # noqa: E501
        :type: str
        """

        self._schema_name = schema_name

    @property
    def schema_version(self):
        """Gets the schema_version of this ExportForDeploymentRequest.  # noqa: E501

        Version of deployment settings schema  # noqa: E501

        :return: The schema_version of this ExportForDeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this ExportForDeploymentRequest.

        Version of deployment settings schema  # noqa: E501

        :param schema_version: The schema_version of this ExportForDeploymentRequest.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportForDeploymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportForDeploymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
