# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleReportSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added_permissions': 'list[ReportPermission]',
        'cb_ql': 'str',
        'columns': 'list[ResizableReportColumnSettings]',
        'description': 'str',
        'name': 'str',
        'report_id': 'int',
        'show_all_children': 'bool',
        'show_ancestors': 'bool',
        'show_descendants': 'bool'
    }

    attribute_map = {
        'added_permissions': 'addedPermissions',
        'cb_ql': 'cbQl',
        'columns': 'columns',
        'description': 'description',
        'name': 'name',
        'report_id': 'reportId',
        'show_all_children': 'showAllChildren',
        'show_ancestors': 'showAncestors',
        'show_descendants': 'showDescendants'
    }

    def __init__(self, added_permissions=None, cb_ql=None, columns=None, description=None, name=None, report_id=None, show_all_children=None, show_ancestors=None, show_descendants=None):  # noqa: E501
        """SimpleReportSettings - a model defined in Swagger"""  # noqa: E501
        self._added_permissions = None
        self._cb_ql = None
        self._columns = None
        self._description = None
        self._name = None
        self._report_id = None
        self._show_all_children = None
        self._show_ancestors = None
        self._show_descendants = None
        self.discriminator = None
        if added_permissions is not None:
            self.added_permissions = added_permissions
        self.cb_ql = cb_ql
        self.columns = columns
        self.description = description
        self.name = name
        if report_id is not None:
            self.report_id = report_id
        if show_all_children is not None:
            self.show_all_children = show_all_children
        if show_ancestors is not None:
            self.show_ancestors = show_ancestors
        if show_descendants is not None:
            self.show_descendants = show_descendants

    @property
    def added_permissions(self):
        """Gets the added_permissions of this SimpleReportSettings.  # noqa: E501

        Access permissions for the report.  # noqa: E501

        :return: The added_permissions of this SimpleReportSettings.  # noqa: E501
        :rtype: list[ReportPermission]
        """
        return self._added_permissions

    @added_permissions.setter
    def added_permissions(self, added_permissions):
        """Sets the added_permissions of this SimpleReportSettings.

        Access permissions for the report.  # noqa: E501

        :param added_permissions: The added_permissions of this SimpleReportSettings.  # noqa: E501
        :type: list[ReportPermission]
        """

        self._added_permissions = added_permissions

    @property
    def cb_ql(self):
        """Gets the cb_ql of this SimpleReportSettings.  # noqa: E501

        CbQL query string of the report.  # noqa: E501

        :return: The cb_ql of this SimpleReportSettings.  # noqa: E501
        :rtype: str
        """
        return self._cb_ql

    @cb_ql.setter
    def cb_ql(self, cb_ql):
        """Sets the cb_ql of this SimpleReportSettings.

        CbQL query string of the report.  # noqa: E501

        :param cb_ql: The cb_ql of this SimpleReportSettings.  # noqa: E501
        :type: str
        """
        if cb_ql is None:
            raise ValueError("Invalid value for `cb_ql`, must not be `None`")  # noqa: E501

        self._cb_ql = cb_ql

    @property
    def columns(self):
        """Gets the columns of this SimpleReportSettings.  # noqa: E501

        Column definitions.  # noqa: E501

        :return: The columns of this SimpleReportSettings.  # noqa: E501
        :rtype: list[ResizableReportColumnSettings]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this SimpleReportSettings.

        Column definitions.  # noqa: E501

        :param columns: The columns of this SimpleReportSettings.  # noqa: E501
        :type: list[ResizableReportColumnSettings]
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def description(self):
        """Gets the description of this SimpleReportSettings.  # noqa: E501

        Description of the report.  # noqa: E501

        :return: The description of this SimpleReportSettings.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SimpleReportSettings.

        Description of the report.  # noqa: E501

        :param description: The description of this SimpleReportSettings.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def name(self):
        """Gets the name of this SimpleReportSettings.  # noqa: E501

        Name of the report.  # noqa: E501

        :return: The name of this SimpleReportSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimpleReportSettings.

        Name of the report.  # noqa: E501

        :param name: The name of this SimpleReportSettings.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def report_id(self):
        """Gets the report_id of this SimpleReportSettings.  # noqa: E501

        Id of a report  # noqa: E501

        :return: The report_id of this SimpleReportSettings.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this SimpleReportSettings.

        Id of a report  # noqa: E501

        :param report_id: The report_id of this SimpleReportSettings.  # noqa: E501
        :type: int
        """

        self._report_id = report_id

    @property
    def show_all_children(self):
        """Gets the show_all_children of this SimpleReportSettings.  # noqa: E501

        Indicator to ability to collapse/expand all child items.  # noqa: E501

        :return: The show_all_children of this SimpleReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_all_children

    @show_all_children.setter
    def show_all_children(self, show_all_children):
        """Sets the show_all_children of this SimpleReportSettings.

        Indicator to ability to collapse/expand all child items.  # noqa: E501

        :param show_all_children: The show_all_children of this SimpleReportSettings.  # noqa: E501
        :type: bool
        """

        self._show_all_children = show_all_children

    @property
    def show_ancestors(self):
        """Gets the show_ancestors of this SimpleReportSettings.  # noqa: E501

        Indicator to show the ancestors of a result item.  # noqa: E501

        :return: The show_ancestors of this SimpleReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_ancestors

    @show_ancestors.setter
    def show_ancestors(self, show_ancestors):
        """Sets the show_ancestors of this SimpleReportSettings.

        Indicator to show the ancestors of a result item.  # noqa: E501

        :param show_ancestors: The show_ancestors of this SimpleReportSettings.  # noqa: E501
        :type: bool
        """

        self._show_ancestors = show_ancestors

    @property
    def show_descendants(self):
        """Gets the show_descendants of this SimpleReportSettings.  # noqa: E501

        Indicator to show the descendants of a result item.  # noqa: E501

        :return: The show_descendants of this SimpleReportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_descendants

    @show_descendants.setter
    def show_descendants(self, show_descendants):
        """Sets the show_descendants of this SimpleReportSettings.

        Indicator to show the descendants of a result item.  # noqa: E501

        :param show_descendants: The show_descendants of this SimpleReportSettings.  # noqa: E501
        :type: bool
        """

        self._show_descendants = show_descendants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleReportSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleReportSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
