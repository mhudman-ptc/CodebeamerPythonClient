# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTrackerItemFieldWithItemId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_values': 'list[AbstractFieldValue]',
        'item_id': 'int',
        'table_values': 'list[TableFieldValue]'
    }

    attribute_map = {
        'field_values': 'fieldValues',
        'item_id': 'itemId',
        'table_values': 'tableValues'
    }

    def __init__(self, field_values=None, item_id=None, table_values=None):  # noqa: E501
        """UpdateTrackerItemFieldWithItemId - a model defined in Swagger"""  # noqa: E501
        self._field_values = None
        self._item_id = None
        self._table_values = None
        self.discriminator = None
        if field_values is not None:
            self.field_values = field_values
        if item_id is not None:
            self.item_id = item_id
        if table_values is not None:
            self.table_values = table_values

    @property
    def field_values(self):
        """Gets the field_values of this UpdateTrackerItemFieldWithItemId.  # noqa: E501

        Fields of a tracker item  # noqa: E501

        :return: The field_values of this UpdateTrackerItemFieldWithItemId.  # noqa: E501
        :rtype: list[AbstractFieldValue]
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this UpdateTrackerItemFieldWithItemId.

        Fields of a tracker item  # noqa: E501

        :param field_values: The field_values of this UpdateTrackerItemFieldWithItemId.  # noqa: E501
        :type: list[AbstractFieldValue]
        """

        self._field_values = field_values

    @property
    def item_id(self):
        """Gets the item_id of this UpdateTrackerItemFieldWithItemId.  # noqa: E501

        Id of a tracker item  # noqa: E501

        :return: The item_id of this UpdateTrackerItemFieldWithItemId.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this UpdateTrackerItemFieldWithItemId.

        Id of a tracker item  # noqa: E501

        :param item_id: The item_id of this UpdateTrackerItemFieldWithItemId.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def table_values(self):
        """Gets the table_values of this UpdateTrackerItemFieldWithItemId.  # noqa: E501

        Fields of a tracker item  # noqa: E501

        :return: The table_values of this UpdateTrackerItemFieldWithItemId.  # noqa: E501
        :rtype: list[TableFieldValue]
        """
        return self._table_values

    @table_values.setter
    def table_values(self, table_values):
        """Sets the table_values of this UpdateTrackerItemFieldWithItemId.

        Fields of a tracker item  # noqa: E501

        :param table_values: The table_values of this UpdateTrackerItemFieldWithItemId.  # noqa: E501
        :type: list[TableFieldValue]
        """

        self._table_values = table_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTrackerItemFieldWithItemId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTrackerItemFieldWithItemId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
