# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTestCaseRunRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conclusion': 'str',
        'custom_fields': 'list[AbstractFieldValue]',
        'reported_bug_references': 'list[TrackerItemReference]',
        'result': 'str',
        'run_time': 'int',
        'test_case_reference': 'TrackerItemReference'
    }

    attribute_map = {
        'conclusion': 'conclusion',
        'custom_fields': 'customFields',
        'reported_bug_references': 'reportedBugReferences',
        'result': 'result',
        'run_time': 'runTime',
        'test_case_reference': 'testCaseReference'
    }

    def __init__(self, conclusion=None, custom_fields=None, reported_bug_references=None, result=None, run_time=None, test_case_reference=None):  # noqa: E501
        """UpdateTestCaseRunRequest - a model defined in Swagger"""  # noqa: E501
        self._conclusion = None
        self._custom_fields = None
        self._reported_bug_references = None
        self._result = None
        self._run_time = None
        self._test_case_reference = None
        self.discriminator = None
        if conclusion is not None:
            self.conclusion = conclusion
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if reported_bug_references is not None:
            self.reported_bug_references = reported_bug_references
        self.result = result
        if run_time is not None:
            self.run_time = run_time
        self.test_case_reference = test_case_reference

    @property
    def conclusion(self):
        """Gets the conclusion of this UpdateTestCaseRunRequest.  # noqa: E501

        Optional conclusion text  # noqa: E501

        :return: The conclusion of this UpdateTestCaseRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this UpdateTestCaseRunRequest.

        Optional conclusion text  # noqa: E501

        :param conclusion: The conclusion of this UpdateTestCaseRunRequest.  # noqa: E501
        :type: str
        """

        self._conclusion = conclusion

    @property
    def custom_fields(self):
        """Gets the custom_fields of this UpdateTestCaseRunRequest.  # noqa: E501

        Optional field values to set on the Test Run  # noqa: E501

        :return: The custom_fields of this UpdateTestCaseRunRequest.  # noqa: E501
        :rtype: list[AbstractFieldValue]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this UpdateTestCaseRunRequest.

        Optional field values to set on the Test Run  # noqa: E501

        :param custom_fields: The custom_fields of this UpdateTestCaseRunRequest.  # noqa: E501
        :type: list[AbstractFieldValue]
        """

        self._custom_fields = custom_fields

    @property
    def reported_bug_references(self):
        """Gets the reported_bug_references of this UpdateTestCaseRunRequest.  # noqa: E501

        Optional reference list of Bugs attached to the Test result  # noqa: E501

        :return: The reported_bug_references of this UpdateTestCaseRunRequest.  # noqa: E501
        :rtype: list[TrackerItemReference]
        """
        return self._reported_bug_references

    @reported_bug_references.setter
    def reported_bug_references(self, reported_bug_references):
        """Sets the reported_bug_references of this UpdateTestCaseRunRequest.

        Optional reference list of Bugs attached to the Test result  # noqa: E501

        :param reported_bug_references: The reported_bug_references of this UpdateTestCaseRunRequest.  # noqa: E501
        :type: list[TrackerItemReference]
        """

        self._reported_bug_references = reported_bug_references

    @property
    def result(self):
        """Gets the result of this UpdateTestCaseRunRequest.  # noqa: E501

        Result of the test case  # noqa: E501

        :return: The result of this UpdateTestCaseRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this UpdateTestCaseRunRequest.

        Result of the test case  # noqa: E501

        :param result: The result of this UpdateTestCaseRunRequest.  # noqa: E501
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501
        allowed_values = ["PASSED", "FAILED", "BLOCKED", "NOT_APPLICABLE"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def run_time(self):
        """Gets the run_time of this UpdateTestCaseRunRequest.  # noqa: E501

        Optional runtime in seconds  # noqa: E501

        :return: The run_time of this UpdateTestCaseRunRequest.  # noqa: E501
        :rtype: int
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this UpdateTestCaseRunRequest.

        Optional runtime in seconds  # noqa: E501

        :param run_time: The run_time of this UpdateTestCaseRunRequest.  # noqa: E501
        :type: int
        """

        self._run_time = run_time

    @property
    def test_case_reference(self):
        """Gets the test_case_reference of this UpdateTestCaseRunRequest.  # noqa: E501


        :return: The test_case_reference of this UpdateTestCaseRunRequest.  # noqa: E501
        :rtype: TrackerItemReference
        """
        return self._test_case_reference

    @test_case_reference.setter
    def test_case_reference(self, test_case_reference):
        """Sets the test_case_reference of this UpdateTestCaseRunRequest.


        :param test_case_reference: The test_case_reference of this UpdateTestCaseRunRequest.  # noqa: E501
        :type: TrackerItemReference
        """
        if test_case_reference is None:
            raise ValueError("Invalid value for `test_case_reference`, must not be `None`")  # noqa: E501

        self._test_case_reference = test_case_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTestCaseRunRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTestCaseRunRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
