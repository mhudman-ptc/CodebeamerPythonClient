# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Comment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachments': 'list[Attachment]',
        'comment': 'str',
        'comment_format': 'str',
        'created_at': 'datetime',
        'created_by': 'UserReference',
        'id': 'int',
        'modified_at': 'datetime',
        'modified_by': 'UserReference',
        'name': 'str',
        'parent': 'CommentReference',
        'version': 'int'
    }

    attribute_map = {
        'attachments': 'attachments',
        'comment': 'comment',
        'comment_format': 'commentFormat',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'id': 'id',
        'modified_at': 'modifiedAt',
        'modified_by': 'modifiedBy',
        'name': 'name',
        'parent': 'parent',
        'version': 'version'
    }

    def __init__(self, attachments=None, comment=None, comment_format=None, created_at=None, created_by=None, id=None, modified_at=None, modified_by=None, name=None, parent=None, version=None):  # noqa: E501
        """Comment - a model defined in Swagger"""  # noqa: E501
        self._attachments = None
        self._comment = None
        self._comment_format = None
        self._created_at = None
        self._created_by = None
        self._id = None
        self._modified_at = None
        self._modified_by = None
        self._name = None
        self._parent = None
        self._version = None
        self.discriminator = None
        if attachments is not None:
            self.attachments = attachments
        if comment is not None:
            self.comment = comment
        if comment_format is not None:
            self.comment_format = comment_format
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if id is not None:
            self.id = id
        if modified_at is not None:
            self.modified_at = modified_at
        if modified_by is not None:
            self.modified_by = modified_by
        if name is not None:
            self.name = name
        if parent is not None:
            self.parent = parent
        if version is not None:
            self.version = version

    @property
    def attachments(self):
        """Gets the attachments of this Comment.  # noqa: E501

        Attachments of a comment  # noqa: E501

        :return: The attachments of this Comment.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Comment.

        Attachments of a comment  # noqa: E501

        :param attachments: The attachments of this Comment.  # noqa: E501
        :type: list[Attachment]
        """

        self._attachments = attachments

    @property
    def comment(self):
        """Gets the comment of this Comment.  # noqa: E501

        Text of a comment  # noqa: E501

        :return: The comment of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Comment.

        Text of a comment  # noqa: E501

        :param comment: The comment of this Comment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def comment_format(self):
        """Gets the comment_format of this Comment.  # noqa: E501

        Format of a comment  # noqa: E501

        :return: The comment_format of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._comment_format

    @comment_format.setter
    def comment_format(self, comment_format):
        """Sets the comment_format of this Comment.

        Format of a comment  # noqa: E501

        :param comment_format: The comment_format of this Comment.  # noqa: E501
        :type: str
        """
        allowed_values = ["PlainText", "Html", "Wiki"]  # noqa: E501
        if comment_format not in allowed_values:
            raise ValueError(
                "Invalid value for `comment_format` ({0}), must be one of {1}"  # noqa: E501
                .format(comment_format, allowed_values)
            )

        self._comment_format = comment_format

    @property
    def created_at(self):
        """Gets the created_at of this Comment.  # noqa: E501

        The date when the entity was created  # noqa: E501

        :return: The created_at of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.

        The date when the entity was created  # noqa: E501

        :param created_at: The created_at of this Comment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Comment.  # noqa: E501


        :return: The created_by of this Comment.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Comment.


        :param created_by: The created_by of this Comment.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this Comment.  # noqa: E501

        Id of the entity  # noqa: E501

        :return: The id of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        Id of the entity  # noqa: E501

        :param id: The id of this Comment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def modified_at(self):
        """Gets the modified_at of this Comment.  # noqa: E501

        The date when the entity was modified  # noqa: E501

        :return: The modified_at of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Comment.

        The date when the entity was modified  # noqa: E501

        :param modified_at: The modified_at of this Comment.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this Comment.  # noqa: E501


        :return: The modified_by of this Comment.  # noqa: E501
        :rtype: UserReference
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Comment.


        :param modified_by: The modified_by of this Comment.  # noqa: E501
        :type: UserReference
        """

        self._modified_by = modified_by

    @property
    def name(self):
        """Gets the name of this Comment.  # noqa: E501

        Name of the entity  # noqa: E501

        :return: The name of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Comment.

        Name of the entity  # noqa: E501

        :param name: The name of this Comment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Comment.  # noqa: E501


        :return: The parent of this Comment.  # noqa: E501
        :rtype: CommentReference
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Comment.


        :param parent: The parent of this Comment.  # noqa: E501
        :type: CommentReference
        """

        self._parent = parent

    @property
    def version(self):
        """Gets the version of this Comment.  # noqa: E501

        Version of a comment  # noqa: E501

        :return: The version of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Comment.

        Version of a comment  # noqa: E501

        :param version: The version of this Comment.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Comment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
