# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbstractFieldValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_id': 'int',
        'name': 'str',
        'shared_field_name': 'str',
        'shared_field_names': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'field_id': 'fieldId',
        'name': 'name',
        'shared_field_name': 'sharedFieldName',
        'shared_field_names': 'sharedFieldNames',
        'type': 'type'
    }

    discriminator_value_class_map = {
          'DecimalFieldValue': 'DecimalFieldValue',
'CountryFieldMultiValue': 'CountryFieldMultiValue',
'CountryFieldValue': 'CountryFieldValue',
'BoolFieldValue': 'BoolFieldValue',
'UrlFieldValue': 'UrlFieldValue',
'NotSupportedFieldValue': 'NotSupportedFieldValue',
'ChoiceFieldValue': 'ChoiceFieldValue',
'DateFieldValue': 'DateFieldValue',
'IntegerFieldValue': 'IntegerFieldValue',
'ReferredTestStepFieldValue': 'ReferredTestStepFieldValue',
'ChoiceFieldMultiValue': 'ChoiceFieldMultiValue',
'LanguageFieldValue': 'LanguageFieldValue',
'LanguageFieldMultiValue': 'LanguageFieldMultiValue',
'ColorFieldValue': 'ColorFieldValue',
'WikiTextFieldMultiValue': 'WikiTextFieldMultiValue',
'DurationFieldValue': 'DurationFieldValue',
'TextFieldValue': 'TextFieldValue',
'WikiTextFieldValue': 'WikiTextFieldValue',
'TableFieldValue': 'TableFieldValue'    }

    def __init__(self, field_id=None, name=None, shared_field_name=None, shared_field_names=None, type=None):  # noqa: E501
        """AbstractFieldValue - a model defined in Swagger"""  # noqa: E501
        self._field_id = None
        self._name = None
        self._shared_field_name = None
        self._shared_field_names = None
        self._type = None
        self.discriminator = 'type'
        if field_id is not None:
            self.field_id = field_id
        if name is not None:
            self.name = name
        if shared_field_name is not None:
            self.shared_field_name = shared_field_name
        if shared_field_names is not None:
            self.shared_field_names = shared_field_names
        self.type = type

    @property
    def field_id(self):
        """Gets the field_id of this AbstractFieldValue.  # noqa: E501

        Id of the field  # noqa: E501

        :return: The field_id of this AbstractFieldValue.  # noqa: E501
        :rtype: int
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this AbstractFieldValue.

        Id of the field  # noqa: E501

        :param field_id: The field_id of this AbstractFieldValue.  # noqa: E501
        :type: int
        """

        self._field_id = field_id

    @property
    def name(self):
        """Gets the name of this AbstractFieldValue.  # noqa: E501

        Name of the field  # noqa: E501

        :return: The name of this AbstractFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AbstractFieldValue.

        Name of the field  # noqa: E501

        :param name: The name of this AbstractFieldValue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def shared_field_name(self):
        """Gets the shared_field_name of this AbstractFieldValue.  # noqa: E501

        The name of a shared field assigned to the field. This can be specified as an alternative to fieldId.  # noqa: E501

        :return: The shared_field_name of this AbstractFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._shared_field_name

    @shared_field_name.setter
    def shared_field_name(self, shared_field_name):
        """Sets the shared_field_name of this AbstractFieldValue.

        The name of a shared field assigned to the field. This can be specified as an alternative to fieldId.  # noqa: E501

        :param shared_field_name: The shared_field_name of this AbstractFieldValue.  # noqa: E501
        :type: str
        """

        self._shared_field_name = shared_field_name

    @property
    def shared_field_names(self):
        """Gets the shared_field_names of this AbstractFieldValue.  # noqa: E501

        The names of a shared fields assigned to the field.  # noqa: E501

        :return: The shared_field_names of this AbstractFieldValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_field_names

    @shared_field_names.setter
    def shared_field_names(self, shared_field_names):
        """Sets the shared_field_names of this AbstractFieldValue.

        The names of a shared fields assigned to the field.  # noqa: E501

        :param shared_field_names: The shared_field_names of this AbstractFieldValue.  # noqa: E501
        :type: list[str]
        """

        self._shared_field_names = shared_field_names

    @property
    def type(self):
        """Gets the type of this AbstractFieldValue.  # noqa: E501

        Type of the field  # noqa: E501

        :return: The type of this AbstractFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbstractFieldValue.

        Type of the field  # noqa: E501

        :param type: The type of this AbstractFieldValue.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbstractFieldValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractFieldValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
