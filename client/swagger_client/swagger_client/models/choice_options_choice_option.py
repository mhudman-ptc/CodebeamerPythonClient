# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChoiceOptionsChoiceOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'default_in_statuses': 'list[int]',
        'description': 'str',
        'id': 'int',
        'meanings': 'list[str]',
        'name': 'str',
        'restricted_to_statuses': 'list[int]'
    }

    attribute_map = {
        'color': 'color',
        'default_in_statuses': 'defaultInStatuses',
        'description': 'description',
        'id': 'id',
        'meanings': 'meanings',
        'name': 'name',
        'restricted_to_statuses': 'restrictedToStatuses'
    }

    def __init__(self, color=None, default_in_statuses=None, description=None, id=None, meanings=None, name=None, restricted_to_statuses=None):  # noqa: E501
        """ChoiceOptionsChoiceOption - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._default_in_statuses = None
        self._description = None
        self._id = None
        self._meanings = None
        self._name = None
        self._restricted_to_statuses = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if default_in_statuses is not None:
            self.default_in_statuses = default_in_statuses
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if meanings is not None:
            self.meanings = meanings
        if name is not None:
            self.name = name
        if restricted_to_statuses is not None:
            self.restricted_to_statuses = restricted_to_statuses

    @property
    def color(self):
        """Gets the color of this ChoiceOptionsChoiceOption.  # noqa: E501


        :return: The color of this ChoiceOptionsChoiceOption.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ChoiceOptionsChoiceOption.


        :param color: The color of this ChoiceOptionsChoiceOption.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def default_in_statuses(self):
        """Gets the default_in_statuses of this ChoiceOptionsChoiceOption.  # noqa: E501


        :return: The default_in_statuses of this ChoiceOptionsChoiceOption.  # noqa: E501
        :rtype: list[int]
        """
        return self._default_in_statuses

    @default_in_statuses.setter
    def default_in_statuses(self, default_in_statuses):
        """Sets the default_in_statuses of this ChoiceOptionsChoiceOption.


        :param default_in_statuses: The default_in_statuses of this ChoiceOptionsChoiceOption.  # noqa: E501
        :type: list[int]
        """

        self._default_in_statuses = default_in_statuses

    @property
    def description(self):
        """Gets the description of this ChoiceOptionsChoiceOption.  # noqa: E501


        :return: The description of this ChoiceOptionsChoiceOption.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChoiceOptionsChoiceOption.


        :param description: The description of this ChoiceOptionsChoiceOption.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ChoiceOptionsChoiceOption.  # noqa: E501


        :return: The id of this ChoiceOptionsChoiceOption.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChoiceOptionsChoiceOption.


        :param id: The id of this ChoiceOptionsChoiceOption.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def meanings(self):
        """Gets the meanings of this ChoiceOptionsChoiceOption.  # noqa: E501


        :return: The meanings of this ChoiceOptionsChoiceOption.  # noqa: E501
        :rtype: list[str]
        """
        return self._meanings

    @meanings.setter
    def meanings(self, meanings):
        """Sets the meanings of this ChoiceOptionsChoiceOption.


        :param meanings: The meanings of this ChoiceOptionsChoiceOption.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["OBSOLETE", "IN_PROGRESS", "RESOLVED", "CLOSED", "FOLDER", "INFORMATION", "SUCCESSFUL"]  # noqa: E501
        if not set(meanings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `meanings` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(meanings) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._meanings = meanings

    @property
    def name(self):
        """Gets the name of this ChoiceOptionsChoiceOption.  # noqa: E501


        :return: The name of this ChoiceOptionsChoiceOption.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChoiceOptionsChoiceOption.


        :param name: The name of this ChoiceOptionsChoiceOption.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def restricted_to_statuses(self):
        """Gets the restricted_to_statuses of this ChoiceOptionsChoiceOption.  # noqa: E501


        :return: The restricted_to_statuses of this ChoiceOptionsChoiceOption.  # noqa: E501
        :rtype: list[int]
        """
        return self._restricted_to_statuses

    @restricted_to_statuses.setter
    def restricted_to_statuses(self, restricted_to_statuses):
        """Sets the restricted_to_statuses of this ChoiceOptionsChoiceOption.


        :param restricted_to_statuses: The restricted_to_statuses of this ChoiceOptionsChoiceOption.  # noqa: E501
        :type: list[int]
        """

        self._restricted_to_statuses = restricted_to_statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChoiceOptionsChoiceOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChoiceOptionsChoiceOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
