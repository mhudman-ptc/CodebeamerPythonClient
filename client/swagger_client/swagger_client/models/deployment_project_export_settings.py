# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeploymentProjectExportSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_queries': 'bool',
        'include_tracker_items': 'bool',
        'include_trackers': 'bool',
        'project_id': 'int',
        'trackers': 'list[DeploymentTrackerExportSettings]'
    }

    attribute_map = {
        'include_queries': 'includeQueries',
        'include_tracker_items': 'includeTrackerItems',
        'include_trackers': 'includeTrackers',
        'project_id': 'projectId',
        'trackers': 'trackers'
    }

    def __init__(self, include_queries=None, include_tracker_items=None, include_trackers=None, project_id=None, trackers=None):  # noqa: E501
        """DeploymentProjectExportSettings - a model defined in Swagger"""  # noqa: E501
        self._include_queries = None
        self._include_tracker_items = None
        self._include_trackers = None
        self._project_id = None
        self._trackers = None
        self.discriminator = None
        if include_queries is not None:
            self.include_queries = include_queries
        if include_tracker_items is not None:
            self.include_tracker_items = include_tracker_items
        if include_trackers is not None:
            self.include_trackers = include_trackers
        self.project_id = project_id
        if trackers is not None:
            self.trackers = trackers

    @property
    def include_queries(self):
        """Gets the include_queries of this DeploymentProjectExportSettings.  # noqa: E501

        Flag if queries are included.  # noqa: E501

        :return: The include_queries of this DeploymentProjectExportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_queries

    @include_queries.setter
    def include_queries(self, include_queries):
        """Sets the include_queries of this DeploymentProjectExportSettings.

        Flag if queries are included.  # noqa: E501

        :param include_queries: The include_queries of this DeploymentProjectExportSettings.  # noqa: E501
        :type: bool
        """

        self._include_queries = include_queries

    @property
    def include_tracker_items(self):
        """Gets the include_tracker_items of this DeploymentProjectExportSettings.  # noqa: E501

        Flag if tracker items are included.  # noqa: E501

        :return: The include_tracker_items of this DeploymentProjectExportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_tracker_items

    @include_tracker_items.setter
    def include_tracker_items(self, include_tracker_items):
        """Sets the include_tracker_items of this DeploymentProjectExportSettings.

        Flag if tracker items are included.  # noqa: E501

        :param include_tracker_items: The include_tracker_items of this DeploymentProjectExportSettings.  # noqa: E501
        :type: bool
        """

        self._include_tracker_items = include_tracker_items

    @property
    def include_trackers(self):
        """Gets the include_trackers of this DeploymentProjectExportSettings.  # noqa: E501

        Flag if trackers are included.  # noqa: E501

        :return: The include_trackers of this DeploymentProjectExportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_trackers

    @include_trackers.setter
    def include_trackers(self, include_trackers):
        """Sets the include_trackers of this DeploymentProjectExportSettings.

        Flag if trackers are included.  # noqa: E501

        :param include_trackers: The include_trackers of this DeploymentProjectExportSettings.  # noqa: E501
        :type: bool
        """

        self._include_trackers = include_trackers

    @property
    def project_id(self):
        """Gets the project_id of this DeploymentProjectExportSettings.  # noqa: E501

        Project id  # noqa: E501

        :return: The project_id of this DeploymentProjectExportSettings.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DeploymentProjectExportSettings.

        Project id  # noqa: E501

        :param project_id: The project_id of this DeploymentProjectExportSettings.  # noqa: E501
        :type: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def trackers(self):
        """Gets the trackers of this DeploymentProjectExportSettings.  # noqa: E501

        Tracker export settings  # noqa: E501

        :return: The trackers of this DeploymentProjectExportSettings.  # noqa: E501
        :rtype: list[DeploymentTrackerExportSettings]
        """
        return self._trackers

    @trackers.setter
    def trackers(self, trackers):
        """Sets the trackers of this DeploymentProjectExportSettings.

        Tracker export settings  # noqa: E501

        :param trackers: The trackers of this DeploymentProjectExportSettings.  # noqa: E501
        :type: list[DeploymentTrackerExportSettings]
        """

        self._trackers = trackers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentProjectExportSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentProjectExportSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
