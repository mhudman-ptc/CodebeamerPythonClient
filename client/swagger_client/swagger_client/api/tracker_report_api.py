# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TrackerReportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_tracker_report(self, body, tracker_id, **kwargs):  # noqa: E501
        """Creates a report of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tracker_report(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerReportSettings body: (required)
        :param int tracker_id: (required)
        :return: TrackerReportSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_tracker_report_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_tracker_report_with_http_info(body, tracker_id, **kwargs)  # noqa: E501
            return data

    def create_tracker_report_with_http_info(self, body, tracker_id, **kwargs):  # noqa: E501
        """Creates a report of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tracker_report_with_http_info(body, tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerReportSettings body: (required)
        :param int tracker_id: (required)
        :return: TrackerReportSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tracker_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_tracker_report`")  # noqa: E501
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `create_tracker_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerReportSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tracker_report(self, tracker_id, report_id, **kwargs):  # noqa: E501
        """Deletes a report of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tracker_report(tracker_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int report_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tracker_report_with_http_info(tracker_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tracker_report_with_http_info(tracker_id, report_id, **kwargs)  # noqa: E501
            return data

    def delete_tracker_report_with_http_info(self, tracker_id, report_id, **kwargs):  # noqa: E501
        """Deletes a report of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tracker_report_with_http_info(tracker_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int report_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tracker_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `delete_tracker_report`")  # noqa: E501
        # verify the required parameter 'report_id' is set
        if ('report_id' not in params or
                params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `delete_tracker_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501
        if 'report_id' in params:
            path_params['reportId'] = params['report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/reports/{reportId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_report(self, tracker_id, report_id, **kwargs):  # noqa: E501
        """Get a report of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_report(tracker_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int report_id: (required)
        :param int page: Index of a report page starting from 1.
        :param int page_size: Number of items a report page. Max value: 500
        :return: ReportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_report_with_http_info(tracker_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_report_with_http_info(tracker_id, report_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_report_with_http_info(self, tracker_id, report_id, **kwargs):  # noqa: E501
        """Get a report of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_report_with_http_info(tracker_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int report_id: (required)
        :param int page: Index of a report page starting from 1.
        :param int page_size: Number of items a report page. Max value: 500
        :return: ReportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'report_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_report`")  # noqa: E501
        # verify the required parameter 'report_id' is set
        if ('report_id' not in params or
                params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `get_tracker_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501
        if 'report_id' in params:
            path_params['reportId'] = params['report_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/reports/{reportId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_report_items(self, tracker_id, report_id, **kwargs):  # noqa: E501
        """Get report items of a specific tracker view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_report_items(tracker_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int report_id: (required)
        :param int page: Index of a report page starting from 1.
        :param int page_size: Number of items a report page. Max value: 500
        :return: ReportItemResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_report_items_with_http_info(tracker_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_report_items_with_http_info(tracker_id, report_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_report_items_with_http_info(self, tracker_id, report_id, **kwargs):  # noqa: E501
        """Get report items of a specific tracker view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_report_items_with_http_info(tracker_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :param int report_id: (required)
        :param int page: Index of a report page starting from 1.
        :param int page_size: Number of items a report page. Max value: 500
        :return: ReportItemResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id', 'report_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_report_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_report_items`")  # noqa: E501
        # verify the required parameter 'report_id' is set
        if ('report_id' not in params or
                params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `get_tracker_report_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501
        if 'report_id' in params:
            path_params['reportId'] = params['report_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/reports/{reportId}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportItemResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tracker_reports(self, tracker_id, **kwargs):  # noqa: E501
        """Get all reports of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_reports(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: list[ReportReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracker_reports_with_http_info(tracker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracker_reports_with_http_info(tracker_id, **kwargs)  # noqa: E501
            return data

    def get_tracker_reports_with_http_info(self, tracker_id, **kwargs):  # noqa: E501
        """Get all reports of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracker_reports_with_http_info(tracker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tracker_id: (required)
        :return: list[ReportReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracker_reports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `get_tracker_reports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReportReference]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tracker_report(self, body, tracker_id, report_id, **kwargs):  # noqa: E501
        """Updates a report of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tracker_report(body, tracker_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerReportSettings body: (required)
        :param int tracker_id: (required)
        :param int report_id: (required)
        :return: TrackerReportSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tracker_report_with_http_info(body, tracker_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tracker_report_with_http_info(body, tracker_id, report_id, **kwargs)  # noqa: E501
            return data

    def update_tracker_report_with_http_info(self, body, tracker_id, report_id, **kwargs):  # noqa: E501
        """Updates a report of a specific tracker  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tracker_report_with_http_info(body, tracker_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrackerReportSettings body: (required)
        :param int tracker_id: (required)
        :param int report_id: (required)
        :return: TrackerReportSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tracker_id', 'report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tracker_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_tracker_report`")  # noqa: E501
        # verify the required parameter 'tracker_id' is set
        if ('tracker_id' not in params or
                params['tracker_id'] is None):
            raise ValueError("Missing the required parameter `tracker_id` when calling `update_tracker_report`")  # noqa: E501
        # verify the required parameter 'report_id' is set
        if ('report_id' not in params or
                params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `update_tracker_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tracker_id' in params:
            path_params['trackerId'] = params['tracker_id']  # noqa: E501
        if 'report_id' in params:
            path_params['reportId'] = params['report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trackers/{trackerId}/reports/{reportId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerReportSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
