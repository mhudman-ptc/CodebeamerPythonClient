# coding: utf-8

"""
    codebeamer swagger API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WikiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def check_wiki_page_lock(self, wiki_id, **kwargs):  # noqa: E501
        """Check whether a wiki page is locked, and if it is, retrieve the details of the lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_wiki_page_lock(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: Wiki page id (required)
        :return: LockInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_wiki_page_lock_with_http_info(wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.check_wiki_page_lock_with_http_info(wiki_id, **kwargs)  # noqa: E501
            return data

    def check_wiki_page_lock_with_http_info(self, wiki_id, **kwargs):  # noqa: E501
        """Check whether a wiki page is locked, and if it is, retrieve the details of the lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_wiki_page_lock_with_http_info(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: Wiki page id (required)
        :return: LockInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_wiki_page_lock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `check_wiki_page_lock`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}/lock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LockInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_wiki_page(self, body, **kwargs):  # noqa: E501
        """Create a new wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_wiki_page(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WikiPage body: (required)
        :return: WikiPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_wiki_page_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_wiki_page_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_wiki_page_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_wiki_page_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WikiPage body: (required)
        :return: WikiPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_wiki_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_wiki_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WikiPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_wiki_page(self, wiki_id, **kwargs):  # noqa: E501
        """Delete a wiki page by its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wiki_page(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: ID of the wiki page (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_wiki_page_with_http_info(wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_wiki_page_with_http_info(wiki_id, **kwargs)  # noqa: E501
            return data

    def delete_wiki_page_with_http_info(self, wiki_id, **kwargs):  # noqa: E501
        """Delete a wiki page by its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_wiki_page_with_http_info(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: ID of the wiki page (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_wiki_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `delete_wiki_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wiki_page(self, wiki_id, **kwargs):  # noqa: E501
        """Get wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wiki_page(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: ID of the wiki page (required)
        :param int version: Version of the wiki page
        :return: WikiPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wiki_page_with_http_info(wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wiki_page_with_http_info(wiki_id, **kwargs)  # noqa: E501
            return data

    def get_wiki_page_with_http_info(self, wiki_id, **kwargs):  # noqa: E501
        """Get wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wiki_page_with_http_info(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: ID of the wiki page (required)
        :param int version: Version of the wiki page
        :return: WikiPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wiki_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `get_wiki_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WikiPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wiki_page_history(self, wiki_id, **kwargs):  # noqa: E501
        """Returns the change history of the specified wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wiki_page_history(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: ArtifactRevisionSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wiki_page_history_with_http_info(wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wiki_page_history_with_http_info(wiki_id, **kwargs)  # noqa: E501
            return data

    def get_wiki_page_history_with_http_info(self, wiki_id, **kwargs):  # noqa: E501
        """Returns the change history of the specified wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wiki_page_history_with_http_info(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: (required)
        :param int page: Index of the result page starting from 1.
        :param int page_size: Number of items in a result page. Max value: 500
        :return: ArtifactRevisionSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wiki_page_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `get_wiki_page_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactRevisionSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wiki_permissions(self, wiki_id, **kwargs):  # noqa: E501
        """Get permissions of a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wiki_permissions(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: Wiki page id (required)
        :return: list[AccessPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wiki_permissions_with_http_info(wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wiki_permissions_with_http_info(wiki_id, **kwargs)  # noqa: E501
            return data

    def get_wiki_permissions_with_http_info(self, wiki_id, **kwargs):  # noqa: E501
        """Get permissions of a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wiki_permissions_with_http_info(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: Wiki page id (required)
        :return: list[AccessPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wiki_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `get_wiki_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccessPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lock_wiki_page(self, body, wiki_id, **kwargs):  # noqa: E501
        """Lock a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_wiki_page(body, wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LockRequest body: (required)
        :param int wiki_id: Wiki page id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lock_wiki_page_with_http_info(body, wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lock_wiki_page_with_http_info(body, wiki_id, **kwargs)  # noqa: E501
            return data

    def lock_wiki_page_with_http_info(self, body, wiki_id, **kwargs):  # noqa: E501
        """Lock a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lock_wiki_page_with_http_info(body, wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LockRequest body: (required)
        :param int wiki_id: Wiki page id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'wiki_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lock_wiki_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lock_wiki_page`")  # noqa: E501
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `lock_wiki_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}/lock', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_wiki_markup(self, body, project_id, **kwargs):  # noqa: E501
        """Render a wiki page as HTML in a specific context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_wiki_markup(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WikiRenderRequest body: (required)
        :param int project_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_wiki_markup_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.render_wiki_markup_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def render_wiki_markup_with_http_info(self, body, project_id, **kwargs):  # noqa: E501
        """Render a wiki page as HTML in a specific context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_wiki_markup_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WikiRenderRequest body: (required)
        :param int project_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_wiki_markup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `render_wiki_markup`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `render_wiki_markup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/projects/{projectId}/wiki2html', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_wiki_page(self, wiki_id, **kwargs):  # noqa: E501
        """Render a wiki page as HTML  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_wiki_page(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: ID of the wiki page (required)
        :param int version: version of the wiki page
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_wiki_page_with_http_info(wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.render_wiki_page_with_http_info(wiki_id, **kwargs)  # noqa: E501
            return data

    def render_wiki_page_with_http_info(self, wiki_id, **kwargs):  # noqa: E501
        """Render a wiki page as HTML  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_wiki_page_with_http_info(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: ID of the wiki page (required)
        :param int version: version of the wiki page
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_wiki_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `render_wiki_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}/html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_wiki_page_content(self, wiki_id, version, **kwargs):  # noqa: E501
        """Restores the content from a previous version of a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_wiki_page_content(wiki_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: Wiki page id (required)
        :param int version: The version to be restored (required)
        :return: WikiPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_wiki_page_content_with_http_info(wiki_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_wiki_page_content_with_http_info(wiki_id, version, **kwargs)  # noqa: E501
            return data

    def restore_wiki_page_content_with_http_info(self, wiki_id, version, **kwargs):  # noqa: E501
        """Restores the content from a previous version of a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_wiki_page_content_with_http_info(wiki_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: Wiki page id (required)
        :param int version: The version to be restored (required)
        :return: WikiPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_wiki_page_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `restore_wiki_page_content`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `restore_wiki_page_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}/restorecontent', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WikiPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_wiki_permissions(self, body, wiki_id, **kwargs):  # noqa: E501
        """Set permissions of a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_wiki_permissions(body, wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccessPermissionsRequest body: (required)
        :param int wiki_id: Wiki page id (required)
        :param bool recursive: Set permissions of children recursively
        :return: list[AccessPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_wiki_permissions_with_http_info(body, wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_wiki_permissions_with_http_info(body, wiki_id, **kwargs)  # noqa: E501
            return data

    def set_wiki_permissions_with_http_info(self, body, wiki_id, **kwargs):  # noqa: E501
        """Set permissions of a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_wiki_permissions_with_http_info(body, wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccessPermissionsRequest body: (required)
        :param int wiki_id: Wiki page id (required)
        :param bool recursive: Set permissions of children recursively
        :return: list[AccessPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'wiki_id', 'recursive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_wiki_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_wiki_permissions`")  # noqa: E501
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `set_wiki_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []
        if 'recursive' in params:
            query_params.append(('recursive', params['recursive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}/permissions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccessPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlock_wiki_page(self, wiki_id, **kwargs):  # noqa: E501
        """Unlock a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlock_wiki_page(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: Wiki page id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlock_wiki_page_with_http_info(wiki_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlock_wiki_page_with_http_info(wiki_id, **kwargs)  # noqa: E501
            return data

    def unlock_wiki_page_with_http_info(self, wiki_id, **kwargs):  # noqa: E501
        """Unlock a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlock_wiki_page_with_http_info(wiki_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wiki_id: Wiki page id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlock_wiki_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_id' is set
        if ('wiki_id' not in params or
                params['wiki_id'] is None):
            raise ValueError("Missing the required parameter `wiki_id` when calling `unlock_wiki_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_id' in params:
            path_params['wikiId'] = params['wiki_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{wikiId}/lock', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_wiki_page(self, body, item_id, **kwargs):  # noqa: E501
        """Update and/or move a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_wiki_page(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WikiPage body: (required)
        :param int item_id: Id of the wiki page to update (required)
        :return: WikiPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_wiki_page_with_http_info(body, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_wiki_page_with_http_info(body, item_id, **kwargs)  # noqa: E501
            return data

    def update_wiki_page_with_http_info(self, body, item_id, **kwargs):  # noqa: E501
        """Update and/or move a wiki page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_wiki_page_with_http_info(body, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WikiPage body: (required)
        :param int item_id: Id of the wiki page to update (required)
        :return: WikiPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_wiki_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_wiki_page`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `update_wiki_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v3/wikipages/{itemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WikiPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
